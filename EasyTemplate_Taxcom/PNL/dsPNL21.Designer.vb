'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPNL2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPNL2
    Inherits Global.System.Data.DataSet
    
    Private tableDIVIDEND_INCOME As DIVIDEND_INCOMEDataTable

    Private tableBUSINESS_SOURCE As BUSINESS_SOURCEDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DIVIDEND_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New DIVIDEND_INCOMEDataTable(ds.Tables("DIVIDEND_INCOME")))
            End If
            If (Not (ds.Tables("BUSINESS_SOURCE")) Is Nothing) Then
                MyBase.Tables.Add(New BUSINESS_SOURCEDataTable(ds.Tables("BUSINESS_SOURCE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DIVIDEND_INCOME() As DIVIDEND_INCOMEDataTable
        Get
            Return Me.tableDIVIDEND_INCOME
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property BUSINESS_SOURCE() As BUSINESS_SOURCEDataTable
        Get
            Return Me.tableBUSINESS_SOURCE
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPNL2 = CType(MyBase.Clone, dsPNL2)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("DIVIDEND_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New DIVIDEND_INCOMEDataTable(ds.Tables("DIVIDEND_INCOME")))
            End If
            If (Not (ds.Tables("BUSINESS_SOURCE")) Is Nothing) Then
                MyBase.Tables.Add(New BUSINESS_SOURCEDataTable(ds.Tables("BUSINESS_SOURCE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDIVIDEND_INCOME = CType(MyBase.Tables("DIVIDEND_INCOME"), DIVIDEND_INCOMEDataTable)
        If (initTable = True) Then
            If (Not (Me.tableDIVIDEND_INCOME) Is Nothing) Then
                Me.tableDIVIDEND_INCOME.InitVars()
            End If
        End If
        Me.tableBUSINESS_SOURCE = CType(MyBase.Tables("BUSINESS_SOURCE"), BUSINESS_SOURCEDataTable)
        If (initTable = True) Then
            If (Not (Me.tableBUSINESS_SOURCE) Is Nothing) Then
                Me.tableBUSINESS_SOURCE.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
        Me.DataSetName = "dsPNL2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPNL2.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDIVIDEND_INCOME = New DIVIDEND_INCOMEDataTable()
        MyBase.Tables.Add(Me.tableDIVIDEND_INCOME)
        Me.tableBUSINESS_SOURCE = New BUSINESS_SOURCEDataTable()
        MyBase.Tables.Add(Me.tableBUSINESS_SOURCE)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeDIVIDEND_INCOME() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeBUSINESS_SOURCE() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPNL2 = New dsPNL2()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub DIVIDEND_INCOMERowChangeEventHandler(ByVal sender As Object, ByVal e As DIVIDEND_INCOMERowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub BUSINESS_SOURCERowChangeEventHandler(ByVal sender As Object, ByVal e As BUSINESS_SOURCERowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DIVIDEND_INCOMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of DIVIDEND_INCOMERow)

        Private columnDI_KEY As Global.System.Data.DataColumn

        Private columnDI_DIVIDENDKEY As Global.System.Data.DataColumn

        Private columnDI_DATE As Global.System.Data.DataColumn

        Private columnDI_COMPANY As Global.System.Data.DataColumn

        Private columnDI_GROSS As Global.System.Data.DataColumn

        Private columnDI_TAX As Global.System.Data.DataColumn

        Private columnDI_WARANT_NO As Global.System.Data.DataColumn

        Private columnDI_CHKREGROSS As Global.System.Data.DataColumn

        Private columnDI_TAXRATE As Global.System.Data.DataColumn

        Private columnDI_REGROSS As Global.System.Data.DataColumn

        Private columnDI_TAXDEDUCTION As Global.System.Data.DataColumn

        Private columnDI_NETDEDUCTION As Global.System.Data.DataColumn

        Private columnDI_ENDDATE As Global.System.Data.DataColumn

        Private columnDI_TRATE As Global.System.Data.DataColumn

        Private columnDI_SOURCENO As Global.System.Data.DataColumn

        Private columnDI_DISCLOSE As Global.System.Data.DataColumn

        Private columnDI_TRANSFER As Global.System.Data.DataColumn

        Private columnDI_NET As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DIVIDEND_INCOME"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_KEY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_DIVIDENDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_DIVIDENDKEY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_COMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_COMPANY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_GROSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_GROSS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_TAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_TAX
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_WARANT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_WARANT_NO
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_CHKREGROSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_CHKREGROSS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_TAXRATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_TAXRATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_REGROSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_REGROSS
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_TAXDEDUCTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_TAXDEDUCTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_NETDEDUCTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_NETDEDUCTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_ENDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_ENDDATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_TRATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_TRATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_SOURCENO
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_DISCLOSEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_DISCLOSE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_TRANSFERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_TRANSFER
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property DI_NETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDI_NET
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DIVIDEND_INCOMERow
            Get
                Return CType(Me.Rows(index), DIVIDEND_INCOMERow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DIVIDEND_INCOMERowChanging As DIVIDEND_INCOMERowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DIVIDEND_INCOMERowChanged As DIVIDEND_INCOMERowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DIVIDEND_INCOMERowDeleting As DIVIDEND_INCOMERowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DIVIDEND_INCOMERowDeleted As DIVIDEND_INCOMERowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddDIVIDEND_INCOMERow(ByVal row As DIVIDEND_INCOMERow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddDIVIDEND_INCOMERow( _
                    ByVal DI_KEY As Integer, _
                    ByVal DI_DATE As Date, _
                    ByVal DI_COMPANY As String, _
                    ByVal DI_GROSS As Decimal, _
                    ByVal DI_TAX As Decimal, _
                    ByVal DI_WARANT_NO As String, _
                    ByVal DI_CHKREGROSS As String, _
                    ByVal DI_TAXRATE As Decimal, _
                    ByVal DI_REGROSS As Double, _
                    ByVal DI_TAXDEDUCTION As Decimal, _
                    ByVal DI_NETDEDUCTION As Decimal, _
                    ByVal DI_ENDDATE As Date, _
                    ByVal DI_TRATE As Decimal, _
                    ByVal DI_SOURCENO As Integer, _
                    ByVal DI_DISCLOSE As String, _
                    ByVal DI_TRANSFER As String, _
                    ByVal DI_NET As Decimal) As DIVIDEND_INCOMERow
            Dim rowDIVIDEND_INCOMERow As DIVIDEND_INCOMERow = CType(Me.NewRow, DIVIDEND_INCOMERow)
            Dim columnValuesArray() As Object = New Object() {DI_KEY, Nothing, DI_DATE, DI_COMPANY, DI_GROSS, DI_TAX, DI_WARANT_NO, DI_CHKREGROSS, DI_TAXRATE, DI_REGROSS, DI_TAXDEDUCTION, DI_NETDEDUCTION, DI_ENDDATE, DI_TRATE, DI_SOURCENO, DI_DISCLOSE, DI_TRANSFER, DI_NET}
            rowDIVIDEND_INCOMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDIVIDEND_INCOMERow)
            Return rowDIVIDEND_INCOMERow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByDI_DIVIDENDKEY(ByVal DI_DIVIDENDKEY As Integer) As DIVIDEND_INCOMERow
            Return CType(Me.Rows.Find(New Object() {DI_DIVIDENDKEY}), DIVIDEND_INCOMERow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DIVIDEND_INCOMEDataTable = CType(MyBase.Clone, DIVIDEND_INCOMEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DIVIDEND_INCOMEDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnDI_KEY = MyBase.Columns("DI_KEY")
            Me.columnDI_DIVIDENDKEY = MyBase.Columns("DI_DIVIDENDKEY")
            Me.columnDI_DATE = MyBase.Columns("DI_DATE")
            Me.columnDI_COMPANY = MyBase.Columns("DI_COMPANY")
            Me.columnDI_GROSS = MyBase.Columns("DI_GROSS")
            Me.columnDI_TAX = MyBase.Columns("DI_TAX")
            Me.columnDI_WARANT_NO = MyBase.Columns("DI_WARANT_NO")
            Me.columnDI_CHKREGROSS = MyBase.Columns("DI_CHKREGROSS")
            Me.columnDI_TAXRATE = MyBase.Columns("DI_TAXRATE")
            Me.columnDI_REGROSS = MyBase.Columns("DI_REGROSS")
            Me.columnDI_TAXDEDUCTION = MyBase.Columns("DI_TAXDEDUCTION")
            Me.columnDI_NETDEDUCTION = MyBase.Columns("DI_NETDEDUCTION")
            Me.columnDI_ENDDATE = MyBase.Columns("DI_ENDDATE")
            Me.columnDI_TRATE = MyBase.Columns("DI_TRATE")
            Me.columnDI_SOURCENO = MyBase.Columns("DI_SOURCENO")
            Me.columnDI_DISCLOSE = MyBase.Columns("DI_DISCLOSE")
            Me.columnDI_TRANSFER = MyBase.Columns("DI_TRANSFER")
            Me.columnDI_NET = MyBase.Columns("DI_NET")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnDI_KEY = New Global.System.Data.DataColumn("DI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_KEY)
            Me.columnDI_DIVIDENDKEY = New Global.System.Data.DataColumn("DI_DIVIDENDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_DIVIDENDKEY)
            Me.columnDI_DATE = New Global.System.Data.DataColumn("DI_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_DATE)
            Me.columnDI_COMPANY = New Global.System.Data.DataColumn("DI_COMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_COMPANY)
            Me.columnDI_GROSS = New Global.System.Data.DataColumn("DI_GROSS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_GROSS)
            Me.columnDI_TAX = New Global.System.Data.DataColumn("DI_TAX", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_TAX)
            Me.columnDI_WARANT_NO = New Global.System.Data.DataColumn("DI_WARANT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_WARANT_NO)
            Me.columnDI_CHKREGROSS = New Global.System.Data.DataColumn("DI_CHKREGROSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_CHKREGROSS)
            Me.columnDI_TAXRATE = New Global.System.Data.DataColumn("DI_TAXRATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_TAXRATE)
            Me.columnDI_REGROSS = New Global.System.Data.DataColumn("DI_REGROSS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_REGROSS)
            Me.columnDI_TAXDEDUCTION = New Global.System.Data.DataColumn("DI_TAXDEDUCTION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_TAXDEDUCTION)
            Me.columnDI_NETDEDUCTION = New Global.System.Data.DataColumn("DI_NETDEDUCTION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_NETDEDUCTION)
            Me.columnDI_ENDDATE = New Global.System.Data.DataColumn("DI_ENDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_ENDDATE)
            Me.columnDI_TRATE = New Global.System.Data.DataColumn("DI_TRATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_TRATE)
            Me.columnDI_SOURCENO = New Global.System.Data.DataColumn("DI_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_SOURCENO)
            Me.columnDI_DISCLOSE = New Global.System.Data.DataColumn("DI_DISCLOSE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_DISCLOSE)
            Me.columnDI_TRANSFER = New Global.System.Data.DataColumn("DI_TRANSFER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_TRANSFER)
            Me.columnDI_NET = New Global.System.Data.DataColumn("DI_NET", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDI_NET)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDI_DIVIDENDKEY}, True))
            Me.columnDI_DIVIDENDKEY.AutoIncrement = True
            Me.columnDI_DIVIDENDKEY.AllowDBNull = False
            Me.columnDI_DIVIDENDKEY.Unique = True
            Me.columnDI_COMPANY.MaxLength = 100
            Me.columnDI_GROSS.DefaultValue = CType(0D, Decimal)
            Me.columnDI_TAX.DefaultValue = CType(0D, Decimal)
            Me.columnDI_WARANT_NO.MaxLength = 50
            Me.columnDI_CHKREGROSS.MaxLength = 3
            Me.columnDI_REGROSS.DefaultValue = CType(0.0R, Double)
            Me.columnDI_DISCLOSE.MaxLength = 3
            Me.columnDI_TRANSFER.MaxLength = 25
            Me.columnDI_NET.DefaultValue = CType(0D, Decimal)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewDIVIDEND_INCOMERow() As DIVIDEND_INCOMERow
            Return CType(Me.NewRow, DIVIDEND_INCOMERow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DIVIDEND_INCOMERow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DIVIDEND_INCOMERow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DIVIDEND_INCOMERowChangedEvent) Is Nothing) Then
                RaiseEvent DIVIDEND_INCOMERowChanged(Me, New DIVIDEND_INCOMERowChangeEvent(CType(e.Row, DIVIDEND_INCOMERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DIVIDEND_INCOMERowChangingEvent) Is Nothing) Then
                RaiseEvent DIVIDEND_INCOMERowChanging(Me, New DIVIDEND_INCOMERowChangeEvent(CType(e.Row, DIVIDEND_INCOMERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DIVIDEND_INCOMERowDeletedEvent) Is Nothing) Then
                RaiseEvent DIVIDEND_INCOMERowDeleted(Me, New DIVIDEND_INCOMERowChangeEvent(CType(e.Row, DIVIDEND_INCOMERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DIVIDEND_INCOMERowDeletingEvent) Is Nothing) Then
                RaiseEvent DIVIDEND_INCOMERowDeleting(Me, New DIVIDEND_INCOMERowChangeEvent(CType(e.Row, DIVIDEND_INCOMERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveDIVIDEND_INCOMERow(ByVal row As DIVIDEND_INCOMERow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL2 = New dsPNL2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DIVIDEND_INCOMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class BUSINESS_SOURCEDataTable
        Inherits Global.System.Data.TypedTableBase(Of BUSINESS_SOURCERow)

        Private columnBC_KEY As Global.System.Data.DataColumn

        Private columnBC_SOURCEKEY As Global.System.Data.DataColumn

        Private columnBC_YA As Global.System.Data.DataColumn

        Private columnBC_SOURCENO As Global.System.Data.DataColumn

        Private columnBC_CODE As Global.System.Data.DataColumn

        Private columnBC_TYPE As Global.System.Data.DataColumn

        Private columnBC_COMPANY As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "BUSINESS_SOURCE"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_KEY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_SOURCEKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_SOURCEKEY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_YAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_YA
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_SOURCENO
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_CODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_TYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BC_COMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_COMPANY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As BUSINESS_SOURCERow
            Get
                Return CType(Me.Rows(index), BUSINESS_SOURCERow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUSINESS_SOURCERowChanging As BUSINESS_SOURCERowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUSINESS_SOURCERowChanged As BUSINESS_SOURCERowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUSINESS_SOURCERowDeleting As BUSINESS_SOURCERowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event BUSINESS_SOURCERowDeleted As BUSINESS_SOURCERowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddBUSINESS_SOURCERow(ByVal row As BUSINESS_SOURCERow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddBUSINESS_SOURCERow(ByVal BC_KEY As String, ByVal BC_SOURCEKEY As Integer, ByVal BC_YA As String, ByVal BC_SOURCENO As Integer, ByVal BC_CODE As String, ByVal BC_TYPE As String, ByVal BC_COMPANY As String) As BUSINESS_SOURCERow
            Dim rowBUSINESS_SOURCERow As BUSINESS_SOURCERow = CType(Me.NewRow, BUSINESS_SOURCERow)
            Dim columnValuesArray() As Object = New Object() {BC_KEY, BC_SOURCEKEY, BC_YA, BC_SOURCENO, BC_CODE, BC_TYPE, BC_COMPANY}
            rowBUSINESS_SOURCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBUSINESS_SOURCERow)
            Return rowBUSINESS_SOURCERow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BUSINESS_SOURCEDataTable = CType(MyBase.Clone, BUSINESS_SOURCEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BUSINESS_SOURCEDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnBC_KEY = MyBase.Columns("BC_KEY")
            Me.columnBC_SOURCEKEY = MyBase.Columns("BC_SOURCEKEY")
            Me.columnBC_YA = MyBase.Columns("BC_YA")
            Me.columnBC_SOURCENO = MyBase.Columns("BC_SOURCENO")
            Me.columnBC_CODE = MyBase.Columns("BC_CODE")
            Me.columnBC_TYPE = MyBase.Columns("BC_TYPE")
            Me.columnBC_COMPANY = MyBase.Columns("BC_COMPANY")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnBC_KEY = New Global.System.Data.DataColumn("BC_KEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_KEY)
            Me.columnBC_SOURCEKEY = New Global.System.Data.DataColumn("BC_SOURCEKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_SOURCEKEY)
            Me.columnBC_YA = New Global.System.Data.DataColumn("BC_YA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_YA)
            Me.columnBC_SOURCENO = New Global.System.Data.DataColumn("BC_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_SOURCENO)
            Me.columnBC_CODE = New Global.System.Data.DataColumn("BC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_CODE)
            Me.columnBC_TYPE = New Global.System.Data.DataColumn("BC_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_TYPE)
            Me.columnBC_COMPANY = New Global.System.Data.DataColumn("BC_COMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_COMPANY)
            Me.columnBC_KEY.MaxLength = 20
            Me.columnBC_YA.MaxLength = 5
            Me.columnBC_CODE.MaxLength = 20
            Me.columnBC_TYPE.MaxLength = 255
            Me.columnBC_COMPANY.MaxLength = 8
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewBUSINESS_SOURCERow() As BUSINESS_SOURCERow
            Return CType(Me.NewRow, BUSINESS_SOURCERow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BUSINESS_SOURCERow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BUSINESS_SOURCERow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BUSINESS_SOURCERowChangedEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowChanged(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row, BUSINESS_SOURCERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BUSINESS_SOURCERowChangingEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowChanging(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row, BUSINESS_SOURCERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BUSINESS_SOURCERowDeletedEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowDeleted(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row, BUSINESS_SOURCERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BUSINESS_SOURCERowDeletingEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowDeleting(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row, BUSINESS_SOURCERow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveBUSINESS_SOURCERow(ByVal row As BUSINESS_SOURCERow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL2 = New dsPNL2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BUSINESS_SOURCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DIVIDEND_INCOMERow
        Inherits Global.System.Data.DataRow

        Private tableDIVIDEND_INCOME As DIVIDEND_INCOMEDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDIVIDEND_INCOME = CType(Me.Table, DIVIDEND_INCOMEDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_KEY() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_KEYColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_KEY' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableDIVIDEND_INCOME.DI_KEYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_DIVIDENDKEY() As Integer
            Get
                Return CType(Me(Me.tableDIVIDEND_INCOME.DI_DIVIDENDKEYColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me.tableDIVIDEND_INCOME.DI_DIVIDENDKEYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_DATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_DATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_DATE' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableDIVIDEND_INCOME.DI_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_COMPANY() As String
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_COMPANYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_COMPANY' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableDIVIDEND_INCOME.DI_COMPANYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_GROSS() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_GROSSColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_GROSS' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_GROSSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_TAX() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_TAXColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_TAX' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_TAXColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_WARANT_NO() As String
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_WARANT_NOColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_WARANT_NO' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableDIVIDEND_INCOME.DI_WARANT_NOColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_CHKREGROSS() As String
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_CHKREGROSSColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_CHKREGROSS' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableDIVIDEND_INCOME.DI_CHKREGROSSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_TAXRATE() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_TAXRATEColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_TAXRATE' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_TAXRATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_REGROSS() As Double
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_REGROSSColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_REGROSS' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Double)
                Me(Me.tableDIVIDEND_INCOME.DI_REGROSSColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_TAXDEDUCTION() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_TAXDEDUCTIONColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_TAXDEDUCTION' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_TAXDEDUCTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_NETDEDUCTION() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_NETDEDUCTIONColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_NETDEDUCTION' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_NETDEDUCTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_ENDDATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_ENDDATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_ENDDATE' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableDIVIDEND_INCOME.DI_ENDDATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_TRATE() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_TRATEColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_TRATE' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_TRATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_SOURCENO() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_SOURCENOColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_SOURCENO' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableDIVIDEND_INCOME.DI_SOURCENOColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_DISCLOSE() As String
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_DISCLOSEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_DISCLOSE' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableDIVIDEND_INCOME.DI_DISCLOSEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_TRANSFER() As String
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_TRANSFERColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_TRANSFER' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableDIVIDEND_INCOME.DI_TRANSFERColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property DI_NET() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableDIVIDEND_INCOME.DI_NETColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DI_NET' in table 'DIVIDEND_INCOME' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableDIVIDEND_INCOME.DI_NETColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_KEYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_KEYNull()
            Me(Me.tableDIVIDEND_INCOME.DI_KEYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_DATENull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_DATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_DATENull()
            Me(Me.tableDIVIDEND_INCOME.DI_DATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_COMPANYNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_COMPANYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_COMPANYNull()
            Me(Me.tableDIVIDEND_INCOME.DI_COMPANYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_GROSSNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_GROSSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_GROSSNull()
            Me(Me.tableDIVIDEND_INCOME.DI_GROSSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_TAXNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_TAXColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_TAXNull()
            Me(Me.tableDIVIDEND_INCOME.DI_TAXColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_WARANT_NONull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_WARANT_NOColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_WARANT_NONull()
            Me(Me.tableDIVIDEND_INCOME.DI_WARANT_NOColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_CHKREGROSSNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_CHKREGROSSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_CHKREGROSSNull()
            Me(Me.tableDIVIDEND_INCOME.DI_CHKREGROSSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_TAXRATENull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_TAXRATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_TAXRATENull()
            Me(Me.tableDIVIDEND_INCOME.DI_TAXRATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_REGROSSNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_REGROSSColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_REGROSSNull()
            Me(Me.tableDIVIDEND_INCOME.DI_REGROSSColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_TAXDEDUCTIONNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_TAXDEDUCTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_TAXDEDUCTIONNull()
            Me(Me.tableDIVIDEND_INCOME.DI_TAXDEDUCTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_NETDEDUCTIONNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_NETDEDUCTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_NETDEDUCTIONNull()
            Me(Me.tableDIVIDEND_INCOME.DI_NETDEDUCTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_ENDDATENull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_ENDDATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_ENDDATENull()
            Me(Me.tableDIVIDEND_INCOME.DI_ENDDATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_TRATENull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_TRATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_TRATENull()
            Me(Me.tableDIVIDEND_INCOME.DI_TRATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_SOURCENOColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_SOURCENONull()
            Me(Me.tableDIVIDEND_INCOME.DI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_DISCLOSENull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_DISCLOSEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_DISCLOSENull()
            Me(Me.tableDIVIDEND_INCOME.DI_DISCLOSEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_TRANSFERNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_TRANSFERColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_TRANSFERNull()
            Me(Me.tableDIVIDEND_INCOME.DI_TRANSFERColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsDI_NETNull() As Boolean
            Return Me.IsNull(Me.tableDIVIDEND_INCOME.DI_NETColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetDI_NETNull()
            Me(Me.tableDIVIDEND_INCOME.DI_NETColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BUSINESS_SOURCERow
        Inherits Global.System.Data.DataRow

        Private tableBUSINESS_SOURCE As BUSINESS_SOURCEDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBUSINESS_SOURCE = CType(Me.Table, BUSINESS_SOURCEDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_KEY() As String
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_KEYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_KEY' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBUSINESS_SOURCE.BC_KEYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_SOURCEKEY() As Integer
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_SOURCEKEY' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_YA() As String
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_YAColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_YA' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBUSINESS_SOURCE.BC_YAColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_SOURCENO() As Integer
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_SOURCENO' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_CODE() As String
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_CODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_CODE' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBUSINESS_SOURCE.BC_CODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_TYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_TYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_TYPE' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBUSINESS_SOURCE.BC_TYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BC_COMPANY() As String
            Get
                Try
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_COMPANYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_COMPANY' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBUSINESS_SOURCE.BC_COMPANYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_KEYNull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_KEYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_KEYNull()
            Me(Me.tableBUSINESS_SOURCE.BC_KEYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_SOURCEKEYNull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_SOURCEKEYNull()
            Me(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_YANull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_YAColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_YANull()
            Me(Me.tableBUSINESS_SOURCE.BC_YAColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_SOURCENONull()
            Me(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_CODENull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_CODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_CODENull()
            Me(Me.tableBUSINESS_SOURCE.BC_CODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_TYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_TYPENull()
            Me(Me.tableBUSINESS_SOURCE.BC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsBC_COMPANYNull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_COMPANYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetBC_COMPANYNull()
            Me(Me.tableBUSINESS_SOURCE.BC_COMPANYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class DIVIDEND_INCOMERowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As DIVIDEND_INCOMERow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As DIVIDEND_INCOMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As DIVIDEND_INCOMERow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class BUSINESS_SOURCERowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As BUSINESS_SOURCERow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As BUSINESS_SOURCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As BUSINESS_SOURCERow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
