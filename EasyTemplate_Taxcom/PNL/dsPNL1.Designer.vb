'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPNL"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPNL
    Inherits Global.System.Data.DataSet
    
    Private tablePLFST_SALES_DETAIL As PLFST_SALES_DETAILDataTable
    
    Private tablePLFST_SALES As PLFST_SALESDataTable
    
    Private tableBUSINESS_SOURCE As BUSINESS_SOURCEDataTable
    
    Private tablePLFST_OPENSTOCK As PLFST_OPENSTOCKDataTable
    
    Private tablePLFST_OPENSTOCK_DETAIL As PLFST_OPENSTOCK_DETAILDataTable
    
    Private tablePLFST_PURCHASE As PLFST_PURCHASEDataTable
    
    Private tablePLFST_PURCHASE_DETAIL As PLFST_PURCHASE_DETAILDataTable
    
    Private tableEXPENSES_DEPRECIATION As EXPENSES_DEPRECIATIONDataTable
    
    Private tableEXPENSES_DEPRECIATION_DETAIL As EXPENSES_DEPRECIATION_DETAILDataTable
    
    Private tableEXPENSES_ALLOW As EXPENSES_ALLOWDataTable
    
    Private tableEXPENSES_ALLOW_DETAIL As EXPENSES_ALLOW_DETAILDataTable
    
    Private tableEXPENSES_NONALLOW As EXPENSES_NONALLOWDataTable
    
    Private tableEXPENSES_NONALLOW_DETAIL As EXPENSES_NONALLOW_DETAILDataTable
    
    Private tablePLFST_CLOSESTOCK As PLFST_CLOSESTOCKDataTable
    
    Private tablePLFST_CLOSESTOCK_DETAIL As PLFST_CLOSESTOCK_DETAILDataTable
    
    Private tableNONSOURCE_BUSINESSINCOME As NONSOURCE_BUSINESSINCOMEDataTable
    
    Private tableNONSOURCE_BUSINESSINCOME_DETAIL As NONSOURCE_BUSINESSINCOME_DETAILDataTable
    
    Private tableINCOME_REALFET As INCOME_REALFETDataTable
    
    Private tableINCOME_REALFET_DETAIL As INCOME_REALFET_DETAILDataTable
    
    Private tableINCOME_NBINTEREST As INCOME_NBINTERESTDataTable
    
    Private tableINCOME_NBINTEREST_DETAIL As INCOME_NBINTEREST_DETAILDataTable
    
    Private tableINCOME_NBROYALTY As INCOME_NBROYALTYDataTable
    
    Private tableINCOME_NBROYALTY_DETAIL As INCOME_NBROYALTY_DETAILDataTable
    
    Private tableOTHER_INCOME As OTHER_INCOMEDataTable
    
    Private tableOTHER_INCOME_DETAIL As OTHER_INCOME_DETAILDataTable
    
    Private tableINCOME_NTDISPOSALFA As INCOME_NTDISPOSALFADataTable
    
    Private tableINCOME_NTDISPOSALFA_DETAIL As INCOME_NTDISPOSALFA_DETAILDataTable
    
    Private tableINCOME_NTDISPOSALINVEST As INCOME_NTDISPOSALINVESTDataTable
    
    Private tableINCOME_NTDISPOSALINVEST_DETAIL As INCOME_NTDISPOSALINVEST_DETAILDataTable
    
    Private tableINCOME_NTFOREIGNINCREM As INCOME_NTFOREIGNINCREMDataTable
    
    Private tableINCOME_NTFOREIGNINCREM_DETAIL As INCOME_NTFOREIGNINCREM_DETAILDataTable
    
    Private tableINCOME_NTREALFE As INCOME_NTREALFEDataTable
    
    Private tableINCOME_NTREALFE_DETAIL As INCOME_NTREALFE_DETAILDataTable
    
    Private tableINCOME_NTUREALFENT As INCOME_NTUREALFENTDataTable
    
    Private tableINCOME_NTUREALFENT_DETAIL As INCOME_NTUREALFENT_DETAILDataTable
    
    Private tableINCOME_NTUREALFET As INCOME_NTUREALFETDataTable
    
    Private tableINCOME_NTUREALFET_DETAIL As INCOME_NTUREALFET_DETAILDataTable
    
    Private tableEXPENSES_INTEREST As EXPENSES_INTERESTDataTable
    
    Private tableEXPENSES_INTEREST_DETAIL As EXPENSES_INTEREST_DETAILDataTable
    
    Private tableEXPENSES_LEGAL As EXPENSES_LEGALDataTable
    
    Private tableEXPENSES_LEGAL_DETAIL As EXPENSES_LEGAL_DETAILDataTable
    
    Private tableEXPENSES_TECH_FEE As EXPENSES_TECH_FEEDataTable
    
    Private tableEXPENSES_TECH_FEE_DETAIL As EXPENSES_TECH_FEE_DETAILDataTable
    
    Private tableEXPENSES_CONTRACT As EXPENSES_CONTRACTDataTable
    
    Private tableEXPENSES_CONTRACT_DETAIL As EXPENSES_CONTRACT_DETAILDataTable
    
    Private tableEXPENSES_DIRECTORS_FEE As EXPENSES_DIRECTORS_FEEDataTable
    
    Private tableEXPENSES_DIRECTORS_FEE_DETAIL As EXPENSES_DIRECTORS_FEE_DETAILDataTable
    
    Private tableEXPENSES_SALARY As EXPENSES_SALARYDataTable
    
    Private tableEXPENSES_SALARY_DETAIL As EXPENSES_SALARY_DETAILDataTable
    
    Private tableEXPENSES_EMPLSTOCK_DETAIL As EXPENSES_EMPLSTOCK_DETAILDataTable
    
    Private tableEXPENSES_EMPL_STOCK As EXPENSES_EMPL_STOCKDataTable
    
    Private tableEXPENSES_ROYALTY As EXPENSES_ROYALTYDataTable
    
    Private tableEXPENSES_ROYALTY_DETAIL As EXPENSES_ROYALTY_DETAILDataTable
    
    Private tableEXPENSES_RENTAL As EXPENSES_RENTALDataTable
    
    Private tableEXPENSES_RENTAL_DETAIL As EXPENSES_RENTAL_DETAILDataTable
    
    Private tableEXPENSES_REPAIR As EXPENSES_REPAIRDataTable
    
    Private tableEXPENSES_REPAIR_DETAIL As EXPENSES_REPAIR_DETAILDataTable
    
    Private tableEXPENSES_RESEARCH As EXPENSES_RESEARCHDataTable
    
    Private tableEXPENSES_RESEARCH_DETAIL As EXPENSES_RESEARCH_DETAILDataTable
    
    Private tableEXPENSES_PROMOTE As EXPENSES_PROMOTEDataTable
    
    Private tableEXPENSES_PROMOTE_DETAIL As EXPENSES_PROMOTE_DETAILDataTable
    
    Private tableEXPENSES_TRAVEL As EXPENSES_TRAVELDataTable
    
    Private tableEXPENSES_TRAVEL_DETAIL As EXPENSES_TRAVEL_DETAILDataTable
    
    Private tableEXPENSES_JKDM As EXPENSES_JKDMDataTable
    
    Private tableEXPENSES_JKDM_DETAIL As EXPENSES_JKDM_DETAILDataTable
    
    Private tableOTHER_EXDEPRECIATION As OTHER_EXDEPRECIATIONDataTable
    
    Private tableOTHER_EXDEPRECIATION_DETAIL As OTHER_EXDEPRECIATION_DETAILDataTable
    
    Private tableOTHER_EXAPPRDONATION As OTHER_EXAPPRDONATIONDataTable
    
    Private tableOTHER_EXAPPRDONATION_DETAIL As OTHER_EXAPPRDONATION_DETAILDataTable
    
    Private tableOTHER_EXNAPPRDONATION As OTHER_EXNAPPRDONATIONDataTable
    
    Private tableOTHER_EXNAPPRDONATION_DETAIL As OTHER_EXNAPPRDONATION_DETAILDataTable
    
    Private tableOTHER_EXZAKAT As OTHER_EXZAKATDataTable
    
    Private tableOTHER_EXZAKAT_DETAIL As OTHER_EXZAKAT_DETAILDataTable
    
    Private tableOTHER_EXLOSSDISPOSALFA As OTHER_EXLOSSDISPOSALFADataTable
    
    Private tableOTHER_EXLOSSDISPOSALFA_DETAIL As OTHER_EXLOSSDISPOSALFA_DETAILDataTable
    
    Private tableOTHER_ENTERTAINNSTAFF As OTHER_ENTERTAINNSTAFFDataTable
    
    Private tableOTHER_ENTERTAINNSTAFF_DETAIL As OTHER_ENTERTAINNSTAFF_DETAILDataTable
    
    Private tableOTHER_ENTERTAINSTAFF As OTHER_ENTERTAINSTAFFDataTable
    
    Private tableOTHER_ENTERTAINSTAFF_DETAIL As OTHER_ENTERTAINSTAFF_DETAILDataTable
    
    Private tableOTHER_EXPENALTY As OTHER_EXPENALTYDataTable
    
    Private tableOTHER_EXPENALTY_DETAIL As OTHER_EXPENALTY_DETAILDataTable
    
    Private tableOTHER_EXPROVISIONACC As OTHER_EXPROVISIONACCDataTable
    
    Private tableOTHER_EXPROVISIONACC_DETAIL As OTHER_EXPROVISIONACC_DETAILDataTable
    
    Private tableOTHER_EXLEAVEPASSAGE As OTHER_EXLEAVEPASSAGEDataTable
    
    Private tableOTHER_EXLEAVEPASSAGE_DETAIL As OTHER_EXLEAVEPASSAGE_DETAILDataTable
    
    Private tableOTHER_EXFAWRITTENOFF As OTHER_EXFAWRITTENOFFDataTable
    
    Private tableOTHER_EXFAWRITTENOFF_DETAIL As OTHER_EXFAWRITTENOFF_DETAILDataTable
    
    Private tableOTHER_EXURLOSSFOREIGN As OTHER_EXURLOSSFOREIGNDataTable
    
    Private tableOTHER_EXURLOSSFOREIGN_DETAIL As OTHER_EXURLOSSFOREIGN_DETAILDataTable
    
    Private tableOTHER_EXRLOSSFOREIGNT As OTHER_EXRLOSSFOREIGNTDataTable
    
    Private tableOTHER_EXRLOSSFOREIGNT_DETAIL As OTHER_EXRLOSSFOREIGNT_DETAILDataTable
    
    Private tableOTHER_EXRLOSSFOREIGN As OTHER_EXRLOSSFOREIGNDataTable
    
    Private tableOTHER_EXRLOSSFOREIGN_DETAIL As OTHER_EXRLOSSFOREIGN_DETAILDataTable
    
    Private tableOTHER_EXINITIALSUB As OTHER_EXINITIALSUBDataTable
    
    Private tableOTHER_EXINITIALSUB_DETAIL As OTHER_EXINITIALSUB_DETAILDataTable
    
    Private tableOTHER_EXCAPITALEXP As OTHER_EXCAPITALEXPDataTable
    
    Private tableOTHER_EXCAPITALEXP_DETAIL As OTHER_EXCAPITALEXP_DETAILDataTable
    
    Private tableOTHER_EXPENSES As OTHER_EXPENSESDataTable
    
    Private tableOTHER_EXPENSES_DETAIL As OTHER_EXPENSES_DETAILDataTable
    
    Private tableRENTAL_INCOME As RENTAL_INCOMEDataTable
    
    Private tableNonAllowable_Expenses As NonAllowable_ExpensesDataTable
    
    Private relationPLFST_SALES_DETAIL_PLFST_SALES As Global.System.Data.DataRelation
    
    Private relationFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_REALFET_INCOME_REALFET_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_INCOME_OTHER_INCOME_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PLFST_SALES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_SALES_DETAILDataTable(ds.Tables("PLFST_SALES_DETAIL")))
            End If
            If (Not (ds.Tables("PLFST_SALES")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_SALESDataTable(ds.Tables("PLFST_SALES")))
            End If
            If (Not (ds.Tables("BUSINESS_SOURCE")) Is Nothing) Then
                MyBase.Tables.Add(New BUSINESS_SOURCEDataTable(ds.Tables("BUSINESS_SOURCE")))
            End If
            If (Not (ds.Tables("PLFST_OPENSTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_OPENSTOCKDataTable(ds.Tables("PLFST_OPENSTOCK")))
            End If
            If (Not (ds.Tables("PLFST_OPENSTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_OPENSTOCK_DETAILDataTable(ds.Tables("PLFST_OPENSTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("PLFST_PURCHASE")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_PURCHASEDataTable(ds.Tables("PLFST_PURCHASE")))
            End If
            If (Not (ds.Tables("PLFST_PURCHASE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_PURCHASE_DETAILDataTable(ds.Tables("PLFST_PURCHASE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_DEPRECIATION")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DEPRECIATIONDataTable(ds.Tables("EXPENSES_DEPRECIATION")))
            End If
            If (Not (ds.Tables("EXPENSES_DEPRECIATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DEPRECIATION_DETAILDataTable(ds.Tables("EXPENSES_DEPRECIATION_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_ALLOW")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ALLOWDataTable(ds.Tables("EXPENSES_ALLOW")))
            End If
            If (Not (ds.Tables("EXPENSES_ALLOW_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ALLOW_DETAILDataTable(ds.Tables("EXPENSES_ALLOW_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_NONALLOW")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_NONALLOWDataTable(ds.Tables("EXPENSES_NONALLOW")))
            End If
            If (Not (ds.Tables("EXPENSES_NONALLOW_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_NONALLOW_DETAILDataTable(ds.Tables("EXPENSES_NONALLOW_DETAIL")))
            End If
            If (Not (ds.Tables("PLFST_CLOSESTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_CLOSESTOCKDataTable(ds.Tables("PLFST_CLOSESTOCK")))
            End If
            If (Not (ds.Tables("PLFST_CLOSESTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_CLOSESTOCK_DETAILDataTable(ds.Tables("PLFST_CLOSESTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("NONSOURCE_BUSINESSINCOME")) Is Nothing) Then
                MyBase.Tables.Add(New NONSOURCE_BUSINESSINCOMEDataTable(ds.Tables("NONSOURCE_BUSINESSINCOME")))
            End If
            If (Not (ds.Tables("NONSOURCE_BUSINESSINCOME_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New NONSOURCE_BUSINESSINCOME_DETAILDataTable(ds.Tables("NONSOURCE_BUSINESSINCOME_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_REALFET")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_REALFETDataTable(ds.Tables("INCOME_REALFET")))
            End If
            If (Not (ds.Tables("INCOME_REALFET_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_REALFET_DETAILDataTable(ds.Tables("INCOME_REALFET_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NBINTEREST")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBINTERESTDataTable(ds.Tables("INCOME_NBINTEREST")))
            End If
            If (Not (ds.Tables("INCOME_NBINTEREST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBINTEREST_DETAILDataTable(ds.Tables("INCOME_NBINTEREST_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NBROYALTY")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBROYALTYDataTable(ds.Tables("INCOME_NBROYALTY")))
            End If
            If (Not (ds.Tables("INCOME_NBROYALTY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBROYALTY_DETAILDataTable(ds.Tables("INCOME_NBROYALTY_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_INCOMEDataTable(ds.Tables("OTHER_INCOME")))
            End If
            If (Not (ds.Tables("OTHER_INCOME_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_INCOME_DETAILDataTable(ds.Tables("OTHER_INCOME_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALFA")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALFADataTable(ds.Tables("INCOME_NTDISPOSALFA")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALFA_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALFA_DETAILDataTable(ds.Tables("INCOME_NTDISPOSALFA_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALINVEST")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALINVESTDataTable(ds.Tables("INCOME_NTDISPOSALINVEST")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALINVEST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALINVEST_DETAILDataTable(ds.Tables("INCOME_NTDISPOSALINVEST_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTFOREIGNINCREM")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTFOREIGNINCREMDataTable(ds.Tables("INCOME_NTFOREIGNINCREM")))
            End If
            If (Not (ds.Tables("INCOME_NTFOREIGNINCREM_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTFOREIGNINCREM_DETAILDataTable(ds.Tables("INCOME_NTFOREIGNINCREM_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTREALFE")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTREALFEDataTable(ds.Tables("INCOME_NTREALFE")))
            End If
            If (Not (ds.Tables("INCOME_NTREALFE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTREALFE_DETAILDataTable(ds.Tables("INCOME_NTREALFE_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFENT")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFENTDataTable(ds.Tables("INCOME_NTUREALFENT")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFENT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFENT_DETAILDataTable(ds.Tables("INCOME_NTUREALFENT_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFET")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFETDataTable(ds.Tables("INCOME_NTUREALFET")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFET_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFET_DETAILDataTable(ds.Tables("INCOME_NTUREALFET_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_INTEREST")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_INTERESTDataTable(ds.Tables("EXPENSES_INTEREST")))
            End If
            If (Not (ds.Tables("EXPENSES_INTEREST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_INTEREST_DETAILDataTable(ds.Tables("EXPENSES_INTEREST_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_LEGAL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_LEGALDataTable(ds.Tables("EXPENSES_LEGAL")))
            End If
            If (Not (ds.Tables("EXPENSES_LEGAL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_LEGAL_DETAILDataTable(ds.Tables("EXPENSES_LEGAL_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_TECH_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TECH_FEEDataTable(ds.Tables("EXPENSES_TECH_FEE")))
            End If
            If (Not (ds.Tables("EXPENSES_TECH_FEE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TECH_FEE_DETAILDataTable(ds.Tables("EXPENSES_TECH_FEE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_CONTRACT")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_CONTRACTDataTable(ds.Tables("EXPENSES_CONTRACT")))
            End If
            If (Not (ds.Tables("EXPENSES_CONTRACT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_CONTRACT_DETAILDataTable(ds.Tables("EXPENSES_CONTRACT_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_DIRECTORS_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DIRECTORS_FEEDataTable(ds.Tables("EXPENSES_DIRECTORS_FEE")))
            End If
            If (Not (ds.Tables("EXPENSES_DIRECTORS_FEE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DIRECTORS_FEE_DETAILDataTable(ds.Tables("EXPENSES_DIRECTORS_FEE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_SALARY")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_SALARYDataTable(ds.Tables("EXPENSES_SALARY")))
            End If
            If (Not (ds.Tables("EXPENSES_SALARY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_SALARY_DETAILDataTable(ds.Tables("EXPENSES_SALARY_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_EMPLSTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_EMPLSTOCK_DETAILDataTable(ds.Tables("EXPENSES_EMPLSTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_EMPL_STOCK")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_EMPL_STOCKDataTable(ds.Tables("EXPENSES_EMPL_STOCK")))
            End If
            If (Not (ds.Tables("EXPENSES_ROYALTY")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ROYALTYDataTable(ds.Tables("EXPENSES_ROYALTY")))
            End If
            If (Not (ds.Tables("EXPENSES_ROYALTY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ROYALTY_DETAILDataTable(ds.Tables("EXPENSES_ROYALTY_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_RENTAL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RENTALDataTable(ds.Tables("EXPENSES_RENTAL")))
            End If
            If (Not (ds.Tables("EXPENSES_RENTAL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RENTAL_DETAILDataTable(ds.Tables("EXPENSES_RENTAL_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_REPAIR")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_REPAIRDataTable(ds.Tables("EXPENSES_REPAIR")))
            End If
            If (Not (ds.Tables("EXPENSES_REPAIR_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_REPAIR_DETAILDataTable(ds.Tables("EXPENSES_REPAIR_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_RESEARCH")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RESEARCHDataTable(ds.Tables("EXPENSES_RESEARCH")))
            End If
            If (Not (ds.Tables("EXPENSES_RESEARCH_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RESEARCH_DETAILDataTable(ds.Tables("EXPENSES_RESEARCH_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_PROMOTE")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_PROMOTEDataTable(ds.Tables("EXPENSES_PROMOTE")))
            End If
            If (Not (ds.Tables("EXPENSES_PROMOTE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_PROMOTE_DETAILDataTable(ds.Tables("EXPENSES_PROMOTE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_TRAVEL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TRAVELDataTable(ds.Tables("EXPENSES_TRAVEL")))
            End If
            If (Not (ds.Tables("EXPENSES_TRAVEL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TRAVEL_DETAILDataTable(ds.Tables("EXPENSES_TRAVEL_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_JKDM")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_JKDMDataTable(ds.Tables("EXPENSES_JKDM")))
            End If
            If (Not (ds.Tables("EXPENSES_JKDM_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_JKDM_DETAILDataTable(ds.Tables("EXPENSES_JKDM_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXDEPRECIATION")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXDEPRECIATIONDataTable(ds.Tables("OTHER_EXDEPRECIATION")))
            End If
            If (Not (ds.Tables("OTHER_EXDEPRECIATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXDEPRECIATION_DETAILDataTable(ds.Tables("OTHER_EXDEPRECIATION_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXAPPRDONATION")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXAPPRDONATIONDataTable(ds.Tables("OTHER_EXAPPRDONATION")))
            End If
            If (Not (ds.Tables("OTHER_EXAPPRDONATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXAPPRDONATION_DETAILDataTable(ds.Tables("OTHER_EXAPPRDONATION_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXNAPPRDONATION")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXNAPPRDONATIONDataTable(ds.Tables("OTHER_EXNAPPRDONATION")))
            End If
            If (Not (ds.Tables("OTHER_EXNAPPRDONATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXNAPPRDONATION_DETAILDataTable(ds.Tables("OTHER_EXNAPPRDONATION_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXZAKAT")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXZAKATDataTable(ds.Tables("OTHER_EXZAKAT")))
            End If
            If (Not (ds.Tables("OTHER_EXZAKAT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXZAKAT_DETAILDataTable(ds.Tables("OTHER_EXZAKAT_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXLOSSDISPOSALFA")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLOSSDISPOSALFADataTable(ds.Tables("OTHER_EXLOSSDISPOSALFA")))
            End If
            If (Not (ds.Tables("OTHER_EXLOSSDISPOSALFA_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLOSSDISPOSALFA_DETAILDataTable(ds.Tables("OTHER_EXLOSSDISPOSALFA_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINNSTAFF")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINNSTAFFDataTable(ds.Tables("OTHER_ENTERTAINNSTAFF")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINNSTAFF_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINNSTAFF_DETAILDataTable(ds.Tables("OTHER_ENTERTAINNSTAFF_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINSTAFF")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINSTAFFDataTable(ds.Tables("OTHER_ENTERTAINSTAFF")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINSTAFF_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINSTAFF_DETAILDataTable(ds.Tables("OTHER_ENTERTAINSTAFF_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXPENALTY")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENALTYDataTable(ds.Tables("OTHER_EXPENALTY")))
            End If
            If (Not (ds.Tables("OTHER_EXPENALTY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENALTY_DETAILDataTable(ds.Tables("OTHER_EXPENALTY_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXPROVISIONACC")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPROVISIONACCDataTable(ds.Tables("OTHER_EXPROVISIONACC")))
            End If
            If (Not (ds.Tables("OTHER_EXPROVISIONACC_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPROVISIONACC_DETAILDataTable(ds.Tables("OTHER_EXPROVISIONACC_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXLEAVEPASSAGE")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLEAVEPASSAGEDataTable(ds.Tables("OTHER_EXLEAVEPASSAGE")))
            End If
            If (Not (ds.Tables("OTHER_EXLEAVEPASSAGE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLEAVEPASSAGE_DETAILDataTable(ds.Tables("OTHER_EXLEAVEPASSAGE_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXFAWRITTENOFF")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXFAWRITTENOFFDataTable(ds.Tables("OTHER_EXFAWRITTENOFF")))
            End If
            If (Not (ds.Tables("OTHER_EXFAWRITTENOFF_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXFAWRITTENOFF_DETAILDataTable(ds.Tables("OTHER_EXFAWRITTENOFF_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXURLOSSFOREIGN")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXURLOSSFOREIGNDataTable(ds.Tables("OTHER_EXURLOSSFOREIGN")))
            End If
            If (Not (ds.Tables("OTHER_EXURLOSSFOREIGN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXURLOSSFOREIGN_DETAILDataTable(ds.Tables("OTHER_EXURLOSSFOREIGN_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGNT")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGNTDataTable(ds.Tables("OTHER_EXRLOSSFOREIGNT")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGNT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGNT_DETAILDataTable(ds.Tables("OTHER_EXRLOSSFOREIGNT_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGN")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGNDataTable(ds.Tables("OTHER_EXRLOSSFOREIGN")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGN_DETAILDataTable(ds.Tables("OTHER_EXRLOSSFOREIGN_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXINITIALSUB")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXINITIALSUBDataTable(ds.Tables("OTHER_EXINITIALSUB")))
            End If
            If (Not (ds.Tables("OTHER_EXINITIALSUB_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXINITIALSUB_DETAILDataTable(ds.Tables("OTHER_EXINITIALSUB_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXCAPITALEXP")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXCAPITALEXPDataTable(ds.Tables("OTHER_EXCAPITALEXP")))
            End If
            If (Not (ds.Tables("OTHER_EXCAPITALEXP_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXCAPITALEXP_DETAILDataTable(ds.Tables("OTHER_EXCAPITALEXP_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXPENSES")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENSESDataTable(ds.Tables("OTHER_EXPENSES")))
            End If
            If (Not (ds.Tables("OTHER_EXPENSES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENSES_DETAILDataTable(ds.Tables("OTHER_EXPENSES_DETAIL")))
            End If
            If (Not (ds.Tables("RENTAL_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New RENTAL_INCOMEDataTable(ds.Tables("RENTAL_INCOME")))
            End If
            If (Not (ds.Tables("NonAllowable_Expenses")) Is Nothing) Then
                MyBase.Tables.Add(New NonAllowable_ExpensesDataTable(ds.Tables("NonAllowable_Expenses")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_SALES_DETAIL() As PLFST_SALES_DETAILDataTable
        Get
            Return Me.tablePLFST_SALES_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_SALES() As PLFST_SALESDataTable
        Get
            Return Me.tablePLFST_SALES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BUSINESS_SOURCE() As BUSINESS_SOURCEDataTable
        Get
            Return Me.tableBUSINESS_SOURCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_OPENSTOCK() As PLFST_OPENSTOCKDataTable
        Get
            Return Me.tablePLFST_OPENSTOCK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_OPENSTOCK_DETAIL() As PLFST_OPENSTOCK_DETAILDataTable
        Get
            Return Me.tablePLFST_OPENSTOCK_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_PURCHASE() As PLFST_PURCHASEDataTable
        Get
            Return Me.tablePLFST_PURCHASE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_PURCHASE_DETAIL() As PLFST_PURCHASE_DETAILDataTable
        Get
            Return Me.tablePLFST_PURCHASE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_DEPRECIATION() As EXPENSES_DEPRECIATIONDataTable
        Get
            Return Me.tableEXPENSES_DEPRECIATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_DEPRECIATION_DETAIL() As EXPENSES_DEPRECIATION_DETAILDataTable
        Get
            Return Me.tableEXPENSES_DEPRECIATION_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_ALLOW() As EXPENSES_ALLOWDataTable
        Get
            Return Me.tableEXPENSES_ALLOW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_ALLOW_DETAIL() As EXPENSES_ALLOW_DETAILDataTable
        Get
            Return Me.tableEXPENSES_ALLOW_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_NONALLOW() As EXPENSES_NONALLOWDataTable
        Get
            Return Me.tableEXPENSES_NONALLOW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_NONALLOW_DETAIL() As EXPENSES_NONALLOW_DETAILDataTable
        Get
            Return Me.tableEXPENSES_NONALLOW_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_CLOSESTOCK() As PLFST_CLOSESTOCKDataTable
        Get
            Return Me.tablePLFST_CLOSESTOCK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLFST_CLOSESTOCK_DETAIL() As PLFST_CLOSESTOCK_DETAILDataTable
        Get
            Return Me.tablePLFST_CLOSESTOCK_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NONSOURCE_BUSINESSINCOME() As NONSOURCE_BUSINESSINCOMEDataTable
        Get
            Return Me.tableNONSOURCE_BUSINESSINCOME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NONSOURCE_BUSINESSINCOME_DETAIL() As NONSOURCE_BUSINESSINCOME_DETAILDataTable
        Get
            Return Me.tableNONSOURCE_BUSINESSINCOME_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_REALFET() As INCOME_REALFETDataTable
        Get
            Return Me.tableINCOME_REALFET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_REALFET_DETAIL() As INCOME_REALFET_DETAILDataTable
        Get
            Return Me.tableINCOME_REALFET_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NBINTEREST() As INCOME_NBINTERESTDataTable
        Get
            Return Me.tableINCOME_NBINTEREST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NBINTEREST_DETAIL() As INCOME_NBINTEREST_DETAILDataTable
        Get
            Return Me.tableINCOME_NBINTEREST_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NBROYALTY() As INCOME_NBROYALTYDataTable
        Get
            Return Me.tableINCOME_NBROYALTY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NBROYALTY_DETAIL() As INCOME_NBROYALTY_DETAILDataTable
        Get
            Return Me.tableINCOME_NBROYALTY_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_INCOME() As OTHER_INCOMEDataTable
        Get
            Return Me.tableOTHER_INCOME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_INCOME_DETAIL() As OTHER_INCOME_DETAILDataTable
        Get
            Return Me.tableOTHER_INCOME_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTDISPOSALFA() As INCOME_NTDISPOSALFADataTable
        Get
            Return Me.tableINCOME_NTDISPOSALFA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTDISPOSALFA_DETAIL() As INCOME_NTDISPOSALFA_DETAILDataTable
        Get
            Return Me.tableINCOME_NTDISPOSALFA_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTDISPOSALINVEST() As INCOME_NTDISPOSALINVESTDataTable
        Get
            Return Me.tableINCOME_NTDISPOSALINVEST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTDISPOSALINVEST_DETAIL() As INCOME_NTDISPOSALINVEST_DETAILDataTable
        Get
            Return Me.tableINCOME_NTDISPOSALINVEST_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTFOREIGNINCREM() As INCOME_NTFOREIGNINCREMDataTable
        Get
            Return Me.tableINCOME_NTFOREIGNINCREM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTFOREIGNINCREM_DETAIL() As INCOME_NTFOREIGNINCREM_DETAILDataTable
        Get
            Return Me.tableINCOME_NTFOREIGNINCREM_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTREALFE() As INCOME_NTREALFEDataTable
        Get
            Return Me.tableINCOME_NTREALFE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTREALFE_DETAIL() As INCOME_NTREALFE_DETAILDataTable
        Get
            Return Me.tableINCOME_NTREALFE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTUREALFENT() As INCOME_NTUREALFENTDataTable
        Get
            Return Me.tableINCOME_NTUREALFENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTUREALFENT_DETAIL() As INCOME_NTUREALFENT_DETAILDataTable
        Get
            Return Me.tableINCOME_NTUREALFENT_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTUREALFET() As INCOME_NTUREALFETDataTable
        Get
            Return Me.tableINCOME_NTUREALFET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_NTUREALFET_DETAIL() As INCOME_NTUREALFET_DETAILDataTable
        Get
            Return Me.tableINCOME_NTUREALFET_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_INTEREST() As EXPENSES_INTERESTDataTable
        Get
            Return Me.tableEXPENSES_INTEREST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_INTEREST_DETAIL() As EXPENSES_INTEREST_DETAILDataTable
        Get
            Return Me.tableEXPENSES_INTEREST_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_LEGAL() As EXPENSES_LEGALDataTable
        Get
            Return Me.tableEXPENSES_LEGAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_LEGAL_DETAIL() As EXPENSES_LEGAL_DETAILDataTable
        Get
            Return Me.tableEXPENSES_LEGAL_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_TECH_FEE() As EXPENSES_TECH_FEEDataTable
        Get
            Return Me.tableEXPENSES_TECH_FEE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_TECH_FEE_DETAIL() As EXPENSES_TECH_FEE_DETAILDataTable
        Get
            Return Me.tableEXPENSES_TECH_FEE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_CONTRACT() As EXPENSES_CONTRACTDataTable
        Get
            Return Me.tableEXPENSES_CONTRACT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_CONTRACT_DETAIL() As EXPENSES_CONTRACT_DETAILDataTable
        Get
            Return Me.tableEXPENSES_CONTRACT_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_DIRECTORS_FEE() As EXPENSES_DIRECTORS_FEEDataTable
        Get
            Return Me.tableEXPENSES_DIRECTORS_FEE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_DIRECTORS_FEE_DETAIL() As EXPENSES_DIRECTORS_FEE_DETAILDataTable
        Get
            Return Me.tableEXPENSES_DIRECTORS_FEE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_SALARY() As EXPENSES_SALARYDataTable
        Get
            Return Me.tableEXPENSES_SALARY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_SALARY_DETAIL() As EXPENSES_SALARY_DETAILDataTable
        Get
            Return Me.tableEXPENSES_SALARY_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_EMPLSTOCK_DETAIL() As EXPENSES_EMPLSTOCK_DETAILDataTable
        Get
            Return Me.tableEXPENSES_EMPLSTOCK_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_EMPL_STOCK() As EXPENSES_EMPL_STOCKDataTable
        Get
            Return Me.tableEXPENSES_EMPL_STOCK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_ROYALTY() As EXPENSES_ROYALTYDataTable
        Get
            Return Me.tableEXPENSES_ROYALTY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_ROYALTY_DETAIL() As EXPENSES_ROYALTY_DETAILDataTable
        Get
            Return Me.tableEXPENSES_ROYALTY_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_RENTAL() As EXPENSES_RENTALDataTable
        Get
            Return Me.tableEXPENSES_RENTAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_RENTAL_DETAIL() As EXPENSES_RENTAL_DETAILDataTable
        Get
            Return Me.tableEXPENSES_RENTAL_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_REPAIR() As EXPENSES_REPAIRDataTable
        Get
            Return Me.tableEXPENSES_REPAIR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_REPAIR_DETAIL() As EXPENSES_REPAIR_DETAILDataTable
        Get
            Return Me.tableEXPENSES_REPAIR_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_RESEARCH() As EXPENSES_RESEARCHDataTable
        Get
            Return Me.tableEXPENSES_RESEARCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_RESEARCH_DETAIL() As EXPENSES_RESEARCH_DETAILDataTable
        Get
            Return Me.tableEXPENSES_RESEARCH_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_PROMOTE() As EXPENSES_PROMOTEDataTable
        Get
            Return Me.tableEXPENSES_PROMOTE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_PROMOTE_DETAIL() As EXPENSES_PROMOTE_DETAILDataTable
        Get
            Return Me.tableEXPENSES_PROMOTE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_TRAVEL() As EXPENSES_TRAVELDataTable
        Get
            Return Me.tableEXPENSES_TRAVEL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_TRAVEL_DETAIL() As EXPENSES_TRAVEL_DETAILDataTable
        Get
            Return Me.tableEXPENSES_TRAVEL_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_JKDM() As EXPENSES_JKDMDataTable
        Get
            Return Me.tableEXPENSES_JKDM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EXPENSES_JKDM_DETAIL() As EXPENSES_JKDM_DETAILDataTable
        Get
            Return Me.tableEXPENSES_JKDM_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXDEPRECIATION() As OTHER_EXDEPRECIATIONDataTable
        Get
            Return Me.tableOTHER_EXDEPRECIATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXDEPRECIATION_DETAIL() As OTHER_EXDEPRECIATION_DETAILDataTable
        Get
            Return Me.tableOTHER_EXDEPRECIATION_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXAPPRDONATION() As OTHER_EXAPPRDONATIONDataTable
        Get
            Return Me.tableOTHER_EXAPPRDONATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXAPPRDONATION_DETAIL() As OTHER_EXAPPRDONATION_DETAILDataTable
        Get
            Return Me.tableOTHER_EXAPPRDONATION_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXNAPPRDONATION() As OTHER_EXNAPPRDONATIONDataTable
        Get
            Return Me.tableOTHER_EXNAPPRDONATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXNAPPRDONATION_DETAIL() As OTHER_EXNAPPRDONATION_DETAILDataTable
        Get
            Return Me.tableOTHER_EXNAPPRDONATION_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXZAKAT() As OTHER_EXZAKATDataTable
        Get
            Return Me.tableOTHER_EXZAKAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXZAKAT_DETAIL() As OTHER_EXZAKAT_DETAILDataTable
        Get
            Return Me.tableOTHER_EXZAKAT_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXLOSSDISPOSALFA() As OTHER_EXLOSSDISPOSALFADataTable
        Get
            Return Me.tableOTHER_EXLOSSDISPOSALFA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXLOSSDISPOSALFA_DETAIL() As OTHER_EXLOSSDISPOSALFA_DETAILDataTable
        Get
            Return Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_ENTERTAINNSTAFF() As OTHER_ENTERTAINNSTAFFDataTable
        Get
            Return Me.tableOTHER_ENTERTAINNSTAFF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_ENTERTAINNSTAFF_DETAIL() As OTHER_ENTERTAINNSTAFF_DETAILDataTable
        Get
            Return Me.tableOTHER_ENTERTAINNSTAFF_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_ENTERTAINSTAFF() As OTHER_ENTERTAINSTAFFDataTable
        Get
            Return Me.tableOTHER_ENTERTAINSTAFF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_ENTERTAINSTAFF_DETAIL() As OTHER_ENTERTAINSTAFF_DETAILDataTable
        Get
            Return Me.tableOTHER_ENTERTAINSTAFF_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXPENALTY() As OTHER_EXPENALTYDataTable
        Get
            Return Me.tableOTHER_EXPENALTY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXPENALTY_DETAIL() As OTHER_EXPENALTY_DETAILDataTable
        Get
            Return Me.tableOTHER_EXPENALTY_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXPROVISIONACC() As OTHER_EXPROVISIONACCDataTable
        Get
            Return Me.tableOTHER_EXPROVISIONACC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXPROVISIONACC_DETAIL() As OTHER_EXPROVISIONACC_DETAILDataTable
        Get
            Return Me.tableOTHER_EXPROVISIONACC_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXLEAVEPASSAGE() As OTHER_EXLEAVEPASSAGEDataTable
        Get
            Return Me.tableOTHER_EXLEAVEPASSAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXLEAVEPASSAGE_DETAIL() As OTHER_EXLEAVEPASSAGE_DETAILDataTable
        Get
            Return Me.tableOTHER_EXLEAVEPASSAGE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXFAWRITTENOFF() As OTHER_EXFAWRITTENOFFDataTable
        Get
            Return Me.tableOTHER_EXFAWRITTENOFF
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXFAWRITTENOFF_DETAIL() As OTHER_EXFAWRITTENOFF_DETAILDataTable
        Get
            Return Me.tableOTHER_EXFAWRITTENOFF_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXURLOSSFOREIGN() As OTHER_EXURLOSSFOREIGNDataTable
        Get
            Return Me.tableOTHER_EXURLOSSFOREIGN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXURLOSSFOREIGN_DETAIL() As OTHER_EXURLOSSFOREIGN_DETAILDataTable
        Get
            Return Me.tableOTHER_EXURLOSSFOREIGN_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXRLOSSFOREIGNT() As OTHER_EXRLOSSFOREIGNTDataTable
        Get
            Return Me.tableOTHER_EXRLOSSFOREIGNT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXRLOSSFOREIGNT_DETAIL() As OTHER_EXRLOSSFOREIGNT_DETAILDataTable
        Get
            Return Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXRLOSSFOREIGN() As OTHER_EXRLOSSFOREIGNDataTable
        Get
            Return Me.tableOTHER_EXRLOSSFOREIGN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXRLOSSFOREIGN_DETAIL() As OTHER_EXRLOSSFOREIGN_DETAILDataTable
        Get
            Return Me.tableOTHER_EXRLOSSFOREIGN_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXINITIALSUB() As OTHER_EXINITIALSUBDataTable
        Get
            Return Me.tableOTHER_EXINITIALSUB
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXINITIALSUB_DETAIL() As OTHER_EXINITIALSUB_DETAILDataTable
        Get
            Return Me.tableOTHER_EXINITIALSUB_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXCAPITALEXP() As OTHER_EXCAPITALEXPDataTable
        Get
            Return Me.tableOTHER_EXCAPITALEXP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXCAPITALEXP_DETAIL() As OTHER_EXCAPITALEXP_DETAILDataTable
        Get
            Return Me.tableOTHER_EXCAPITALEXP_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXPENSES() As OTHER_EXPENSESDataTable
        Get
            Return Me.tableOTHER_EXPENSES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OTHER_EXPENSES_DETAIL() As OTHER_EXPENSES_DETAILDataTable
        Get
            Return Me.tableOTHER_EXPENSES_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RENTAL_INCOME() As RENTAL_INCOMEDataTable
        Get
            Return Me.tableRENTAL_INCOME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NonAllowable_Expenses() As NonAllowable_ExpensesDataTable
        Get
            Return Me.tableNonAllowable_Expenses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPNL = CType(MyBase.Clone,dsPNL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("PLFST_SALES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_SALES_DETAILDataTable(ds.Tables("PLFST_SALES_DETAIL")))
            End If
            If (Not (ds.Tables("PLFST_SALES")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_SALESDataTable(ds.Tables("PLFST_SALES")))
            End If
            If (Not (ds.Tables("BUSINESS_SOURCE")) Is Nothing) Then
                MyBase.Tables.Add(New BUSINESS_SOURCEDataTable(ds.Tables("BUSINESS_SOURCE")))
            End If
            If (Not (ds.Tables("PLFST_OPENSTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_OPENSTOCKDataTable(ds.Tables("PLFST_OPENSTOCK")))
            End If
            If (Not (ds.Tables("PLFST_OPENSTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_OPENSTOCK_DETAILDataTable(ds.Tables("PLFST_OPENSTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("PLFST_PURCHASE")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_PURCHASEDataTable(ds.Tables("PLFST_PURCHASE")))
            End If
            If (Not (ds.Tables("PLFST_PURCHASE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_PURCHASE_DETAILDataTable(ds.Tables("PLFST_PURCHASE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_DEPRECIATION")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DEPRECIATIONDataTable(ds.Tables("EXPENSES_DEPRECIATION")))
            End If
            If (Not (ds.Tables("EXPENSES_DEPRECIATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DEPRECIATION_DETAILDataTable(ds.Tables("EXPENSES_DEPRECIATION_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_ALLOW")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ALLOWDataTable(ds.Tables("EXPENSES_ALLOW")))
            End If
            If (Not (ds.Tables("EXPENSES_ALLOW_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ALLOW_DETAILDataTable(ds.Tables("EXPENSES_ALLOW_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_NONALLOW")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_NONALLOWDataTable(ds.Tables("EXPENSES_NONALLOW")))
            End If
            If (Not (ds.Tables("EXPENSES_NONALLOW_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_NONALLOW_DETAILDataTable(ds.Tables("EXPENSES_NONALLOW_DETAIL")))
            End If
            If (Not (ds.Tables("PLFST_CLOSESTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_CLOSESTOCKDataTable(ds.Tables("PLFST_CLOSESTOCK")))
            End If
            If (Not (ds.Tables("PLFST_CLOSESTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PLFST_CLOSESTOCK_DETAILDataTable(ds.Tables("PLFST_CLOSESTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("NONSOURCE_BUSINESSINCOME")) Is Nothing) Then
                MyBase.Tables.Add(New NONSOURCE_BUSINESSINCOMEDataTable(ds.Tables("NONSOURCE_BUSINESSINCOME")))
            End If
            If (Not (ds.Tables("NONSOURCE_BUSINESSINCOME_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New NONSOURCE_BUSINESSINCOME_DETAILDataTable(ds.Tables("NONSOURCE_BUSINESSINCOME_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_REALFET")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_REALFETDataTable(ds.Tables("INCOME_REALFET")))
            End If
            If (Not (ds.Tables("INCOME_REALFET_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_REALFET_DETAILDataTable(ds.Tables("INCOME_REALFET_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NBINTEREST")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBINTERESTDataTable(ds.Tables("INCOME_NBINTEREST")))
            End If
            If (Not (ds.Tables("INCOME_NBINTEREST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBINTEREST_DETAILDataTable(ds.Tables("INCOME_NBINTEREST_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NBROYALTY")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBROYALTYDataTable(ds.Tables("INCOME_NBROYALTY")))
            End If
            If (Not (ds.Tables("INCOME_NBROYALTY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NBROYALTY_DETAILDataTable(ds.Tables("INCOME_NBROYALTY_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_INCOMEDataTable(ds.Tables("OTHER_INCOME")))
            End If
            If (Not (ds.Tables("OTHER_INCOME_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_INCOME_DETAILDataTable(ds.Tables("OTHER_INCOME_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALFA")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALFADataTable(ds.Tables("INCOME_NTDISPOSALFA")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALFA_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALFA_DETAILDataTable(ds.Tables("INCOME_NTDISPOSALFA_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALINVEST")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALINVESTDataTable(ds.Tables("INCOME_NTDISPOSALINVEST")))
            End If
            If (Not (ds.Tables("INCOME_NTDISPOSALINVEST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTDISPOSALINVEST_DETAILDataTable(ds.Tables("INCOME_NTDISPOSALINVEST_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTFOREIGNINCREM")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTFOREIGNINCREMDataTable(ds.Tables("INCOME_NTFOREIGNINCREM")))
            End If
            If (Not (ds.Tables("INCOME_NTFOREIGNINCREM_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTFOREIGNINCREM_DETAILDataTable(ds.Tables("INCOME_NTFOREIGNINCREM_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTREALFE")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTREALFEDataTable(ds.Tables("INCOME_NTREALFE")))
            End If
            If (Not (ds.Tables("INCOME_NTREALFE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTREALFE_DETAILDataTable(ds.Tables("INCOME_NTREALFE_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFENT")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFENTDataTable(ds.Tables("INCOME_NTUREALFENT")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFENT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFENT_DETAILDataTable(ds.Tables("INCOME_NTUREALFENT_DETAIL")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFET")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFETDataTable(ds.Tables("INCOME_NTUREALFET")))
            End If
            If (Not (ds.Tables("INCOME_NTUREALFET_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_NTUREALFET_DETAILDataTable(ds.Tables("INCOME_NTUREALFET_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_INTEREST")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_INTERESTDataTable(ds.Tables("EXPENSES_INTEREST")))
            End If
            If (Not (ds.Tables("EXPENSES_INTEREST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_INTEREST_DETAILDataTable(ds.Tables("EXPENSES_INTEREST_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_LEGAL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_LEGALDataTable(ds.Tables("EXPENSES_LEGAL")))
            End If
            If (Not (ds.Tables("EXPENSES_LEGAL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_LEGAL_DETAILDataTable(ds.Tables("EXPENSES_LEGAL_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_TECH_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TECH_FEEDataTable(ds.Tables("EXPENSES_TECH_FEE")))
            End If
            If (Not (ds.Tables("EXPENSES_TECH_FEE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TECH_FEE_DETAILDataTable(ds.Tables("EXPENSES_TECH_FEE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_CONTRACT")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_CONTRACTDataTable(ds.Tables("EXPENSES_CONTRACT")))
            End If
            If (Not (ds.Tables("EXPENSES_CONTRACT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_CONTRACT_DETAILDataTable(ds.Tables("EXPENSES_CONTRACT_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_DIRECTORS_FEE")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DIRECTORS_FEEDataTable(ds.Tables("EXPENSES_DIRECTORS_FEE")))
            End If
            If (Not (ds.Tables("EXPENSES_DIRECTORS_FEE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_DIRECTORS_FEE_DETAILDataTable(ds.Tables("EXPENSES_DIRECTORS_FEE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_SALARY")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_SALARYDataTable(ds.Tables("EXPENSES_SALARY")))
            End If
            If (Not (ds.Tables("EXPENSES_SALARY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_SALARY_DETAILDataTable(ds.Tables("EXPENSES_SALARY_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_EMPLSTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_EMPLSTOCK_DETAILDataTable(ds.Tables("EXPENSES_EMPLSTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_EMPL_STOCK")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_EMPL_STOCKDataTable(ds.Tables("EXPENSES_EMPL_STOCK")))
            End If
            If (Not (ds.Tables("EXPENSES_ROYALTY")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ROYALTYDataTable(ds.Tables("EXPENSES_ROYALTY")))
            End If
            If (Not (ds.Tables("EXPENSES_ROYALTY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_ROYALTY_DETAILDataTable(ds.Tables("EXPENSES_ROYALTY_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_RENTAL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RENTALDataTable(ds.Tables("EXPENSES_RENTAL")))
            End If
            If (Not (ds.Tables("EXPENSES_RENTAL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RENTAL_DETAILDataTable(ds.Tables("EXPENSES_RENTAL_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_REPAIR")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_REPAIRDataTable(ds.Tables("EXPENSES_REPAIR")))
            End If
            If (Not (ds.Tables("EXPENSES_REPAIR_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_REPAIR_DETAILDataTable(ds.Tables("EXPENSES_REPAIR_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_RESEARCH")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RESEARCHDataTable(ds.Tables("EXPENSES_RESEARCH")))
            End If
            If (Not (ds.Tables("EXPENSES_RESEARCH_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_RESEARCH_DETAILDataTable(ds.Tables("EXPENSES_RESEARCH_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_PROMOTE")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_PROMOTEDataTable(ds.Tables("EXPENSES_PROMOTE")))
            End If
            If (Not (ds.Tables("EXPENSES_PROMOTE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_PROMOTE_DETAILDataTable(ds.Tables("EXPENSES_PROMOTE_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_TRAVEL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TRAVELDataTable(ds.Tables("EXPENSES_TRAVEL")))
            End If
            If (Not (ds.Tables("EXPENSES_TRAVEL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_TRAVEL_DETAILDataTable(ds.Tables("EXPENSES_TRAVEL_DETAIL")))
            End If
            If (Not (ds.Tables("EXPENSES_JKDM")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_JKDMDataTable(ds.Tables("EXPENSES_JKDM")))
            End If
            If (Not (ds.Tables("EXPENSES_JKDM_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New EXPENSES_JKDM_DETAILDataTable(ds.Tables("EXPENSES_JKDM_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXDEPRECIATION")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXDEPRECIATIONDataTable(ds.Tables("OTHER_EXDEPRECIATION")))
            End If
            If (Not (ds.Tables("OTHER_EXDEPRECIATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXDEPRECIATION_DETAILDataTable(ds.Tables("OTHER_EXDEPRECIATION_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXAPPRDONATION")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXAPPRDONATIONDataTable(ds.Tables("OTHER_EXAPPRDONATION")))
            End If
            If (Not (ds.Tables("OTHER_EXAPPRDONATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXAPPRDONATION_DETAILDataTable(ds.Tables("OTHER_EXAPPRDONATION_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXNAPPRDONATION")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXNAPPRDONATIONDataTable(ds.Tables("OTHER_EXNAPPRDONATION")))
            End If
            If (Not (ds.Tables("OTHER_EXNAPPRDONATION_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXNAPPRDONATION_DETAILDataTable(ds.Tables("OTHER_EXNAPPRDONATION_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXZAKAT")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXZAKATDataTable(ds.Tables("OTHER_EXZAKAT")))
            End If
            If (Not (ds.Tables("OTHER_EXZAKAT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXZAKAT_DETAILDataTable(ds.Tables("OTHER_EXZAKAT_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXLOSSDISPOSALFA")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLOSSDISPOSALFADataTable(ds.Tables("OTHER_EXLOSSDISPOSALFA")))
            End If
            If (Not (ds.Tables("OTHER_EXLOSSDISPOSALFA_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLOSSDISPOSALFA_DETAILDataTable(ds.Tables("OTHER_EXLOSSDISPOSALFA_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINNSTAFF")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINNSTAFFDataTable(ds.Tables("OTHER_ENTERTAINNSTAFF")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINNSTAFF_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINNSTAFF_DETAILDataTable(ds.Tables("OTHER_ENTERTAINNSTAFF_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINSTAFF")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINSTAFFDataTable(ds.Tables("OTHER_ENTERTAINSTAFF")))
            End If
            If (Not (ds.Tables("OTHER_ENTERTAINSTAFF_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_ENTERTAINSTAFF_DETAILDataTable(ds.Tables("OTHER_ENTERTAINSTAFF_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXPENALTY")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENALTYDataTable(ds.Tables("OTHER_EXPENALTY")))
            End If
            If (Not (ds.Tables("OTHER_EXPENALTY_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENALTY_DETAILDataTable(ds.Tables("OTHER_EXPENALTY_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXPROVISIONACC")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPROVISIONACCDataTable(ds.Tables("OTHER_EXPROVISIONACC")))
            End If
            If (Not (ds.Tables("OTHER_EXPROVISIONACC_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPROVISIONACC_DETAILDataTable(ds.Tables("OTHER_EXPROVISIONACC_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXLEAVEPASSAGE")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLEAVEPASSAGEDataTable(ds.Tables("OTHER_EXLEAVEPASSAGE")))
            End If
            If (Not (ds.Tables("OTHER_EXLEAVEPASSAGE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXLEAVEPASSAGE_DETAILDataTable(ds.Tables("OTHER_EXLEAVEPASSAGE_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXFAWRITTENOFF")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXFAWRITTENOFFDataTable(ds.Tables("OTHER_EXFAWRITTENOFF")))
            End If
            If (Not (ds.Tables("OTHER_EXFAWRITTENOFF_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXFAWRITTENOFF_DETAILDataTable(ds.Tables("OTHER_EXFAWRITTENOFF_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXURLOSSFOREIGN")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXURLOSSFOREIGNDataTable(ds.Tables("OTHER_EXURLOSSFOREIGN")))
            End If
            If (Not (ds.Tables("OTHER_EXURLOSSFOREIGN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXURLOSSFOREIGN_DETAILDataTable(ds.Tables("OTHER_EXURLOSSFOREIGN_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGNT")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGNTDataTable(ds.Tables("OTHER_EXRLOSSFOREIGNT")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGNT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGNT_DETAILDataTable(ds.Tables("OTHER_EXRLOSSFOREIGNT_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGN")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGNDataTable(ds.Tables("OTHER_EXRLOSSFOREIGN")))
            End If
            If (Not (ds.Tables("OTHER_EXRLOSSFOREIGN_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXRLOSSFOREIGN_DETAILDataTable(ds.Tables("OTHER_EXRLOSSFOREIGN_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXINITIALSUB")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXINITIALSUBDataTable(ds.Tables("OTHER_EXINITIALSUB")))
            End If
            If (Not (ds.Tables("OTHER_EXINITIALSUB_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXINITIALSUB_DETAILDataTable(ds.Tables("OTHER_EXINITIALSUB_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXCAPITALEXP")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXCAPITALEXPDataTable(ds.Tables("OTHER_EXCAPITALEXP")))
            End If
            If (Not (ds.Tables("OTHER_EXCAPITALEXP_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXCAPITALEXP_DETAILDataTable(ds.Tables("OTHER_EXCAPITALEXP_DETAIL")))
            End If
            If (Not (ds.Tables("OTHER_EXPENSES")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENSESDataTable(ds.Tables("OTHER_EXPENSES")))
            End If
            If (Not (ds.Tables("OTHER_EXPENSES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New OTHER_EXPENSES_DETAILDataTable(ds.Tables("OTHER_EXPENSES_DETAIL")))
            End If
            If (Not (ds.Tables("RENTAL_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New RENTAL_INCOMEDataTable(ds.Tables("RENTAL_INCOME")))
            End If
            If (Not (ds.Tables("NonAllowable_Expenses")) Is Nothing) Then
                MyBase.Tables.Add(New NonAllowable_ExpensesDataTable(ds.Tables("NonAllowable_Expenses")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePLFST_SALES_DETAIL = CType(MyBase.Tables("PLFST_SALES_DETAIL"),PLFST_SALES_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_SALES_DETAIL) Is Nothing) Then
                Me.tablePLFST_SALES_DETAIL.InitVars
            End If
        End If
        Me.tablePLFST_SALES = CType(MyBase.Tables("PLFST_SALES"),PLFST_SALESDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_SALES) Is Nothing) Then
                Me.tablePLFST_SALES.InitVars
            End If
        End If
        Me.tableBUSINESS_SOURCE = CType(MyBase.Tables("BUSINESS_SOURCE"),BUSINESS_SOURCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBUSINESS_SOURCE) Is Nothing) Then
                Me.tableBUSINESS_SOURCE.InitVars
            End If
        End If
        Me.tablePLFST_OPENSTOCK = CType(MyBase.Tables("PLFST_OPENSTOCK"),PLFST_OPENSTOCKDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_OPENSTOCK) Is Nothing) Then
                Me.tablePLFST_OPENSTOCK.InitVars
            End If
        End If
        Me.tablePLFST_OPENSTOCK_DETAIL = CType(MyBase.Tables("PLFST_OPENSTOCK_DETAIL"),PLFST_OPENSTOCK_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_OPENSTOCK_DETAIL) Is Nothing) Then
                Me.tablePLFST_OPENSTOCK_DETAIL.InitVars
            End If
        End If
        Me.tablePLFST_PURCHASE = CType(MyBase.Tables("PLFST_PURCHASE"),PLFST_PURCHASEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_PURCHASE) Is Nothing) Then
                Me.tablePLFST_PURCHASE.InitVars
            End If
        End If
        Me.tablePLFST_PURCHASE_DETAIL = CType(MyBase.Tables("PLFST_PURCHASE_DETAIL"),PLFST_PURCHASE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_PURCHASE_DETAIL) Is Nothing) Then
                Me.tablePLFST_PURCHASE_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_DEPRECIATION = CType(MyBase.Tables("EXPENSES_DEPRECIATION"),EXPENSES_DEPRECIATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_DEPRECIATION) Is Nothing) Then
                Me.tableEXPENSES_DEPRECIATION.InitVars
            End If
        End If
        Me.tableEXPENSES_DEPRECIATION_DETAIL = CType(MyBase.Tables("EXPENSES_DEPRECIATION_DETAIL"),EXPENSES_DEPRECIATION_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_DEPRECIATION_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_DEPRECIATION_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_ALLOW = CType(MyBase.Tables("EXPENSES_ALLOW"),EXPENSES_ALLOWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_ALLOW) Is Nothing) Then
                Me.tableEXPENSES_ALLOW.InitVars
            End If
        End If
        Me.tableEXPENSES_ALLOW_DETAIL = CType(MyBase.Tables("EXPENSES_ALLOW_DETAIL"),EXPENSES_ALLOW_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_ALLOW_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_ALLOW_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_NONALLOW = CType(MyBase.Tables("EXPENSES_NONALLOW"),EXPENSES_NONALLOWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_NONALLOW) Is Nothing) Then
                Me.tableEXPENSES_NONALLOW.InitVars
            End If
        End If
        Me.tableEXPENSES_NONALLOW_DETAIL = CType(MyBase.Tables("EXPENSES_NONALLOW_DETAIL"),EXPENSES_NONALLOW_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_NONALLOW_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_NONALLOW_DETAIL.InitVars
            End If
        End If
        Me.tablePLFST_CLOSESTOCK = CType(MyBase.Tables("PLFST_CLOSESTOCK"),PLFST_CLOSESTOCKDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_CLOSESTOCK) Is Nothing) Then
                Me.tablePLFST_CLOSESTOCK.InitVars
            End If
        End If
        Me.tablePLFST_CLOSESTOCK_DETAIL = CType(MyBase.Tables("PLFST_CLOSESTOCK_DETAIL"),PLFST_CLOSESTOCK_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLFST_CLOSESTOCK_DETAIL) Is Nothing) Then
                Me.tablePLFST_CLOSESTOCK_DETAIL.InitVars
            End If
        End If
        Me.tableNONSOURCE_BUSINESSINCOME = CType(MyBase.Tables("NONSOURCE_BUSINESSINCOME"),NONSOURCE_BUSINESSINCOMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNONSOURCE_BUSINESSINCOME) Is Nothing) Then
                Me.tableNONSOURCE_BUSINESSINCOME.InitVars
            End If
        End If
        Me.tableNONSOURCE_BUSINESSINCOME_DETAIL = CType(MyBase.Tables("NONSOURCE_BUSINESSINCOME_DETAIL"),NONSOURCE_BUSINESSINCOME_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNONSOURCE_BUSINESSINCOME_DETAIL) Is Nothing) Then
                Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_REALFET = CType(MyBase.Tables("INCOME_REALFET"),INCOME_REALFETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_REALFET) Is Nothing) Then
                Me.tableINCOME_REALFET.InitVars
            End If
        End If
        Me.tableINCOME_REALFET_DETAIL = CType(MyBase.Tables("INCOME_REALFET_DETAIL"),INCOME_REALFET_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_REALFET_DETAIL) Is Nothing) Then
                Me.tableINCOME_REALFET_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NBINTEREST = CType(MyBase.Tables("INCOME_NBINTEREST"),INCOME_NBINTERESTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NBINTEREST) Is Nothing) Then
                Me.tableINCOME_NBINTEREST.InitVars
            End If
        End If
        Me.tableINCOME_NBINTEREST_DETAIL = CType(MyBase.Tables("INCOME_NBINTEREST_DETAIL"),INCOME_NBINTEREST_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NBINTEREST_DETAIL) Is Nothing) Then
                Me.tableINCOME_NBINTEREST_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NBROYALTY = CType(MyBase.Tables("INCOME_NBROYALTY"),INCOME_NBROYALTYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NBROYALTY) Is Nothing) Then
                Me.tableINCOME_NBROYALTY.InitVars
            End If
        End If
        Me.tableINCOME_NBROYALTY_DETAIL = CType(MyBase.Tables("INCOME_NBROYALTY_DETAIL"),INCOME_NBROYALTY_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NBROYALTY_DETAIL) Is Nothing) Then
                Me.tableINCOME_NBROYALTY_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_INCOME = CType(MyBase.Tables("OTHER_INCOME"),OTHER_INCOMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_INCOME) Is Nothing) Then
                Me.tableOTHER_INCOME.InitVars
            End If
        End If
        Me.tableOTHER_INCOME_DETAIL = CType(MyBase.Tables("OTHER_INCOME_DETAIL"),OTHER_INCOME_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_INCOME_DETAIL) Is Nothing) Then
                Me.tableOTHER_INCOME_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NTDISPOSALFA = CType(MyBase.Tables("INCOME_NTDISPOSALFA"),INCOME_NTDISPOSALFADataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTDISPOSALFA) Is Nothing) Then
                Me.tableINCOME_NTDISPOSALFA.InitVars
            End If
        End If
        Me.tableINCOME_NTDISPOSALFA_DETAIL = CType(MyBase.Tables("INCOME_NTDISPOSALFA_DETAIL"),INCOME_NTDISPOSALFA_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTDISPOSALFA_DETAIL) Is Nothing) Then
                Me.tableINCOME_NTDISPOSALFA_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NTDISPOSALINVEST = CType(MyBase.Tables("INCOME_NTDISPOSALINVEST"),INCOME_NTDISPOSALINVESTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTDISPOSALINVEST) Is Nothing) Then
                Me.tableINCOME_NTDISPOSALINVEST.InitVars
            End If
        End If
        Me.tableINCOME_NTDISPOSALINVEST_DETAIL = CType(MyBase.Tables("INCOME_NTDISPOSALINVEST_DETAIL"),INCOME_NTDISPOSALINVEST_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTDISPOSALINVEST_DETAIL) Is Nothing) Then
                Me.tableINCOME_NTDISPOSALINVEST_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NTFOREIGNINCREM = CType(MyBase.Tables("INCOME_NTFOREIGNINCREM"),INCOME_NTFOREIGNINCREMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTFOREIGNINCREM) Is Nothing) Then
                Me.tableINCOME_NTFOREIGNINCREM.InitVars
            End If
        End If
        Me.tableINCOME_NTFOREIGNINCREM_DETAIL = CType(MyBase.Tables("INCOME_NTFOREIGNINCREM_DETAIL"),INCOME_NTFOREIGNINCREM_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTFOREIGNINCREM_DETAIL) Is Nothing) Then
                Me.tableINCOME_NTFOREIGNINCREM_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NTREALFE = CType(MyBase.Tables("INCOME_NTREALFE"),INCOME_NTREALFEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTREALFE) Is Nothing) Then
                Me.tableINCOME_NTREALFE.InitVars
            End If
        End If
        Me.tableINCOME_NTREALFE_DETAIL = CType(MyBase.Tables("INCOME_NTREALFE_DETAIL"),INCOME_NTREALFE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTREALFE_DETAIL) Is Nothing) Then
                Me.tableINCOME_NTREALFE_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NTUREALFENT = CType(MyBase.Tables("INCOME_NTUREALFENT"),INCOME_NTUREALFENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTUREALFENT) Is Nothing) Then
                Me.tableINCOME_NTUREALFENT.InitVars
            End If
        End If
        Me.tableINCOME_NTUREALFENT_DETAIL = CType(MyBase.Tables("INCOME_NTUREALFENT_DETAIL"),INCOME_NTUREALFENT_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTUREALFENT_DETAIL) Is Nothing) Then
                Me.tableINCOME_NTUREALFENT_DETAIL.InitVars
            End If
        End If
        Me.tableINCOME_NTUREALFET = CType(MyBase.Tables("INCOME_NTUREALFET"),INCOME_NTUREALFETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTUREALFET) Is Nothing) Then
                Me.tableINCOME_NTUREALFET.InitVars
            End If
        End If
        Me.tableINCOME_NTUREALFET_DETAIL = CType(MyBase.Tables("INCOME_NTUREALFET_DETAIL"),INCOME_NTUREALFET_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_NTUREALFET_DETAIL) Is Nothing) Then
                Me.tableINCOME_NTUREALFET_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_INTEREST = CType(MyBase.Tables("EXPENSES_INTEREST"),EXPENSES_INTERESTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_INTEREST) Is Nothing) Then
                Me.tableEXPENSES_INTEREST.InitVars
            End If
        End If
        Me.tableEXPENSES_INTEREST_DETAIL = CType(MyBase.Tables("EXPENSES_INTEREST_DETAIL"),EXPENSES_INTEREST_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_INTEREST_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_INTEREST_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_LEGAL = CType(MyBase.Tables("EXPENSES_LEGAL"),EXPENSES_LEGALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_LEGAL) Is Nothing) Then
                Me.tableEXPENSES_LEGAL.InitVars
            End If
        End If
        Me.tableEXPENSES_LEGAL_DETAIL = CType(MyBase.Tables("EXPENSES_LEGAL_DETAIL"),EXPENSES_LEGAL_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_LEGAL_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_LEGAL_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_TECH_FEE = CType(MyBase.Tables("EXPENSES_TECH_FEE"),EXPENSES_TECH_FEEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_TECH_FEE) Is Nothing) Then
                Me.tableEXPENSES_TECH_FEE.InitVars
            End If
        End If
        Me.tableEXPENSES_TECH_FEE_DETAIL = CType(MyBase.Tables("EXPENSES_TECH_FEE_DETAIL"),EXPENSES_TECH_FEE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_TECH_FEE_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_TECH_FEE_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_CONTRACT = CType(MyBase.Tables("EXPENSES_CONTRACT"),EXPENSES_CONTRACTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_CONTRACT) Is Nothing) Then
                Me.tableEXPENSES_CONTRACT.InitVars
            End If
        End If
        Me.tableEXPENSES_CONTRACT_DETAIL = CType(MyBase.Tables("EXPENSES_CONTRACT_DETAIL"),EXPENSES_CONTRACT_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_CONTRACT_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_CONTRACT_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_DIRECTORS_FEE = CType(MyBase.Tables("EXPENSES_DIRECTORS_FEE"),EXPENSES_DIRECTORS_FEEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_DIRECTORS_FEE) Is Nothing) Then
                Me.tableEXPENSES_DIRECTORS_FEE.InitVars
            End If
        End If
        Me.tableEXPENSES_DIRECTORS_FEE_DETAIL = CType(MyBase.Tables("EXPENSES_DIRECTORS_FEE_DETAIL"),EXPENSES_DIRECTORS_FEE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_DIRECTORS_FEE_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_SALARY = CType(MyBase.Tables("EXPENSES_SALARY"),EXPENSES_SALARYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_SALARY) Is Nothing) Then
                Me.tableEXPENSES_SALARY.InitVars
            End If
        End If
        Me.tableEXPENSES_SALARY_DETAIL = CType(MyBase.Tables("EXPENSES_SALARY_DETAIL"),EXPENSES_SALARY_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_SALARY_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_SALARY_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_EMPLSTOCK_DETAIL = CType(MyBase.Tables("EXPENSES_EMPLSTOCK_DETAIL"),EXPENSES_EMPLSTOCK_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_EMPLSTOCK_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_EMPLSTOCK_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_EMPL_STOCK = CType(MyBase.Tables("EXPENSES_EMPL_STOCK"),EXPENSES_EMPL_STOCKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_EMPL_STOCK) Is Nothing) Then
                Me.tableEXPENSES_EMPL_STOCK.InitVars
            End If
        End If
        Me.tableEXPENSES_ROYALTY = CType(MyBase.Tables("EXPENSES_ROYALTY"),EXPENSES_ROYALTYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_ROYALTY) Is Nothing) Then
                Me.tableEXPENSES_ROYALTY.InitVars
            End If
        End If
        Me.tableEXPENSES_ROYALTY_DETAIL = CType(MyBase.Tables("EXPENSES_ROYALTY_DETAIL"),EXPENSES_ROYALTY_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_ROYALTY_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_ROYALTY_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_RENTAL = CType(MyBase.Tables("EXPENSES_RENTAL"),EXPENSES_RENTALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_RENTAL) Is Nothing) Then
                Me.tableEXPENSES_RENTAL.InitVars
            End If
        End If
        Me.tableEXPENSES_RENTAL_DETAIL = CType(MyBase.Tables("EXPENSES_RENTAL_DETAIL"),EXPENSES_RENTAL_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_RENTAL_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_RENTAL_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_REPAIR = CType(MyBase.Tables("EXPENSES_REPAIR"),EXPENSES_REPAIRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_REPAIR) Is Nothing) Then
                Me.tableEXPENSES_REPAIR.InitVars
            End If
        End If
        Me.tableEXPENSES_REPAIR_DETAIL = CType(MyBase.Tables("EXPENSES_REPAIR_DETAIL"),EXPENSES_REPAIR_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_REPAIR_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_REPAIR_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_RESEARCH = CType(MyBase.Tables("EXPENSES_RESEARCH"),EXPENSES_RESEARCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_RESEARCH) Is Nothing) Then
                Me.tableEXPENSES_RESEARCH.InitVars
            End If
        End If
        Me.tableEXPENSES_RESEARCH_DETAIL = CType(MyBase.Tables("EXPENSES_RESEARCH_DETAIL"),EXPENSES_RESEARCH_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_RESEARCH_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_RESEARCH_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_PROMOTE = CType(MyBase.Tables("EXPENSES_PROMOTE"),EXPENSES_PROMOTEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_PROMOTE) Is Nothing) Then
                Me.tableEXPENSES_PROMOTE.InitVars
            End If
        End If
        Me.tableEXPENSES_PROMOTE_DETAIL = CType(MyBase.Tables("EXPENSES_PROMOTE_DETAIL"),EXPENSES_PROMOTE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_PROMOTE_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_PROMOTE_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_TRAVEL = CType(MyBase.Tables("EXPENSES_TRAVEL"),EXPENSES_TRAVELDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_TRAVEL) Is Nothing) Then
                Me.tableEXPENSES_TRAVEL.InitVars
            End If
        End If
        Me.tableEXPENSES_TRAVEL_DETAIL = CType(MyBase.Tables("EXPENSES_TRAVEL_DETAIL"),EXPENSES_TRAVEL_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_TRAVEL_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_TRAVEL_DETAIL.InitVars
            End If
        End If
        Me.tableEXPENSES_JKDM = CType(MyBase.Tables("EXPENSES_JKDM"),EXPENSES_JKDMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_JKDM) Is Nothing) Then
                Me.tableEXPENSES_JKDM.InitVars
            End If
        End If
        Me.tableEXPENSES_JKDM_DETAIL = CType(MyBase.Tables("EXPENSES_JKDM_DETAIL"),EXPENSES_JKDM_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEXPENSES_JKDM_DETAIL) Is Nothing) Then
                Me.tableEXPENSES_JKDM_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXDEPRECIATION = CType(MyBase.Tables("OTHER_EXDEPRECIATION"),OTHER_EXDEPRECIATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXDEPRECIATION) Is Nothing) Then
                Me.tableOTHER_EXDEPRECIATION.InitVars
            End If
        End If
        Me.tableOTHER_EXDEPRECIATION_DETAIL = CType(MyBase.Tables("OTHER_EXDEPRECIATION_DETAIL"),OTHER_EXDEPRECIATION_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXDEPRECIATION_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXDEPRECIATION_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXAPPRDONATION = CType(MyBase.Tables("OTHER_EXAPPRDONATION"),OTHER_EXAPPRDONATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXAPPRDONATION) Is Nothing) Then
                Me.tableOTHER_EXAPPRDONATION.InitVars
            End If
        End If
        Me.tableOTHER_EXAPPRDONATION_DETAIL = CType(MyBase.Tables("OTHER_EXAPPRDONATION_DETAIL"),OTHER_EXAPPRDONATION_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXAPPRDONATION_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXAPPRDONATION_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXNAPPRDONATION = CType(MyBase.Tables("OTHER_EXNAPPRDONATION"),OTHER_EXNAPPRDONATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXNAPPRDONATION) Is Nothing) Then
                Me.tableOTHER_EXNAPPRDONATION.InitVars
            End If
        End If
        Me.tableOTHER_EXNAPPRDONATION_DETAIL = CType(MyBase.Tables("OTHER_EXNAPPRDONATION_DETAIL"),OTHER_EXNAPPRDONATION_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXNAPPRDONATION_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXNAPPRDONATION_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXZAKAT = CType(MyBase.Tables("OTHER_EXZAKAT"),OTHER_EXZAKATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXZAKAT) Is Nothing) Then
                Me.tableOTHER_EXZAKAT.InitVars
            End If
        End If
        Me.tableOTHER_EXZAKAT_DETAIL = CType(MyBase.Tables("OTHER_EXZAKAT_DETAIL"),OTHER_EXZAKAT_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXZAKAT_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXZAKAT_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXLOSSDISPOSALFA = CType(MyBase.Tables("OTHER_EXLOSSDISPOSALFA"),OTHER_EXLOSSDISPOSALFADataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXLOSSDISPOSALFA) Is Nothing) Then
                Me.tableOTHER_EXLOSSDISPOSALFA.InitVars
            End If
        End If
        Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL = CType(MyBase.Tables("OTHER_EXLOSSDISPOSALFA_DETAIL"),OTHER_EXLOSSDISPOSALFA_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_ENTERTAINNSTAFF = CType(MyBase.Tables("OTHER_ENTERTAINNSTAFF"),OTHER_ENTERTAINNSTAFFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_ENTERTAINNSTAFF) Is Nothing) Then
                Me.tableOTHER_ENTERTAINNSTAFF.InitVars
            End If
        End If
        Me.tableOTHER_ENTERTAINNSTAFF_DETAIL = CType(MyBase.Tables("OTHER_ENTERTAINNSTAFF_DETAIL"),OTHER_ENTERTAINNSTAFF_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_ENTERTAINNSTAFF_DETAIL) Is Nothing) Then
                Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_ENTERTAINSTAFF = CType(MyBase.Tables("OTHER_ENTERTAINSTAFF"),OTHER_ENTERTAINSTAFFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_ENTERTAINSTAFF) Is Nothing) Then
                Me.tableOTHER_ENTERTAINSTAFF.InitVars
            End If
        End If
        Me.tableOTHER_ENTERTAINSTAFF_DETAIL = CType(MyBase.Tables("OTHER_ENTERTAINSTAFF_DETAIL"),OTHER_ENTERTAINSTAFF_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_ENTERTAINSTAFF_DETAIL) Is Nothing) Then
                Me.tableOTHER_ENTERTAINSTAFF_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXPENALTY = CType(MyBase.Tables("OTHER_EXPENALTY"),OTHER_EXPENALTYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXPENALTY) Is Nothing) Then
                Me.tableOTHER_EXPENALTY.InitVars
            End If
        End If
        Me.tableOTHER_EXPENALTY_DETAIL = CType(MyBase.Tables("OTHER_EXPENALTY_DETAIL"),OTHER_EXPENALTY_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXPENALTY_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXPENALTY_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXPROVISIONACC = CType(MyBase.Tables("OTHER_EXPROVISIONACC"),OTHER_EXPROVISIONACCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXPROVISIONACC) Is Nothing) Then
                Me.tableOTHER_EXPROVISIONACC.InitVars
            End If
        End If
        Me.tableOTHER_EXPROVISIONACC_DETAIL = CType(MyBase.Tables("OTHER_EXPROVISIONACC_DETAIL"),OTHER_EXPROVISIONACC_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXPROVISIONACC_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXPROVISIONACC_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXLEAVEPASSAGE = CType(MyBase.Tables("OTHER_EXLEAVEPASSAGE"),OTHER_EXLEAVEPASSAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXLEAVEPASSAGE) Is Nothing) Then
                Me.tableOTHER_EXLEAVEPASSAGE.InitVars
            End If
        End If
        Me.tableOTHER_EXLEAVEPASSAGE_DETAIL = CType(MyBase.Tables("OTHER_EXLEAVEPASSAGE_DETAIL"),OTHER_EXLEAVEPASSAGE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXLEAVEPASSAGE_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXFAWRITTENOFF = CType(MyBase.Tables("OTHER_EXFAWRITTENOFF"),OTHER_EXFAWRITTENOFFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXFAWRITTENOFF) Is Nothing) Then
                Me.tableOTHER_EXFAWRITTENOFF.InitVars
            End If
        End If
        Me.tableOTHER_EXFAWRITTENOFF_DETAIL = CType(MyBase.Tables("OTHER_EXFAWRITTENOFF_DETAIL"),OTHER_EXFAWRITTENOFF_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXFAWRITTENOFF_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXFAWRITTENOFF_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXURLOSSFOREIGN = CType(MyBase.Tables("OTHER_EXURLOSSFOREIGN"),OTHER_EXURLOSSFOREIGNDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXURLOSSFOREIGN) Is Nothing) Then
                Me.tableOTHER_EXURLOSSFOREIGN.InitVars
            End If
        End If
        Me.tableOTHER_EXURLOSSFOREIGN_DETAIL = CType(MyBase.Tables("OTHER_EXURLOSSFOREIGN_DETAIL"),OTHER_EXURLOSSFOREIGN_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXURLOSSFOREIGN_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXRLOSSFOREIGNT = CType(MyBase.Tables("OTHER_EXRLOSSFOREIGNT"),OTHER_EXRLOSSFOREIGNTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXRLOSSFOREIGNT) Is Nothing) Then
                Me.tableOTHER_EXRLOSSFOREIGNT.InitVars
            End If
        End If
        Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL = CType(MyBase.Tables("OTHER_EXRLOSSFOREIGNT_DETAIL"),OTHER_EXRLOSSFOREIGNT_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXRLOSSFOREIGN = CType(MyBase.Tables("OTHER_EXRLOSSFOREIGN"),OTHER_EXRLOSSFOREIGNDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXRLOSSFOREIGN) Is Nothing) Then
                Me.tableOTHER_EXRLOSSFOREIGN.InitVars
            End If
        End If
        Me.tableOTHER_EXRLOSSFOREIGN_DETAIL = CType(MyBase.Tables("OTHER_EXRLOSSFOREIGN_DETAIL"),OTHER_EXRLOSSFOREIGN_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXRLOSSFOREIGN_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXINITIALSUB = CType(MyBase.Tables("OTHER_EXINITIALSUB"),OTHER_EXINITIALSUBDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXINITIALSUB) Is Nothing) Then
                Me.tableOTHER_EXINITIALSUB.InitVars
            End If
        End If
        Me.tableOTHER_EXINITIALSUB_DETAIL = CType(MyBase.Tables("OTHER_EXINITIALSUB_DETAIL"),OTHER_EXINITIALSUB_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXINITIALSUB_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXINITIALSUB_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXCAPITALEXP = CType(MyBase.Tables("OTHER_EXCAPITALEXP"),OTHER_EXCAPITALEXPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXCAPITALEXP) Is Nothing) Then
                Me.tableOTHER_EXCAPITALEXP.InitVars
            End If
        End If
        Me.tableOTHER_EXCAPITALEXP_DETAIL = CType(MyBase.Tables("OTHER_EXCAPITALEXP_DETAIL"),OTHER_EXCAPITALEXP_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXCAPITALEXP_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXCAPITALEXP_DETAIL.InitVars
            End If
        End If
        Me.tableOTHER_EXPENSES = CType(MyBase.Tables("OTHER_EXPENSES"),OTHER_EXPENSESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXPENSES) Is Nothing) Then
                Me.tableOTHER_EXPENSES.InitVars
            End If
        End If
        Me.tableOTHER_EXPENSES_DETAIL = CType(MyBase.Tables("OTHER_EXPENSES_DETAIL"),OTHER_EXPENSES_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOTHER_EXPENSES_DETAIL) Is Nothing) Then
                Me.tableOTHER_EXPENSES_DETAIL.InitVars
            End If
        End If
        Me.tableRENTAL_INCOME = CType(MyBase.Tables("RENTAL_INCOME"),RENTAL_INCOMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRENTAL_INCOME) Is Nothing) Then
                Me.tableRENTAL_INCOME.InitVars
            End If
        End If
        Me.tableNonAllowable_Expenses = CType(MyBase.Tables("NonAllowable_Expenses"),NonAllowable_ExpensesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNonAllowable_Expenses) Is Nothing) Then
                Me.tableNonAllowable_Expenses.InitVars
            End If
        End If
        Me.relationPLFST_SALES_DETAIL_PLFST_SALES = Me.Relations("PLFST_SALES_DETAIL_PLFST_SALES")
        Me.relationFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL = Me.Relations("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL")
        Me.relationFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL = Me.Relations("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL")
        Me.relationFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL = Me.Relations("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL")
        Me.relationFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL = Me.Relations("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL")
        Me.relationFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL = Me.Relations("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL")
        Me.relationFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL = Me.Relations("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL")
        Me.relationFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL = Me.Relations("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL")
        Me.relationFK_INCOME_REALFET_INCOME_REALFET_DETAIL = Me.Relations("FK_INCOME_REALFET_INCOME_REALFET_DETAIL")
        Me.relationFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL = Me.Relations("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL")
        Me.relationFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL = Me.Relations("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL")
        Me.relationFK_OTHER_INCOME_OTHER_INCOME_DETAIL = Me.Relations("FK_OTHER_INCOME_OTHER_INCOME_DETAIL")
        Me.relationFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL = Me.Relations("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL")
        Me.relationFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL = Me.Relations("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL")
        Me.relationFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL = Me.Relations("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL")
        Me.relationFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL = Me.Relations("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL")
        Me.relationFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL = Me.Relations("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL")
        Me.relationFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL = Me.Relations("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL")
        Me.relationFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL = Me.Relations("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL")
        Me.relationFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL = Me.Relations("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL")
        Me.relationFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL = Me.Relations("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL")
        Me.relationFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL = Me.Relations("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL")
        Me.relationFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL = Me.Relations("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL")
        Me.relationFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL = Me.Relations("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL")
        Me.relationFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL = Me.Relations("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL")
        Me.relationFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL = Me.Relations("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL")
        Me.relationFK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL = Me.Relations("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL")
        Me.relationFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL = Me.Relations("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL")
        Me.relationFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL = Me.Relations("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL")
        Me.relationFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL = Me.Relations("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL")
        Me.relationFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL = Me.Relations("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL")
        Me.relationFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL = Me.Relations("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL")
        Me.relationFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL = Me.Relations("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL")
        Me.relationFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL = Me.Relations("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL")
        Me.relationFK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL = Me.Relations("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL")
        Me.relationFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL = Me.Relations("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL")
        Me.relationFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL = Me.Relations("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL")
        Me.relationFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL = Me.Relations("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL")
        Me.relationFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL = Me.Relations("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL")
        Me.relationFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL = Me.Relations("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL")
        Me.relationFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL = Me.Relations("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL")
        Me.relationFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL = Me.Relations("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL")
        Me.relationFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL = Me.Relations("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL")
        Me.relationFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL = Me.Relations("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL")
        Me.relationFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL = Me.Relations("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL")
        Me.relationFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL = Me.Relations("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL")
        Me.relationFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB = Me.Relations("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB")
        Me.relationFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL = Me.Relations("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL")
        Me.relationFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL = Me.Relations("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPNL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPNL.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePLFST_SALES_DETAIL = New PLFST_SALES_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePLFST_SALES_DETAIL)
        Me.tablePLFST_SALES = New PLFST_SALESDataTable()
        MyBase.Tables.Add(Me.tablePLFST_SALES)
        Me.tableBUSINESS_SOURCE = New BUSINESS_SOURCEDataTable()
        MyBase.Tables.Add(Me.tableBUSINESS_SOURCE)
        Me.tablePLFST_OPENSTOCK = New PLFST_OPENSTOCKDataTable()
        MyBase.Tables.Add(Me.tablePLFST_OPENSTOCK)
        Me.tablePLFST_OPENSTOCK_DETAIL = New PLFST_OPENSTOCK_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePLFST_OPENSTOCK_DETAIL)
        Me.tablePLFST_PURCHASE = New PLFST_PURCHASEDataTable()
        MyBase.Tables.Add(Me.tablePLFST_PURCHASE)
        Me.tablePLFST_PURCHASE_DETAIL = New PLFST_PURCHASE_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePLFST_PURCHASE_DETAIL)
        Me.tableEXPENSES_DEPRECIATION = New EXPENSES_DEPRECIATIONDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_DEPRECIATION)
        Me.tableEXPENSES_DEPRECIATION_DETAIL = New EXPENSES_DEPRECIATION_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_DEPRECIATION_DETAIL)
        Me.tableEXPENSES_ALLOW = New EXPENSES_ALLOWDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_ALLOW)
        Me.tableEXPENSES_ALLOW_DETAIL = New EXPENSES_ALLOW_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_ALLOW_DETAIL)
        Me.tableEXPENSES_NONALLOW = New EXPENSES_NONALLOWDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_NONALLOW)
        Me.tableEXPENSES_NONALLOW_DETAIL = New EXPENSES_NONALLOW_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_NONALLOW_DETAIL)
        Me.tablePLFST_CLOSESTOCK = New PLFST_CLOSESTOCKDataTable()
        MyBase.Tables.Add(Me.tablePLFST_CLOSESTOCK)
        Me.tablePLFST_CLOSESTOCK_DETAIL = New PLFST_CLOSESTOCK_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePLFST_CLOSESTOCK_DETAIL)
        Me.tableNONSOURCE_BUSINESSINCOME = New NONSOURCE_BUSINESSINCOMEDataTable()
        MyBase.Tables.Add(Me.tableNONSOURCE_BUSINESSINCOME)
        Me.tableNONSOURCE_BUSINESSINCOME_DETAIL = New NONSOURCE_BUSINESSINCOME_DETAILDataTable()
        MyBase.Tables.Add(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL)
        Me.tableINCOME_REALFET = New INCOME_REALFETDataTable()
        MyBase.Tables.Add(Me.tableINCOME_REALFET)
        Me.tableINCOME_REALFET_DETAIL = New INCOME_REALFET_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_REALFET_DETAIL)
        Me.tableINCOME_NBINTEREST = New INCOME_NBINTERESTDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NBINTEREST)
        Me.tableINCOME_NBINTEREST_DETAIL = New INCOME_NBINTEREST_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NBINTEREST_DETAIL)
        Me.tableINCOME_NBROYALTY = New INCOME_NBROYALTYDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NBROYALTY)
        Me.tableINCOME_NBROYALTY_DETAIL = New INCOME_NBROYALTY_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NBROYALTY_DETAIL)
        Me.tableOTHER_INCOME = New OTHER_INCOMEDataTable()
        MyBase.Tables.Add(Me.tableOTHER_INCOME)
        Me.tableOTHER_INCOME_DETAIL = New OTHER_INCOME_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_INCOME_DETAIL)
        Me.tableINCOME_NTDISPOSALFA = New INCOME_NTDISPOSALFADataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTDISPOSALFA)
        Me.tableINCOME_NTDISPOSALFA_DETAIL = New INCOME_NTDISPOSALFA_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTDISPOSALFA_DETAIL)
        Me.tableINCOME_NTDISPOSALINVEST = New INCOME_NTDISPOSALINVESTDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTDISPOSALINVEST)
        Me.tableINCOME_NTDISPOSALINVEST_DETAIL = New INCOME_NTDISPOSALINVEST_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTDISPOSALINVEST_DETAIL)
        Me.tableINCOME_NTFOREIGNINCREM = New INCOME_NTFOREIGNINCREMDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTFOREIGNINCREM)
        Me.tableINCOME_NTFOREIGNINCREM_DETAIL = New INCOME_NTFOREIGNINCREM_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTFOREIGNINCREM_DETAIL)
        Me.tableINCOME_NTREALFE = New INCOME_NTREALFEDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTREALFE)
        Me.tableINCOME_NTREALFE_DETAIL = New INCOME_NTREALFE_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTREALFE_DETAIL)
        Me.tableINCOME_NTUREALFENT = New INCOME_NTUREALFENTDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTUREALFENT)
        Me.tableINCOME_NTUREALFENT_DETAIL = New INCOME_NTUREALFENT_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTUREALFENT_DETAIL)
        Me.tableINCOME_NTUREALFET = New INCOME_NTUREALFETDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTUREALFET)
        Me.tableINCOME_NTUREALFET_DETAIL = New INCOME_NTUREALFET_DETAILDataTable()
        MyBase.Tables.Add(Me.tableINCOME_NTUREALFET_DETAIL)
        Me.tableEXPENSES_INTEREST = New EXPENSES_INTERESTDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_INTEREST)
        Me.tableEXPENSES_INTEREST_DETAIL = New EXPENSES_INTEREST_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_INTEREST_DETAIL)
        Me.tableEXPENSES_LEGAL = New EXPENSES_LEGALDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_LEGAL)
        Me.tableEXPENSES_LEGAL_DETAIL = New EXPENSES_LEGAL_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_LEGAL_DETAIL)
        Me.tableEXPENSES_TECH_FEE = New EXPENSES_TECH_FEEDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_TECH_FEE)
        Me.tableEXPENSES_TECH_FEE_DETAIL = New EXPENSES_TECH_FEE_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_TECH_FEE_DETAIL)
        Me.tableEXPENSES_CONTRACT = New EXPENSES_CONTRACTDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_CONTRACT)
        Me.tableEXPENSES_CONTRACT_DETAIL = New EXPENSES_CONTRACT_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_CONTRACT_DETAIL)
        Me.tableEXPENSES_DIRECTORS_FEE = New EXPENSES_DIRECTORS_FEEDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_DIRECTORS_FEE)
        Me.tableEXPENSES_DIRECTORS_FEE_DETAIL = New EXPENSES_DIRECTORS_FEE_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL)
        Me.tableEXPENSES_SALARY = New EXPENSES_SALARYDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_SALARY)
        Me.tableEXPENSES_SALARY_DETAIL = New EXPENSES_SALARY_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_SALARY_DETAIL)
        Me.tableEXPENSES_EMPLSTOCK_DETAIL = New EXPENSES_EMPLSTOCK_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_EMPLSTOCK_DETAIL)
        Me.tableEXPENSES_EMPL_STOCK = New EXPENSES_EMPL_STOCKDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_EMPL_STOCK)
        Me.tableEXPENSES_ROYALTY = New EXPENSES_ROYALTYDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_ROYALTY)
        Me.tableEXPENSES_ROYALTY_DETAIL = New EXPENSES_ROYALTY_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_ROYALTY_DETAIL)
        Me.tableEXPENSES_RENTAL = New EXPENSES_RENTALDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_RENTAL)
        Me.tableEXPENSES_RENTAL_DETAIL = New EXPENSES_RENTAL_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_RENTAL_DETAIL)
        Me.tableEXPENSES_REPAIR = New EXPENSES_REPAIRDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_REPAIR)
        Me.tableEXPENSES_REPAIR_DETAIL = New EXPENSES_REPAIR_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_REPAIR_DETAIL)
        Me.tableEXPENSES_RESEARCH = New EXPENSES_RESEARCHDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_RESEARCH)
        Me.tableEXPENSES_RESEARCH_DETAIL = New EXPENSES_RESEARCH_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_RESEARCH_DETAIL)
        Me.tableEXPENSES_PROMOTE = New EXPENSES_PROMOTEDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_PROMOTE)
        Me.tableEXPENSES_PROMOTE_DETAIL = New EXPENSES_PROMOTE_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_PROMOTE_DETAIL)
        Me.tableEXPENSES_TRAVEL = New EXPENSES_TRAVELDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_TRAVEL)
        Me.tableEXPENSES_TRAVEL_DETAIL = New EXPENSES_TRAVEL_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_TRAVEL_DETAIL)
        Me.tableEXPENSES_JKDM = New EXPENSES_JKDMDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_JKDM)
        Me.tableEXPENSES_JKDM_DETAIL = New EXPENSES_JKDM_DETAILDataTable()
        MyBase.Tables.Add(Me.tableEXPENSES_JKDM_DETAIL)
        Me.tableOTHER_EXDEPRECIATION = New OTHER_EXDEPRECIATIONDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXDEPRECIATION)
        Me.tableOTHER_EXDEPRECIATION_DETAIL = New OTHER_EXDEPRECIATION_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXDEPRECIATION_DETAIL)
        Me.tableOTHER_EXAPPRDONATION = New OTHER_EXAPPRDONATIONDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXAPPRDONATION)
        Me.tableOTHER_EXAPPRDONATION_DETAIL = New OTHER_EXAPPRDONATION_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXAPPRDONATION_DETAIL)
        Me.tableOTHER_EXNAPPRDONATION = New OTHER_EXNAPPRDONATIONDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXNAPPRDONATION)
        Me.tableOTHER_EXNAPPRDONATION_DETAIL = New OTHER_EXNAPPRDONATION_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXNAPPRDONATION_DETAIL)
        Me.tableOTHER_EXZAKAT = New OTHER_EXZAKATDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXZAKAT)
        Me.tableOTHER_EXZAKAT_DETAIL = New OTHER_EXZAKAT_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXZAKAT_DETAIL)
        Me.tableOTHER_EXLOSSDISPOSALFA = New OTHER_EXLOSSDISPOSALFADataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXLOSSDISPOSALFA)
        Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL = New OTHER_EXLOSSDISPOSALFA_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL)
        Me.tableOTHER_ENTERTAINNSTAFF = New OTHER_ENTERTAINNSTAFFDataTable()
        MyBase.Tables.Add(Me.tableOTHER_ENTERTAINNSTAFF)
        Me.tableOTHER_ENTERTAINNSTAFF_DETAIL = New OTHER_ENTERTAINNSTAFF_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL)
        Me.tableOTHER_ENTERTAINSTAFF = New OTHER_ENTERTAINSTAFFDataTable()
        MyBase.Tables.Add(Me.tableOTHER_ENTERTAINSTAFF)
        Me.tableOTHER_ENTERTAINSTAFF_DETAIL = New OTHER_ENTERTAINSTAFF_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_ENTERTAINSTAFF_DETAIL)
        Me.tableOTHER_EXPENALTY = New OTHER_EXPENALTYDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXPENALTY)
        Me.tableOTHER_EXPENALTY_DETAIL = New OTHER_EXPENALTY_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXPENALTY_DETAIL)
        Me.tableOTHER_EXPROVISIONACC = New OTHER_EXPROVISIONACCDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXPROVISIONACC)
        Me.tableOTHER_EXPROVISIONACC_DETAIL = New OTHER_EXPROVISIONACC_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXPROVISIONACC_DETAIL)
        Me.tableOTHER_EXLEAVEPASSAGE = New OTHER_EXLEAVEPASSAGEDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXLEAVEPASSAGE)
        Me.tableOTHER_EXLEAVEPASSAGE_DETAIL = New OTHER_EXLEAVEPASSAGE_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL)
        Me.tableOTHER_EXFAWRITTENOFF = New OTHER_EXFAWRITTENOFFDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXFAWRITTENOFF)
        Me.tableOTHER_EXFAWRITTENOFF_DETAIL = New OTHER_EXFAWRITTENOFF_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXFAWRITTENOFF_DETAIL)
        Me.tableOTHER_EXURLOSSFOREIGN = New OTHER_EXURLOSSFOREIGNDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXURLOSSFOREIGN)
        Me.tableOTHER_EXURLOSSFOREIGN_DETAIL = New OTHER_EXURLOSSFOREIGN_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL)
        Me.tableOTHER_EXRLOSSFOREIGNT = New OTHER_EXRLOSSFOREIGNTDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXRLOSSFOREIGNT)
        Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL = New OTHER_EXRLOSSFOREIGNT_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL)
        Me.tableOTHER_EXRLOSSFOREIGN = New OTHER_EXRLOSSFOREIGNDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXRLOSSFOREIGN)
        Me.tableOTHER_EXRLOSSFOREIGN_DETAIL = New OTHER_EXRLOSSFOREIGN_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL)
        Me.tableOTHER_EXINITIALSUB = New OTHER_EXINITIALSUBDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXINITIALSUB)
        Me.tableOTHER_EXINITIALSUB_DETAIL = New OTHER_EXINITIALSUB_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXINITIALSUB_DETAIL)
        Me.tableOTHER_EXCAPITALEXP = New OTHER_EXCAPITALEXPDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXCAPITALEXP)
        Me.tableOTHER_EXCAPITALEXP_DETAIL = New OTHER_EXCAPITALEXP_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXCAPITALEXP_DETAIL)
        Me.tableOTHER_EXPENSES = New OTHER_EXPENSESDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXPENSES)
        Me.tableOTHER_EXPENSES_DETAIL = New OTHER_EXPENSES_DETAILDataTable()
        MyBase.Tables.Add(Me.tableOTHER_EXPENSES_DETAIL)
        Me.tableRENTAL_INCOME = New RENTAL_INCOMEDataTable()
        MyBase.Tables.Add(Me.tableRENTAL_INCOME)
        Me.tableNonAllowable_Expenses = New NonAllowable_ExpensesDataTable()
        MyBase.Tables.Add(Me.tableNonAllowable_Expenses)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("PLFST_SALES_DETAIL_PLFST_SALES", New Global.System.Data.DataColumn() {Me.tablePLFST_SALES.PLFS_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSKEYColumn})
        Me.tablePLFST_SALES_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePLFST_OPENSTOCK.PLFOS_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSKEYColumn})
        Me.tablePLFST_OPENSTOCK_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL", New Global.System.Data.DataColumn() {Me.tablePLFST_PURCHASE.PLFPUR_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURKEYColumn})
        Me.tablePLFST_PURCHASE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_DEPRECIATION.EXDEP_KEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPKEYColumn})
        Me.tableEXPENSES_DEPRECIATION_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_ALLOW.EXA_KEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXAKEYColumn})
        Me.tableEXPENSES_ALLOW_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_NONALLOW.EXNA_KEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNAKEYColumn})
        Me.tableEXPENSES_NONALLOW_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePLFST_CLOSESTOCK.PLFCS_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSKEYColumn})
        Me.tablePLFST_CLOSESTOCK_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL", New Global.System.Data.DataColumn() {Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NSBIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIKEYColumn})
        Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_REALFET_INCOME_REALFET_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_REALFET.IRFET_IRFETKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETKEYColumn})
        Me.tableINCOME_REALFET_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NBINTEREST.NOBII_NOBIIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIKEYColumn})
        Me.tableINCOME_NBINTEREST_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NBROYALTY.NOBRI_NOBRIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIKEYColumn})
        Me.tableINCOME_NBROYALTY_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_INCOME_OTHER_INCOME_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_INCOME.OI_OIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_INCOME_DETAIL.OID_OIKEYColumn})
        Me.tableOTHER_INCOME_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALFA.NTIDFA_NTIDFAKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFAKEYColumn})
        Me.tableINCOME_NTDISPOSALFA_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NTIDIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIKEYColumn})
        Me.tableINCOME_NTDISPOSALINVEST_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NTIFIRKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRKEYColumn})
        Me.tableINCOME_NTFOREIGNINCREM_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTREALFE.NTIRFECT_NTIRFECTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTKEYColumn})
        Me.tableINCOME_NTREALFE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFENT.NTIUNT_NTIUNTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTKEYColumn})
        Me.tableINCOME_NTUREALFENT_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFET.NTIUT_NTIUTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTKEYColumn})
        Me.tableINCOME_NTUREALFET_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_INTEREST.EXI_EXIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIKEYColumn})
        Me.tableEXPENSES_INTEREST_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_LEGAL.EXL_EXLKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLKEYColumn})
        Me.tableEXPENSES_LEGAL_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_TECH_FEE.EXTF_EXTFKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFKEYColumn})
        Me.tableEXPENSES_TECH_FEE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_CONTRACT.EXC_EXCKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCKEYColumn})
        Me.tableEXPENSES_CONTRACT_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_DIRECTORS_FEE.EXDF_EXDFKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFKEYColumn})
        Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_SALARY.EXS_EXSKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSKEYColumn})
        Me.tableEXPENSES_SALARY_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_EMPL_STOCK.EXES_EXESKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESKEYColumn})
        Me.tableEXPENSES_EMPLSTOCK_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_ROYALTY.EXRO_EXROKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXROKEYColumn})
        Me.tableEXPENSES_ROYALTY_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_RENTAL.EXRENT_EXRENTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_EXRENTKEYColumn})
        Me.tableEXPENSES_RENTAL_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_REPAIR.EXREP_EXREPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPKEYColumn})
        Me.tableEXPENSES_REPAIR_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_RESEARCH.EXRES_EXRESKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESKEYColumn})
        Me.tableEXPENSES_RESEARCH_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_PROMOTE.EXP_EXPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPKEYColumn})
        Me.tableEXPENSES_PROMOTE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_TRAVEL.EXT_EXTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTKEYColumn})
        Me.tableEXPENSES_TRAVEL_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_JKDM.EXJK_EXJKKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKKEYColumn})
        Me.tableEXPENSES_JKDM_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXDEPRECIATION.EXODEP_EXODEPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPKEYColumn})
        Me.tableOTHER_EXDEPRECIATION_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXAPPRDONATION.EXOAD_EXOADKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADKEYColumn})
        Me.tableOTHER_EXAPPRDONATION_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXNAPPRDONATION.EXONAD_EXONADKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADKEYColumn})
        Me.tableOTHER_EXNAPPRDONATION_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXZAKAT.EXOZ_EXOZKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZKEYColumn})
        Me.tableOTHER_EXZAKAT_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_EXOLDKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDKEYColumn})
        Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_EXOENSKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSKEYColumn})
        Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINSTAFF.EXOES_EXOESKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESKEYColumn})
        Me.tableOTHER_ENTERTAINSTAFF_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENALTY.EXOP_EXOPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPKEYColumn})
        Me.tableOTHER_EXPENALTY_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXPROVISIONACC.EXOPA_EXOPAKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPAKEYColumn})
        Me.tableOTHER_EXPROVISIONACC_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_EXOLPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPKEYColumn})
        Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXFAWRITTENOFF.EXOWO_EXOWOKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWOKEYColumn})
        Me.tableOTHER_EXFAWRITTENOFF_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_EXOURKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURKEYColumn})
        Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_EXORTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTKEYColumn})
        Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGN.EXOR_EXORKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORKEYColumn})
        Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB", New Global.System.Data.DataColumn() {Me.tableOTHER_EXINITIALSUB.EXOIS_EXOISKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISKEYColumn})
        Me.tableOTHER_EXINITIALSUB_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXCAPITALEXP.EXOCE_EXOCEKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEKEYColumn})
        Me.tableOTHER_EXCAPITALEXP_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENSES.EXO_EXOKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXOKEYColumn})
        Me.tableOTHER_EXPENSES_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        Me.relationPLFST_SALES_DETAIL_PLFST_SALES = New Global.System.Data.DataRelation("PLFST_SALES_DETAIL_PLFST_SALES", New Global.System.Data.DataColumn() {Me.tablePLFST_SALES.PLFS_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSKEYColumn}, false)
        Me.Relations.Add(Me.relationPLFST_SALES_DETAIL_PLFST_SALES)
        Me.relationFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL = New Global.System.Data.DataRelation("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePLFST_OPENSTOCK.PLFOS_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL)
        Me.relationFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL = New Global.System.Data.DataRelation("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL", New Global.System.Data.DataColumn() {Me.tablePLFST_PURCHASE.PLFPUR_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL)
        Me.relationFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_DEPRECIATION.EXDEP_KEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL)
        Me.relationFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_ALLOW.EXA_KEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL)
        Me.relationFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_NONALLOW.EXNA_KEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL)
        Me.relationFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL = New Global.System.Data.DataRelation("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePLFST_CLOSESTOCK.PLFCS_KEYColumn}, New Global.System.Data.DataColumn() {Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL)
        Me.relationFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL = New Global.System.Data.DataRelation("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL", New Global.System.Data.DataColumn() {Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NSBIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL)
        Me.relationFK_INCOME_REALFET_INCOME_REALFET_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_REALFET_INCOME_REALFET_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_REALFET.IRFET_IRFETKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_REALFET_INCOME_REALFET_DETAIL)
        Me.relationFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NBINTEREST.NOBII_NOBIIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL)
        Me.relationFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NBROYALTY.NOBRI_NOBRIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL)
        Me.relationFK_OTHER_INCOME_OTHER_INCOME_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_INCOME_OTHER_INCOME_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_INCOME.OI_OIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_INCOME_DETAIL.OID_OIKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_INCOME_OTHER_INCOME_DETAIL)
        Me.relationFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALFA.NTIDFA_NTIDFAKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL)
        Me.relationFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NTIDIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL)
        Me.relationFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NTIFIRKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL)
        Me.relationFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTREALFE.NTIRFECT_NTIRFECTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL)
        Me.relationFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFENT.NTIUNT_NTIUNTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL)
        Me.relationFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL = New Global.System.Data.DataRelation("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL", New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFET.NTIUT_NTIUTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL)
        Me.relationFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_INTEREST.EXI_EXIKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL)
        Me.relationFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_LEGAL.EXL_EXLKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL)
        Me.relationFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_TECH_FEE.EXTF_EXTFKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL)
        Me.relationFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_CONTRACT.EXC_EXCKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL)
        Me.relationFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_DIRECTORS_FEE.EXDF_EXDFKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL)
        Me.relationFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_SALARY.EXS_EXSKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL)
        Me.relationFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_EMPL_STOCK.EXES_EXESKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL)
        Me.relationFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_ROYALTY.EXRO_EXROKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXROKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL)
        Me.relationFK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_RENTAL.EXRENT_EXRENTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_EXRENTKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL)
        Me.relationFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_REPAIR.EXREP_EXREPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL)
        Me.relationFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_RESEARCH.EXRES_EXRESKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL)
        Me.relationFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_PROMOTE.EXP_EXPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL)
        Me.relationFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_TRAVEL.EXT_EXTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL)
        Me.relationFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL = New Global.System.Data.DataRelation("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL", New Global.System.Data.DataColumn() {Me.tableEXPENSES_JKDM.EXJK_EXJKKEYColumn}, New Global.System.Data.DataColumn() {Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL)
        Me.relationFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXDEPRECIATION.EXODEP_EXODEPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL)
        Me.relationFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXAPPRDONATION.EXOAD_EXOADKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL)
        Me.relationFK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXNAPPRDONATION.EXONAD_EXONADKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL)
        Me.relationFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXZAKAT.EXOZ_EXOZKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL)
        Me.relationFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_EXOLDKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL)
        Me.relationFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_EXOENSKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL)
        Me.relationFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINSTAFF.EXOES_EXOESKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL)
        Me.relationFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENALTY.EXOP_EXOPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL)
        Me.relationFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXPROVISIONACC.EXOPA_EXOPAKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL)
        Me.relationFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_EXOLPKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL)
        Me.relationFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXFAWRITTENOFF.EXOWO_EXOWOKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWOKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL)
        Me.relationFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_EXOURKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL)
        Me.relationFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_EXORTKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL)
        Me.relationFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGN.EXOR_EXORKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL)
        Me.relationFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB = New Global.System.Data.DataRelation("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB", New Global.System.Data.DataColumn() {Me.tableOTHER_EXINITIALSUB.EXOIS_EXOISKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB)
        Me.relationFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXCAPITALEXP.EXOCE_EXOCEKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL)
        Me.relationFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL = New Global.System.Data.DataRelation("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL", New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENSES.EXO_EXOKEYColumn}, New Global.System.Data.DataColumn() {Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXOKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_SALES_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_SALES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeBUSINESS_SOURCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_OPENSTOCK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_OPENSTOCK_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_PURCHASE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_PURCHASE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_DEPRECIATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_DEPRECIATION_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_ALLOW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_ALLOW_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_NONALLOW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_NONALLOW_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_CLOSESTOCK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLFST_CLOSESTOCK_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeNONSOURCE_BUSINESSINCOME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeNONSOURCE_BUSINESSINCOME_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_REALFET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_REALFET_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NBINTEREST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NBINTEREST_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NBROYALTY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NBROYALTY_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_INCOME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_INCOME_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTDISPOSALFA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTDISPOSALFA_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTDISPOSALINVEST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTDISPOSALINVEST_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTFOREIGNINCREM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTFOREIGNINCREM_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTREALFE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTREALFE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTUREALFENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTUREALFENT_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTUREALFET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_NTUREALFET_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_INTEREST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_INTEREST_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_LEGAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_LEGAL_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_TECH_FEE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_TECH_FEE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_CONTRACT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_CONTRACT_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_DIRECTORS_FEE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_DIRECTORS_FEE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_SALARY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_SALARY_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_EMPLSTOCK_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_EMPL_STOCK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_ROYALTY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_ROYALTY_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_RENTAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_RENTAL_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_REPAIR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_REPAIR_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_RESEARCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_RESEARCH_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_PROMOTE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_PROMOTE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_TRAVEL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_TRAVEL_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_JKDM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEXPENSES_JKDM_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXDEPRECIATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXDEPRECIATION_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXAPPRDONATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXAPPRDONATION_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXNAPPRDONATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXNAPPRDONATION_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXZAKAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXZAKAT_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXLOSSDISPOSALFA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXLOSSDISPOSALFA_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_ENTERTAINNSTAFF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_ENTERTAINNSTAFF_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_ENTERTAINSTAFF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_ENTERTAINSTAFF_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXPENALTY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXPENALTY_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXPROVISIONACC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXPROVISIONACC_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXLEAVEPASSAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXLEAVEPASSAGE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXFAWRITTENOFF() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXFAWRITTENOFF_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXURLOSSFOREIGN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXURLOSSFOREIGN_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXRLOSSFOREIGNT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXRLOSSFOREIGNT_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXRLOSSFOREIGN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXRLOSSFOREIGN_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXINITIALSUB() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXINITIALSUB_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXCAPITALEXP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXCAPITALEXP_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXPENSES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeOTHER_EXPENSES_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRENTAL_INCOME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeNonAllowable_Expenses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPNL = New dsPNL()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_SALES_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_SALES_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_SALESRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_SALESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub BUSINESS_SOURCERowChangeEventHandler(ByVal sender As Object, ByVal e As BUSINESS_SOURCERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_OPENSTOCKRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_OPENSTOCKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_OPENSTOCK_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_OPENSTOCK_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_PURCHASERowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_PURCHASERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_PURCHASE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_PURCHASE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_DEPRECIATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_DEPRECIATIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_DEPRECIATION_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_DEPRECIATION_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_ALLOWRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_ALLOWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_ALLOW_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_ALLOW_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_NONALLOWRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_NONALLOWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_NONALLOW_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_NONALLOW_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_CLOSESTOCKRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_CLOSESTOCKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLFST_CLOSESTOCK_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PLFST_CLOSESTOCK_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub NONSOURCE_BUSINESSINCOMERowChangeEventHandler(ByVal sender As Object, ByVal e As NONSOURCE_BUSINESSINCOMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub NONSOURCE_BUSINESSINCOME_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As NONSOURCE_BUSINESSINCOME_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_REALFETRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_REALFETRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_REALFET_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_REALFET_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NBINTERESTRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NBINTERESTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NBINTEREST_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NBINTEREST_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NBROYALTYRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NBROYALTYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NBROYALTY_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NBROYALTY_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_INCOMERowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_INCOMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_INCOME_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_INCOME_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTDISPOSALFARowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTDISPOSALFARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTDISPOSALFA_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTDISPOSALFA_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTDISPOSALINVESTRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTDISPOSALINVESTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTDISPOSALINVEST_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTDISPOSALINVEST_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTFOREIGNINCREMRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTFOREIGNINCREMRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTFOREIGNINCREM_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTFOREIGNINCREM_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTREALFERowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTREALFERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTREALFE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTREALFE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTUREALFENTRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTUREALFENTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTUREALFENT_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTUREALFENT_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTUREALFETRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTUREALFETRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_NTUREALFET_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_NTUREALFET_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_INTERESTRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_INTERESTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_INTEREST_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_INTEREST_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_LEGALRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_LEGALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_LEGAL_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_LEGAL_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_TECH_FEERowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_TECH_FEERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_TECH_FEE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_TECH_FEE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_CONTRACTRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_CONTRACTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_CONTRACT_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_CONTRACT_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_DIRECTORS_FEERowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_DIRECTORS_FEERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_DIRECTORS_FEE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_DIRECTORS_FEE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_SALARYRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_SALARYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_SALARY_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_SALARY_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_EMPLSTOCK_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_EMPLSTOCK_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_EMPL_STOCKRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_EMPL_STOCKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_ROYALTYRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_ROYALTYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_ROYALTY_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_ROYALTY_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_RENTALRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_RENTALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_RENTAL_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_RENTAL_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_REPAIRRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_REPAIRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_REPAIR_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_REPAIR_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_RESEARCHRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_RESEARCHRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_RESEARCH_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_RESEARCH_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_PROMOTERowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_PROMOTERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_PROMOTE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_PROMOTE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_TRAVELRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_TRAVELRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_TRAVEL_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_TRAVEL_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_JKDMRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_JKDMRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EXPENSES_JKDM_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As EXPENSES_JKDM_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXDEPRECIATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXDEPRECIATIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXDEPRECIATION_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXDEPRECIATION_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXAPPRDONATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXAPPRDONATIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXAPPRDONATION_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXAPPRDONATION_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXNAPPRDONATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXNAPPRDONATIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXNAPPRDONATION_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXNAPPRDONATION_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXZAKATRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXZAKATRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXZAKAT_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXZAKAT_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXLOSSDISPOSALFARowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXLOSSDISPOSALFARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_ENTERTAINNSTAFFRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_ENTERTAINNSTAFFRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_ENTERTAINNSTAFF_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_ENTERTAINNSTAFF_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_ENTERTAINSTAFFRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_ENTERTAINSTAFFRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_ENTERTAINSTAFF_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_ENTERTAINSTAFF_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXPENALTYRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXPENALTYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXPENALTY_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXPENALTY_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXPROVISIONACCRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXPROVISIONACCRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXPROVISIONACC_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXPROVISIONACC_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXLEAVEPASSAGERowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXLEAVEPASSAGERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXLEAVEPASSAGE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXLEAVEPASSAGE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXFAWRITTENOFFRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXFAWRITTENOFFRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXFAWRITTENOFF_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXFAWRITTENOFF_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXURLOSSFOREIGNRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXURLOSSFOREIGNRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXURLOSSFOREIGN_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXURLOSSFOREIGN_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXRLOSSFOREIGNTRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXRLOSSFOREIGNTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXRLOSSFOREIGNRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXRLOSSFOREIGNRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXRLOSSFOREIGN_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXRLOSSFOREIGN_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXINITIALSUBRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXINITIALSUBRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXINITIALSUB_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXINITIALSUB_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXCAPITALEXPRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXCAPITALEXPRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXCAPITALEXP_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXCAPITALEXP_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXPENSESRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXPENSESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub OTHER_EXPENSES_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As OTHER_EXPENSES_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RENTAL_INCOMERowChangeEventHandler(ByVal sender As Object, ByVal e As RENTAL_INCOMERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub NonAllowable_ExpensesRowChangeEventHandler(ByVal sender As Object, ByVal e As NonAllowable_ExpensesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_SALES_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_SALES_DETAILRow)
        
        Private columnPLFSD_KEY As Global.System.Data.DataColumn
        
        Private columnPLFSD_PLFSKEY As Global.System.Data.DataColumn
        
        Private columnPLFSD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFSD_PLFSDKEY As Global.System.Data.DataColumn
        
        Private columnPLFSD_DESC As Global.System.Data.DataColumn
        
        Private columnPLFSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFSD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_SALES_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_PLFSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_PLFSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_PLFSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_PLFSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFSD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFSD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_SALES_DETAILRow
            Get
                Return CType(Me.Rows(index),PLFST_SALES_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALES_DETAILRowChanging As PLFST_SALES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALES_DETAILRowChanged As PLFST_SALES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALES_DETAILRowDeleting As PLFST_SALES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALES_DETAILRowDeleted As PLFST_SALES_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_SALES_DETAILRow(ByVal row As PLFST_SALES_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_SALES_DETAILRow(ByVal parentPLFST_SALESRowByPLFST_SALES_DETAIL_PLFST_SALES As PLFST_SALESRow, ByVal PLFSD_SOURCENO As Integer, ByVal PLFSD_PLFSDKEY As Integer, ByVal PLFSD_DESC As String, ByVal PLFSD_AMOUNT As Decimal, ByVal PLFSD_NOTE As String) As PLFST_SALES_DETAILRow
            Dim rowPLFST_SALES_DETAILRow As PLFST_SALES_DETAILRow = CType(Me.NewRow,PLFST_SALES_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PLFSD_SOURCENO, PLFSD_PLFSDKEY, PLFSD_DESC, PLFSD_AMOUNT, PLFSD_NOTE}
            If (Not (parentPLFST_SALESRowByPLFST_SALES_DETAIL_PLFST_SALES) Is Nothing) Then
                columnValuesArray(1) = parentPLFST_SALESRowByPLFST_SALES_DETAIL_PLFST_SALES(0)
            End If
            rowPLFST_SALES_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_SALES_DETAILRow)
            Return rowPLFST_SALES_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_SALES_DETAILDataTable = CType(MyBase.Clone,PLFST_SALES_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_SALES_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFSD_KEY = MyBase.Columns("PLFSD_KEY")
            Me.columnPLFSD_PLFSKEY = MyBase.Columns("PLFSD_PLFSKEY")
            Me.columnPLFSD_SOURCENO = MyBase.Columns("PLFSD_SOURCENO")
            Me.columnPLFSD_PLFSDKEY = MyBase.Columns("PLFSD_PLFSDKEY")
            Me.columnPLFSD_DESC = MyBase.Columns("PLFSD_DESC")
            Me.columnPLFSD_AMOUNT = MyBase.Columns("PLFSD_AMOUNT")
            Me.columnPLFSD_NOTE = MyBase.Columns("PLFSD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFSD_KEY = New Global.System.Data.DataColumn("PLFSD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_KEY)
            Me.columnPLFSD_PLFSKEY = New Global.System.Data.DataColumn("PLFSD_PLFSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_PLFSKEY)
            Me.columnPLFSD_SOURCENO = New Global.System.Data.DataColumn("PLFSD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_SOURCENO)
            Me.columnPLFSD_PLFSDKEY = New Global.System.Data.DataColumn("PLFSD_PLFSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_PLFSDKEY)
            Me.columnPLFSD_DESC = New Global.System.Data.DataColumn("PLFSD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_DESC)
            Me.columnPLFSD_AMOUNT = New Global.System.Data.DataColumn("PLFSD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_AMOUNT)
            Me.columnPLFSD_NOTE = New Global.System.Data.DataColumn("PLFSD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFSD_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFSD_KEY}, false))
            Me.columnPLFSD_KEY.AutoIncrement = true
            Me.columnPLFSD_KEY.Unique = true
            Me.columnPLFSD_DESC.MaxLength = 255
            Me.columnPLFSD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFSD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_SALES_DETAILRow() As PLFST_SALES_DETAILRow
            Return CType(Me.NewRow,PLFST_SALES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_SALES_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_SALES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_SALES_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_SALES_DETAILRowChanged(Me, New PLFST_SALES_DETAILRowChangeEvent(CType(e.Row,PLFST_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_SALES_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_SALES_DETAILRowChanging(Me, New PLFST_SALES_DETAILRowChangeEvent(CType(e.Row,PLFST_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_SALES_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_SALES_DETAILRowDeleted(Me, New PLFST_SALES_DETAILRowChangeEvent(CType(e.Row,PLFST_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_SALES_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_SALES_DETAILRowDeleting(Me, New PLFST_SALES_DETAILRowChangeEvent(CType(e.Row,PLFST_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_SALES_DETAILRow(ByVal row As PLFST_SALES_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_SALES_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_SALESDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_SALESRow)
        
        Private columnPLFS_KEY As Global.System.Data.DataColumn
        
        Private columnPLFS_PLFSKEY As Global.System.Data.DataColumn
        
        Private columnPLFS_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFS_DESC As Global.System.Data.DataColumn
        
        Private columnPLFS_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFS_NOTE As Global.System.Data.DataColumn
        
        Private columnPLFS_DETAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_SALES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_PLFSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_PLFSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFS_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFS_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_SALESRow
            Get
                Return CType(Me.Rows(index),PLFST_SALESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALESRowChanging As PLFST_SALESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALESRowChanged As PLFST_SALESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALESRowDeleting As PLFST_SALESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_SALESRowDeleted As PLFST_SALESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_SALESRow(ByVal row As PLFST_SALESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_SALESRow(ByVal PLFS_PLFSKEY As Integer, ByVal PLFS_SOURCENO As Integer, ByVal PLFS_DESC As String, ByVal PLFS_AMOUNT As Decimal, ByVal PLFS_NOTE As String, ByVal PLFS_DETAIL As String) As PLFST_SALESRow
            Dim rowPLFST_SALESRow As PLFST_SALESRow = CType(Me.NewRow,PLFST_SALESRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PLFS_PLFSKEY, PLFS_SOURCENO, PLFS_DESC, PLFS_AMOUNT, PLFS_NOTE, PLFS_DETAIL}
            rowPLFST_SALESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_SALESRow)
            Return rowPLFST_SALESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_SALESDataTable = CType(MyBase.Clone,PLFST_SALESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_SALESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFS_KEY = MyBase.Columns("PLFS_KEY")
            Me.columnPLFS_PLFSKEY = MyBase.Columns("PLFS_PLFSKEY")
            Me.columnPLFS_SOURCENO = MyBase.Columns("PLFS_SOURCENO")
            Me.columnPLFS_DESC = MyBase.Columns("PLFS_DESC")
            Me.columnPLFS_AMOUNT = MyBase.Columns("PLFS_AMOUNT")
            Me.columnPLFS_NOTE = MyBase.Columns("PLFS_NOTE")
            Me.columnPLFS_DETAIL = MyBase.Columns("PLFS_DETAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFS_KEY = New Global.System.Data.DataColumn("PLFS_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_KEY)
            Me.columnPLFS_PLFSKEY = New Global.System.Data.DataColumn("PLFS_PLFSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_PLFSKEY)
            Me.columnPLFS_SOURCENO = New Global.System.Data.DataColumn("PLFS_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_SOURCENO)
            Me.columnPLFS_DESC = New Global.System.Data.DataColumn("PLFS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_DESC)
            Me.columnPLFS_AMOUNT = New Global.System.Data.DataColumn("PLFS_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_AMOUNT)
            Me.columnPLFS_NOTE = New Global.System.Data.DataColumn("PLFS_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_NOTE)
            Me.columnPLFS_DETAIL = New Global.System.Data.DataColumn("PLFS_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFS_DETAIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFS_KEY}, false))
            Me.columnPLFS_KEY.AutoIncrement = true
            Me.columnPLFS_KEY.Unique = true
            Me.columnPLFS_DESC.MaxLength = 255
            Me.columnPLFS_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFS_NOTE.MaxLength = 3000
            Me.columnPLFS_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_SALESRow() As PLFST_SALESRow
            Return CType(Me.NewRow,PLFST_SALESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_SALESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_SALESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_SALESRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_SALESRowChanged(Me, New PLFST_SALESRowChangeEvent(CType(e.Row,PLFST_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_SALESRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_SALESRowChanging(Me, New PLFST_SALESRowChangeEvent(CType(e.Row,PLFST_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_SALESRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_SALESRowDeleted(Me, New PLFST_SALESRowChangeEvent(CType(e.Row,PLFST_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_SALESRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_SALESRowDeleting(Me, New PLFST_SALESRowChangeEvent(CType(e.Row,PLFST_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_SALESRow(ByVal row As PLFST_SALESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_SALESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BUSINESS_SOURCEDataTable
        Inherits Global.System.Data.TypedTableBase(Of BUSINESS_SOURCERow)
        
        Private columnBC_SOURCEKEY As Global.System.Data.DataColumn
        
        Private columnBC_SOURCENO As Global.System.Data.DataColumn
        
        Private columnBC_CODE As Global.System.Data.DataColumn
        
        Private columnBC_TYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BUSINESS_SOURCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BC_SOURCEKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_SOURCEKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BC_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BC_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BC_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBC_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BUSINESS_SOURCERow
            Get
                Return CType(Me.Rows(index),BUSINESS_SOURCERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BUSINESS_SOURCERowChanging As BUSINESS_SOURCERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BUSINESS_SOURCERowChanged As BUSINESS_SOURCERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BUSINESS_SOURCERowDeleting As BUSINESS_SOURCERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BUSINESS_SOURCERowDeleted As BUSINESS_SOURCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddBUSINESS_SOURCERow(ByVal row As BUSINESS_SOURCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddBUSINESS_SOURCERow(ByVal BC_SOURCEKEY As Long, ByVal BC_SOURCENO As Long, ByVal BC_CODE As String, ByVal BC_TYPE As String) As BUSINESS_SOURCERow
            Dim rowBUSINESS_SOURCERow As BUSINESS_SOURCERow = CType(Me.NewRow,BUSINESS_SOURCERow)
            Dim columnValuesArray() As Object = New Object() {BC_SOURCEKEY, BC_SOURCENO, BC_CODE, BC_TYPE}
            rowBUSINESS_SOURCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBUSINESS_SOURCERow)
            Return rowBUSINESS_SOURCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BUSINESS_SOURCEDataTable = CType(MyBase.Clone,BUSINESS_SOURCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BUSINESS_SOURCEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnBC_SOURCEKEY = MyBase.Columns("BC_SOURCEKEY")
            Me.columnBC_SOURCENO = MyBase.Columns("BC_SOURCENO")
            Me.columnBC_CODE = MyBase.Columns("BC_CODE")
            Me.columnBC_TYPE = MyBase.Columns("BC_TYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnBC_SOURCEKEY = New Global.System.Data.DataColumn("BC_SOURCEKEY", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_SOURCEKEY)
            Me.columnBC_SOURCENO = New Global.System.Data.DataColumn("BC_SOURCENO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_SOURCENO)
            Me.columnBC_CODE = New Global.System.Data.DataColumn("BC_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_CODE)
            Me.columnBC_TYPE = New Global.System.Data.DataColumn("BC_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBC_TYPE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewBUSINESS_SOURCERow() As BUSINESS_SOURCERow
            Return CType(Me.NewRow,BUSINESS_SOURCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BUSINESS_SOURCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BUSINESS_SOURCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BUSINESS_SOURCERowChangedEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowChanged(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row,BUSINESS_SOURCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BUSINESS_SOURCERowChangingEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowChanging(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row,BUSINESS_SOURCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BUSINESS_SOURCERowDeletedEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowDeleted(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row,BUSINESS_SOURCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BUSINESS_SOURCERowDeletingEvent) Is Nothing) Then
                RaiseEvent BUSINESS_SOURCERowDeleting(Me, New BUSINESS_SOURCERowChangeEvent(CType(e.Row,BUSINESS_SOURCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveBUSINESS_SOURCERow(ByVal row As BUSINESS_SOURCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BUSINESS_SOURCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_OPENSTOCKDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_OPENSTOCKRow)
        
        Private columnPLFOS_KEY As Global.System.Data.DataColumn
        
        Private columnPLFOS_PLFOSKEY As Global.System.Data.DataColumn
        
        Private columnPLFOS_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFOS_DESC As Global.System.Data.DataColumn
        
        Private columnPLFOS_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFOS_NOTE As Global.System.Data.DataColumn
        
        Private columnPLFOS_DETAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_OPENSTOCK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_PLFOSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_PLFOSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOS_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOS_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_OPENSTOCKRow
            Get
                Return CType(Me.Rows(index),PLFST_OPENSTOCKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCKRowChanging As PLFST_OPENSTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCKRowChanged As PLFST_OPENSTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCKRowDeleting As PLFST_OPENSTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCKRowDeleted As PLFST_OPENSTOCKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_OPENSTOCKRow(ByVal row As PLFST_OPENSTOCKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_OPENSTOCKRow(ByVal PLFOS_PLFOSKEY As Integer, ByVal PLFOS_SOURCENO As Integer, ByVal PLFOS_DESC As String, ByVal PLFOS_AMOUNT As Decimal, ByVal PLFOS_NOTE As String, ByVal PLFOS_DETAIL As String) As PLFST_OPENSTOCKRow
            Dim rowPLFST_OPENSTOCKRow As PLFST_OPENSTOCKRow = CType(Me.NewRow,PLFST_OPENSTOCKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PLFOS_PLFOSKEY, PLFOS_SOURCENO, PLFOS_DESC, PLFOS_AMOUNT, PLFOS_NOTE, PLFOS_DETAIL}
            rowPLFST_OPENSTOCKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_OPENSTOCKRow)
            Return rowPLFST_OPENSTOCKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_OPENSTOCKDataTable = CType(MyBase.Clone,PLFST_OPENSTOCKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_OPENSTOCKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFOS_KEY = MyBase.Columns("PLFOS_KEY")
            Me.columnPLFOS_PLFOSKEY = MyBase.Columns("PLFOS_PLFOSKEY")
            Me.columnPLFOS_SOURCENO = MyBase.Columns("PLFOS_SOURCENO")
            Me.columnPLFOS_DESC = MyBase.Columns("PLFOS_DESC")
            Me.columnPLFOS_AMOUNT = MyBase.Columns("PLFOS_AMOUNT")
            Me.columnPLFOS_NOTE = MyBase.Columns("PLFOS_NOTE")
            Me.columnPLFOS_DETAIL = MyBase.Columns("PLFOS_DETAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFOS_KEY = New Global.System.Data.DataColumn("PLFOS_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_KEY)
            Me.columnPLFOS_PLFOSKEY = New Global.System.Data.DataColumn("PLFOS_PLFOSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_PLFOSKEY)
            Me.columnPLFOS_SOURCENO = New Global.System.Data.DataColumn("PLFOS_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_SOURCENO)
            Me.columnPLFOS_DESC = New Global.System.Data.DataColumn("PLFOS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_DESC)
            Me.columnPLFOS_AMOUNT = New Global.System.Data.DataColumn("PLFOS_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_AMOUNT)
            Me.columnPLFOS_NOTE = New Global.System.Data.DataColumn("PLFOS_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_NOTE)
            Me.columnPLFOS_DETAIL = New Global.System.Data.DataColumn("PLFOS_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOS_DETAIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFOS_KEY}, false))
            Me.columnPLFOS_KEY.AutoIncrement = true
            Me.columnPLFOS_KEY.Unique = true
            Me.columnPLFOS_DESC.MaxLength = 255
            Me.columnPLFOS_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFOS_NOTE.MaxLength = 3000
            Me.columnPLFOS_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_OPENSTOCKRow() As PLFST_OPENSTOCKRow
            Return CType(Me.NewRow,PLFST_OPENSTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_OPENSTOCKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_OPENSTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_OPENSTOCKRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCKRowChanged(Me, New PLFST_OPENSTOCKRowChangeEvent(CType(e.Row,PLFST_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_OPENSTOCKRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCKRowChanging(Me, New PLFST_OPENSTOCKRowChangeEvent(CType(e.Row,PLFST_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_OPENSTOCKRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCKRowDeleted(Me, New PLFST_OPENSTOCKRowChangeEvent(CType(e.Row,PLFST_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_OPENSTOCKRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCKRowDeleting(Me, New PLFST_OPENSTOCKRowChangeEvent(CType(e.Row,PLFST_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_OPENSTOCKRow(ByVal row As PLFST_OPENSTOCKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_OPENSTOCKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_OPENSTOCK_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_OPENSTOCK_DETAILRow)
        
        Private columnPLFOSD_KEY As Global.System.Data.DataColumn
        
        Private columnPLFOSD_PLFOSKEY As Global.System.Data.DataColumn
        
        Private columnPLFOSD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFOSD_PLFOSDKEY As Global.System.Data.DataColumn
        
        Private columnPLFOSD_DESC As Global.System.Data.DataColumn
        
        Private columnPLFOSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFOSD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_OPENSTOCK_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_PLFOSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_PLFOSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_PLFOSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_PLFOSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFOSD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFOSD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_OPENSTOCK_DETAILRow
            Get
                Return CType(Me.Rows(index),PLFST_OPENSTOCK_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCK_DETAILRowChanging As PLFST_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCK_DETAILRowChanged As PLFST_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCK_DETAILRowDeleting As PLFST_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_OPENSTOCK_DETAILRowDeleted As PLFST_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_OPENSTOCK_DETAILRow(ByVal row As PLFST_OPENSTOCK_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_OPENSTOCK_DETAILRow(ByVal parentPLFST_OPENSTOCKRowByFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL As PLFST_OPENSTOCKRow, ByVal PLFOSD_SOURCENO As Integer, ByVal PLFOSD_PLFOSDKEY As Integer, ByVal PLFOSD_DESC As String, ByVal PLFOSD_AMOUNT As Decimal, ByVal PLFOSD_NOTE As String) As PLFST_OPENSTOCK_DETAILRow
            Dim rowPLFST_OPENSTOCK_DETAILRow As PLFST_OPENSTOCK_DETAILRow = CType(Me.NewRow,PLFST_OPENSTOCK_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PLFOSD_SOURCENO, PLFOSD_PLFOSDKEY, PLFOSD_DESC, PLFOSD_AMOUNT, PLFOSD_NOTE}
            If (Not (parentPLFST_OPENSTOCKRowByFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentPLFST_OPENSTOCKRowByFK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL(0)
            End If
            rowPLFST_OPENSTOCK_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_OPENSTOCK_DETAILRow)
            Return rowPLFST_OPENSTOCK_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPLFOSD_KEY(ByVal PLFOSD_KEY As Integer) As PLFST_OPENSTOCK_DETAILRow
            Return CType(Me.Rows.Find(New Object() {PLFOSD_KEY}),PLFST_OPENSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_OPENSTOCK_DETAILDataTable = CType(MyBase.Clone,PLFST_OPENSTOCK_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_OPENSTOCK_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFOSD_KEY = MyBase.Columns("PLFOSD_KEY")
            Me.columnPLFOSD_PLFOSKEY = MyBase.Columns("PLFOSD_PLFOSKEY")
            Me.columnPLFOSD_SOURCENO = MyBase.Columns("PLFOSD_SOURCENO")
            Me.columnPLFOSD_PLFOSDKEY = MyBase.Columns("PLFOSD_PLFOSDKEY")
            Me.columnPLFOSD_DESC = MyBase.Columns("PLFOSD_DESC")
            Me.columnPLFOSD_AMOUNT = MyBase.Columns("PLFOSD_AMOUNT")
            Me.columnPLFOSD_NOTE = MyBase.Columns("PLFOSD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFOSD_KEY = New Global.System.Data.DataColumn("PLFOSD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_KEY)
            Me.columnPLFOSD_PLFOSKEY = New Global.System.Data.DataColumn("PLFOSD_PLFOSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_PLFOSKEY)
            Me.columnPLFOSD_SOURCENO = New Global.System.Data.DataColumn("PLFOSD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_SOURCENO)
            Me.columnPLFOSD_PLFOSDKEY = New Global.System.Data.DataColumn("PLFOSD_PLFOSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_PLFOSDKEY)
            Me.columnPLFOSD_DESC = New Global.System.Data.DataColumn("PLFOSD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_DESC)
            Me.columnPLFOSD_AMOUNT = New Global.System.Data.DataColumn("PLFOSD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_AMOUNT)
            Me.columnPLFOSD_NOTE = New Global.System.Data.DataColumn("PLFOSD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFOSD_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFOSD_KEY}, true))
            Me.columnPLFOSD_KEY.AutoIncrement = true
            Me.columnPLFOSD_KEY.AllowDBNull = false
            Me.columnPLFOSD_KEY.Unique = true
            Me.columnPLFOSD_DESC.MaxLength = 255
            Me.columnPLFOSD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFOSD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_OPENSTOCK_DETAILRow() As PLFST_OPENSTOCK_DETAILRow
            Return CType(Me.NewRow,PLFST_OPENSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_OPENSTOCK_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_OPENSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_OPENSTOCK_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCK_DETAILRowChanged(Me, New PLFST_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_OPENSTOCK_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCK_DETAILRowChanging(Me, New PLFST_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_OPENSTOCK_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCK_DETAILRowDeleted(Me, New PLFST_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_OPENSTOCK_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_OPENSTOCK_DETAILRowDeleting(Me, New PLFST_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_OPENSTOCK_DETAILRow(ByVal row As PLFST_OPENSTOCK_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_OPENSTOCK_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_PURCHASEDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_PURCHASERow)
        
        Private columnPLFPUR_KEY As Global.System.Data.DataColumn
        
        Private columnPLFPUR_PLFPURKEY As Global.System.Data.DataColumn
        
        Private columnPLFPUR_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFPUR_DESC As Global.System.Data.DataColumn
        
        Private columnPLFPUR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFPUR_NOTE As Global.System.Data.DataColumn
        
        Private columnPLFPUR_DETAIL As Global.System.Data.DataColumn
        
        Private columnPLFPUR_DEDUCTIBLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_PURCHASE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_PLFPURKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_PLFPURKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPUR_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPUR_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_PURCHASERow
            Get
                Return CType(Me.Rows(index),PLFST_PURCHASERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASERowChanging As PLFST_PURCHASERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASERowChanged As PLFST_PURCHASERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASERowDeleting As PLFST_PURCHASERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASERowDeleted As PLFST_PURCHASERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_PURCHASERow(ByVal row As PLFST_PURCHASERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_PURCHASERow(ByVal PLFPUR_PLFPURKEY As Integer, ByVal PLFPUR_SOURCENO As Integer, ByVal PLFPUR_DESC As String, ByVal PLFPUR_AMOUNT As Decimal, ByVal PLFPUR_NOTE As String, ByVal PLFPUR_DETAIL As String, ByVal PLFPUR_DEDUCTIBLE As Boolean) As PLFST_PURCHASERow
            Dim rowPLFST_PURCHASERow As PLFST_PURCHASERow = CType(Me.NewRow,PLFST_PURCHASERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PLFPUR_PLFPURKEY, PLFPUR_SOURCENO, PLFPUR_DESC, PLFPUR_AMOUNT, PLFPUR_NOTE, PLFPUR_DETAIL, PLFPUR_DEDUCTIBLE}
            rowPLFST_PURCHASERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_PURCHASERow)
            Return rowPLFST_PURCHASERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_PURCHASEDataTable = CType(MyBase.Clone,PLFST_PURCHASEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_PURCHASEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFPUR_KEY = MyBase.Columns("PLFPUR_KEY")
            Me.columnPLFPUR_PLFPURKEY = MyBase.Columns("PLFPUR_PLFPURKEY")
            Me.columnPLFPUR_SOURCENO = MyBase.Columns("PLFPUR_SOURCENO")
            Me.columnPLFPUR_DESC = MyBase.Columns("PLFPUR_DESC")
            Me.columnPLFPUR_AMOUNT = MyBase.Columns("PLFPUR_AMOUNT")
            Me.columnPLFPUR_NOTE = MyBase.Columns("PLFPUR_NOTE")
            Me.columnPLFPUR_DETAIL = MyBase.Columns("PLFPUR_DETAIL")
            Me.columnPLFPUR_DEDUCTIBLE = MyBase.Columns("PLFPUR_DEDUCTIBLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFPUR_KEY = New Global.System.Data.DataColumn("PLFPUR_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_KEY)
            Me.columnPLFPUR_PLFPURKEY = New Global.System.Data.DataColumn("PLFPUR_PLFPURKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_PLFPURKEY)
            Me.columnPLFPUR_SOURCENO = New Global.System.Data.DataColumn("PLFPUR_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_SOURCENO)
            Me.columnPLFPUR_DESC = New Global.System.Data.DataColumn("PLFPUR_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_DESC)
            Me.columnPLFPUR_AMOUNT = New Global.System.Data.DataColumn("PLFPUR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_AMOUNT)
            Me.columnPLFPUR_NOTE = New Global.System.Data.DataColumn("PLFPUR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_NOTE)
            Me.columnPLFPUR_DETAIL = New Global.System.Data.DataColumn("PLFPUR_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_DETAIL)
            Me.columnPLFPUR_DEDUCTIBLE = New Global.System.Data.DataColumn("PLFPUR_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPUR_DEDUCTIBLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFPUR_KEY}, false))
            Me.columnPLFPUR_KEY.AutoIncrement = true
            Me.columnPLFPUR_KEY.Unique = true
            Me.columnPLFPUR_DESC.MaxLength = 255
            Me.columnPLFPUR_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFPUR_NOTE.MaxLength = 3000
            Me.columnPLFPUR_DETAIL.MaxLength = 30
            Me.columnPLFPUR_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_PURCHASERow() As PLFST_PURCHASERow
            Return CType(Me.NewRow,PLFST_PURCHASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_PURCHASERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_PURCHASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_PURCHASERowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASERowChanged(Me, New PLFST_PURCHASERowChangeEvent(CType(e.Row,PLFST_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_PURCHASERowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASERowChanging(Me, New PLFST_PURCHASERowChangeEvent(CType(e.Row,PLFST_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_PURCHASERowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASERowDeleted(Me, New PLFST_PURCHASERowChangeEvent(CType(e.Row,PLFST_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_PURCHASERowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASERowDeleting(Me, New PLFST_PURCHASERowChangeEvent(CType(e.Row,PLFST_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_PURCHASERow(ByVal row As PLFST_PURCHASERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_PURCHASEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_PURCHASE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_PURCHASE_DETAILRow)
        
        Private columnPLFPURD_KEY As Global.System.Data.DataColumn
        
        Private columnPLFPURD_PLFPURKEY As Global.System.Data.DataColumn
        
        Private columnPLFPURD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFPURD_PLFPURDKEY As Global.System.Data.DataColumn
        
        Private columnPLFPURD_DESC As Global.System.Data.DataColumn
        
        Private columnPLFPURD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFPURD_NOTE As Global.System.Data.DataColumn
        
        Private columnPLFPURD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_PURCHASE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_PLFPURKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_PLFPURKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_PLFPURDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_PLFPURDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFPURD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFPURD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_PURCHASE_DETAILRow
            Get
                Return CType(Me.Rows(index),PLFST_PURCHASE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASE_DETAILRowChanging As PLFST_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASE_DETAILRowChanged As PLFST_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASE_DETAILRowDeleting As PLFST_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_PURCHASE_DETAILRowDeleted As PLFST_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_PURCHASE_DETAILRow(ByVal row As PLFST_PURCHASE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_PURCHASE_DETAILRow(ByVal parentPLFST_PURCHASERowByFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL As PLFST_PURCHASERow, ByVal PLFPURD_SOURCENO As Integer, ByVal PLFPURD_PLFPURDKEY As Integer, ByVal PLFPURD_DESC As String, ByVal PLFPURD_AMOUNT As Decimal, ByVal PLFPURD_NOTE As String, ByVal PLFPURD_DEDUCTIBLE As Boolean) As PLFST_PURCHASE_DETAILRow
            Dim rowPLFST_PURCHASE_DETAILRow As PLFST_PURCHASE_DETAILRow = CType(Me.NewRow,PLFST_PURCHASE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PLFPURD_SOURCENO, PLFPURD_PLFPURDKEY, PLFPURD_DESC, PLFPURD_AMOUNT, PLFPURD_NOTE, PLFPURD_DEDUCTIBLE}
            If (Not (parentPLFST_PURCHASERowByFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentPLFST_PURCHASERowByFK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL(0)
            End If
            rowPLFST_PURCHASE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_PURCHASE_DETAILRow)
            Return rowPLFST_PURCHASE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPLFPURD_KEY(ByVal PLFPURD_KEY As Integer) As PLFST_PURCHASE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {PLFPURD_KEY}),PLFST_PURCHASE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_PURCHASE_DETAILDataTable = CType(MyBase.Clone,PLFST_PURCHASE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_PURCHASE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFPURD_KEY = MyBase.Columns("PLFPURD_KEY")
            Me.columnPLFPURD_PLFPURKEY = MyBase.Columns("PLFPURD_PLFPURKEY")
            Me.columnPLFPURD_SOURCENO = MyBase.Columns("PLFPURD_SOURCENO")
            Me.columnPLFPURD_PLFPURDKEY = MyBase.Columns("PLFPURD_PLFPURDKEY")
            Me.columnPLFPURD_DESC = MyBase.Columns("PLFPURD_DESC")
            Me.columnPLFPURD_AMOUNT = MyBase.Columns("PLFPURD_AMOUNT")
            Me.columnPLFPURD_NOTE = MyBase.Columns("PLFPURD_NOTE")
            Me.columnPLFPURD_DEDUCTIBLE = MyBase.Columns("PLFPURD_DEDUCTIBLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFPURD_KEY = New Global.System.Data.DataColumn("PLFPURD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_KEY)
            Me.columnPLFPURD_PLFPURKEY = New Global.System.Data.DataColumn("PLFPURD_PLFPURKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_PLFPURKEY)
            Me.columnPLFPURD_SOURCENO = New Global.System.Data.DataColumn("PLFPURD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_SOURCENO)
            Me.columnPLFPURD_PLFPURDKEY = New Global.System.Data.DataColumn("PLFPURD_PLFPURDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_PLFPURDKEY)
            Me.columnPLFPURD_DESC = New Global.System.Data.DataColumn("PLFPURD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_DESC)
            Me.columnPLFPURD_AMOUNT = New Global.System.Data.DataColumn("PLFPURD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_AMOUNT)
            Me.columnPLFPURD_NOTE = New Global.System.Data.DataColumn("PLFPURD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_NOTE)
            Me.columnPLFPURD_DEDUCTIBLE = New Global.System.Data.DataColumn("PLFPURD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFPURD_DEDUCTIBLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFPURD_KEY}, true))
            Me.columnPLFPURD_KEY.AutoIncrement = true
            Me.columnPLFPURD_KEY.AllowDBNull = false
            Me.columnPLFPURD_KEY.Unique = true
            Me.columnPLFPURD_DESC.MaxLength = 255
            Me.columnPLFPURD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFPURD_NOTE.MaxLength = 3000
            Me.columnPLFPURD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_PURCHASE_DETAILRow() As PLFST_PURCHASE_DETAILRow
            Return CType(Me.NewRow,PLFST_PURCHASE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_PURCHASE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_PURCHASE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_PURCHASE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASE_DETAILRowChanged(Me, New PLFST_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PLFST_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_PURCHASE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASE_DETAILRowChanging(Me, New PLFST_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PLFST_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_PURCHASE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASE_DETAILRowDeleted(Me, New PLFST_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PLFST_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_PURCHASE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_PURCHASE_DETAILRowDeleting(Me, New PLFST_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PLFST_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_PURCHASE_DETAILRow(ByVal row As PLFST_PURCHASE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_PURCHASE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_DEPRECIATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_DEPRECIATIONRow)
        
        Private columnEXDEP_KEY As Global.System.Data.DataColumn
        
        Private columnEXDEP_EXDEPKEY As Global.System.Data.DataColumn
        
        Private columnEXDEP_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXDEP_DESC As Global.System.Data.DataColumn
        
        Private columnEXDEP_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXDEP_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXDEP_NOTE As Global.System.Data.DataColumn
        
        Private columnEXDEP_DETAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_DEPRECIATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_EXDEPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_EXDEPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEP_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEP_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_DEPRECIATIONRow
            Get
                Return CType(Me.Rows(index),EXPENSES_DEPRECIATIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATIONRowChanging As EXPENSES_DEPRECIATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATIONRowChanged As EXPENSES_DEPRECIATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATIONRowDeleting As EXPENSES_DEPRECIATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATIONRowDeleted As EXPENSES_DEPRECIATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_DEPRECIATIONRow(ByVal row As EXPENSES_DEPRECIATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_DEPRECIATIONRow(ByVal EXDEP_EXDEPKEY As Integer, ByVal EXDEP_SOURCENO As Integer, ByVal EXDEP_DESC As String, ByVal EXDEP_AMOUNT As Decimal, ByVal EXDEP_DEDUCTIBLE As Boolean, ByVal EXDEP_NOTE As String, ByVal EXDEP_DETAIL As String) As EXPENSES_DEPRECIATIONRow
            Dim rowEXPENSES_DEPRECIATIONRow As EXPENSES_DEPRECIATIONRow = CType(Me.NewRow,EXPENSES_DEPRECIATIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EXDEP_EXDEPKEY, EXDEP_SOURCENO, EXDEP_DESC, EXDEP_AMOUNT, EXDEP_DEDUCTIBLE, EXDEP_NOTE, EXDEP_DETAIL}
            rowEXPENSES_DEPRECIATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_DEPRECIATIONRow)
            Return rowEXPENSES_DEPRECIATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_DEPRECIATIONDataTable = CType(MyBase.Clone,EXPENSES_DEPRECIATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_DEPRECIATIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXDEP_KEY = MyBase.Columns("EXDEP_KEY")
            Me.columnEXDEP_EXDEPKEY = MyBase.Columns("EXDEP_EXDEPKEY")
            Me.columnEXDEP_SOURCENO = MyBase.Columns("EXDEP_SOURCENO")
            Me.columnEXDEP_DESC = MyBase.Columns("EXDEP_DESC")
            Me.columnEXDEP_AMOUNT = MyBase.Columns("EXDEP_AMOUNT")
            Me.columnEXDEP_DEDUCTIBLE = MyBase.Columns("EXDEP_DEDUCTIBLE")
            Me.columnEXDEP_NOTE = MyBase.Columns("EXDEP_NOTE")
            Me.columnEXDEP_DETAIL = MyBase.Columns("EXDEP_DETAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXDEP_KEY = New Global.System.Data.DataColumn("EXDEP_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_KEY)
            Me.columnEXDEP_EXDEPKEY = New Global.System.Data.DataColumn("EXDEP_EXDEPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_EXDEPKEY)
            Me.columnEXDEP_SOURCENO = New Global.System.Data.DataColumn("EXDEP_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_SOURCENO)
            Me.columnEXDEP_DESC = New Global.System.Data.DataColumn("EXDEP_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_DESC)
            Me.columnEXDEP_AMOUNT = New Global.System.Data.DataColumn("EXDEP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_AMOUNT)
            Me.columnEXDEP_DEDUCTIBLE = New Global.System.Data.DataColumn("EXDEP_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_DEDUCTIBLE)
            Me.columnEXDEP_NOTE = New Global.System.Data.DataColumn("EXDEP_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_NOTE)
            Me.columnEXDEP_DETAIL = New Global.System.Data.DataColumn("EXDEP_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEP_DETAIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXDEP_KEY}, false))
            Me.columnEXDEP_KEY.AutoIncrement = true
            Me.columnEXDEP_KEY.Unique = true
            Me.columnEXDEP_DESC.MaxLength = 255
            Me.columnEXDEP_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXDEP_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXDEP_NOTE.MaxLength = 3000
            Me.columnEXDEP_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_DEPRECIATIONRow() As EXPENSES_DEPRECIATIONRow
            Return CType(Me.NewRow,EXPENSES_DEPRECIATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_DEPRECIATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_DEPRECIATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_DEPRECIATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATIONRowChanged(Me, New EXPENSES_DEPRECIATIONRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_DEPRECIATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATIONRowChanging(Me, New EXPENSES_DEPRECIATIONRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_DEPRECIATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATIONRowDeleted(Me, New EXPENSES_DEPRECIATIONRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_DEPRECIATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATIONRowDeleting(Me, New EXPENSES_DEPRECIATIONRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_DEPRECIATIONRow(ByVal row As EXPENSES_DEPRECIATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_DEPRECIATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_DEPRECIATION_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_DEPRECIATION_DETAILRow)
        
        Private columnEXDEPD_KEY As Global.System.Data.DataColumn
        
        Private columnEXDEPD_EXDEPKEY As Global.System.Data.DataColumn
        
        Private columnEXDEPD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXDEPD_EXDEPDKEY As Global.System.Data.DataColumn
        
        Private columnEXDEPD_DESC As Global.System.Data.DataColumn
        
        Private columnEXDEPD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXDEPD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXDEPD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_DEPRECIATION_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_EXDEPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_EXDEPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_EXDEPDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_EXDEPDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDEPD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDEPD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_DEPRECIATION_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_DEPRECIATION_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATION_DETAILRowChanging As EXPENSES_DEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATION_DETAILRowChanged As EXPENSES_DEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATION_DETAILRowDeleting As EXPENSES_DEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DEPRECIATION_DETAILRowDeleted As EXPENSES_DEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_DEPRECIATION_DETAILRow(ByVal row As EXPENSES_DEPRECIATION_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_DEPRECIATION_DETAILRow(ByVal parentEXPENSES_DEPRECIATIONRowByFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL As EXPENSES_DEPRECIATIONRow, ByVal EXDEPD_SOURCENO As Integer, ByVal EXDEPD_EXDEPDKEY As Integer, ByVal EXDEPD_DESC As String, ByVal EXDEPD_AMOUNT As Decimal, ByVal EXDEPD_DEDUCTIBLE As Boolean, ByVal EXDEPD_NOTE As String) As EXPENSES_DEPRECIATION_DETAILRow
            Dim rowEXPENSES_DEPRECIATION_DETAILRow As EXPENSES_DEPRECIATION_DETAILRow = CType(Me.NewRow,EXPENSES_DEPRECIATION_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, EXDEPD_SOURCENO, EXDEPD_EXDEPDKEY, EXDEPD_DESC, EXDEPD_AMOUNT, EXDEPD_DEDUCTIBLE, EXDEPD_NOTE}
            If (Not (parentEXPENSES_DEPRECIATIONRowByFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_DEPRECIATIONRowByFK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL(0)
            End If
            rowEXPENSES_DEPRECIATION_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_DEPRECIATION_DETAILRow)
            Return rowEXPENSES_DEPRECIATION_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXDEPD_KEY(ByVal EXDEPD_KEY As Integer) As EXPENSES_DEPRECIATION_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXDEPD_KEY}),EXPENSES_DEPRECIATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_DEPRECIATION_DETAILDataTable = CType(MyBase.Clone,EXPENSES_DEPRECIATION_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_DEPRECIATION_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXDEPD_KEY = MyBase.Columns("EXDEPD_KEY")
            Me.columnEXDEPD_EXDEPKEY = MyBase.Columns("EXDEPD_EXDEPKEY")
            Me.columnEXDEPD_SOURCENO = MyBase.Columns("EXDEPD_SOURCENO")
            Me.columnEXDEPD_EXDEPDKEY = MyBase.Columns("EXDEPD_EXDEPDKEY")
            Me.columnEXDEPD_DESC = MyBase.Columns("EXDEPD_DESC")
            Me.columnEXDEPD_AMOUNT = MyBase.Columns("EXDEPD_AMOUNT")
            Me.columnEXDEPD_DEDUCTIBLE = MyBase.Columns("EXDEPD_DEDUCTIBLE")
            Me.columnEXDEPD_NOTE = MyBase.Columns("EXDEPD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXDEPD_KEY = New Global.System.Data.DataColumn("EXDEPD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_KEY)
            Me.columnEXDEPD_EXDEPKEY = New Global.System.Data.DataColumn("EXDEPD_EXDEPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_EXDEPKEY)
            Me.columnEXDEPD_SOURCENO = New Global.System.Data.DataColumn("EXDEPD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_SOURCENO)
            Me.columnEXDEPD_EXDEPDKEY = New Global.System.Data.DataColumn("EXDEPD_EXDEPDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_EXDEPDKEY)
            Me.columnEXDEPD_DESC = New Global.System.Data.DataColumn("EXDEPD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_DESC)
            Me.columnEXDEPD_AMOUNT = New Global.System.Data.DataColumn("EXDEPD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_AMOUNT)
            Me.columnEXDEPD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXDEPD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_DEDUCTIBLE)
            Me.columnEXDEPD_NOTE = New Global.System.Data.DataColumn("EXDEPD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDEPD_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXDEPD_KEY}, true))
            Me.columnEXDEPD_KEY.AutoIncrement = true
            Me.columnEXDEPD_KEY.AllowDBNull = false
            Me.columnEXDEPD_KEY.Unique = true
            Me.columnEXDEPD_DESC.MaxLength = 255
            Me.columnEXDEPD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXDEPD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXDEPD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_DEPRECIATION_DETAILRow() As EXPENSES_DEPRECIATION_DETAILRow
            Return CType(Me.NewRow,EXPENSES_DEPRECIATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_DEPRECIATION_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_DEPRECIATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_DEPRECIATION_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATION_DETAILRowChanged(Me, New EXPENSES_DEPRECIATION_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_DEPRECIATION_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATION_DETAILRowChanging(Me, New EXPENSES_DEPRECIATION_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_DEPRECIATION_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATION_DETAILRowDeleted(Me, New EXPENSES_DEPRECIATION_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_DEPRECIATION_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DEPRECIATION_DETAILRowDeleting(Me, New EXPENSES_DEPRECIATION_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_DEPRECIATION_DETAILRow(ByVal row As EXPENSES_DEPRECIATION_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_DEPRECIATION_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_ALLOWDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_ALLOWRow)
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_ALLOW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_ALLOWRow
            Get
                Return CType(Me.Rows(index),EXPENSES_ALLOWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOWRowChanging As EXPENSES_ALLOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOWRowChanged As EXPENSES_ALLOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOWRowDeleting As EXPENSES_ALLOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOWRowDeleted As EXPENSES_ALLOWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_ALLOWRow(ByVal row As EXPENSES_ALLOWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_ALLOWRow(ByVal EXA_EXAKEY As Integer, ByVal EXA_SOURCENO As Integer, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_DEDUCTIBLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String) As EXPENSES_ALLOWRow
            Dim rowEXPENSES_ALLOWRow As EXPENSES_ALLOWRow = CType(Me.NewRow,EXPENSES_ALLOWRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EXA_EXAKEY, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_DEDUCTIBLE, EXA_NOTE, EXA_DETAIL}
            rowEXPENSES_ALLOWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_ALLOWRow)
            Return rowEXPENSES_ALLOWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_ALLOWDataTable = CType(MyBase.Clone,EXPENSES_ALLOWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_ALLOWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_DEDUCTIBLE = MyBase.Columns("EXA_DEDUCTIBLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DEDUCTIBLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_KEY}, false))
            Me.columnEXA_KEY.AutoIncrement = true
            Me.columnEXA_KEY.Unique = true
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXA_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXA_NOTE.MaxLength = 3000
            Me.columnEXA_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_ALLOWRow() As EXPENSES_ALLOWRow
            Return CType(Me.NewRow,EXPENSES_ALLOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_ALLOWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_ALLOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_ALLOWRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOWRowChanged(Me, New EXPENSES_ALLOWRowChangeEvent(CType(e.Row,EXPENSES_ALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_ALLOWRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOWRowChanging(Me, New EXPENSES_ALLOWRowChangeEvent(CType(e.Row,EXPENSES_ALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_ALLOWRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOWRowDeleted(Me, New EXPENSES_ALLOWRowChangeEvent(CType(e.Row,EXPENSES_ALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_ALLOWRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOWRowDeleting(Me, New EXPENSES_ALLOWRowChangeEvent(CType(e.Row,EXPENSES_ALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_ALLOWRow(ByVal row As EXPENSES_ALLOWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_ALLOWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_ALLOW_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_ALLOW_DETAILRow)
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_ALLOW_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_ALLOW_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_ALLOW_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOW_DETAILRowChanging As EXPENSES_ALLOW_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOW_DETAILRowChanged As EXPENSES_ALLOW_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOW_DETAILRowDeleting As EXPENSES_ALLOW_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ALLOW_DETAILRowDeleted As EXPENSES_ALLOW_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_ALLOW_DETAILRow(ByVal row As EXPENSES_ALLOW_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_ALLOW_DETAILRow(ByVal parentEXPENSES_ALLOWRowByFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL As EXPENSES_ALLOWRow, ByVal EXAD_SOURCENO As Integer, ByVal EXAD_EXADKEY As Integer, ByVal EXAD_DESC As String, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_DEDUCTIBLE As Boolean, ByVal EXAD_NOTE As String) As EXPENSES_ALLOW_DETAILRow
            Dim rowEXPENSES_ALLOW_DETAILRow As EXPENSES_ALLOW_DETAILRow = CType(Me.NewRow,EXPENSES_ALLOW_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, EXAD_SOURCENO, EXAD_EXADKEY, EXAD_DESC, EXAD_AMOUNT, EXAD_DEDUCTIBLE, EXAD_NOTE}
            If (Not (parentEXPENSES_ALLOWRowByFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_ALLOWRowByFK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL(0)
            End If
            rowEXPENSES_ALLOW_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_ALLOW_DETAILRow)
            Return rowEXPENSES_ALLOW_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXAD_KEY(ByVal EXAD_KEY As Integer) As EXPENSES_ALLOW_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXAD_KEY}),EXPENSES_ALLOW_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_ALLOW_DETAILDataTable = CType(MyBase.Clone,EXPENSES_ALLOW_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_ALLOW_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_DEDUCTIBLE = MyBase.Columns("EXAD_DEDUCTIBLE")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DEDUCTIBLE)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXAD_KEY}, true))
            Me.columnEXAD_KEY.AutoIncrement = true
            Me.columnEXAD_KEY.AllowDBNull = false
            Me.columnEXAD_KEY.Unique = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXAD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXAD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_ALLOW_DETAILRow() As EXPENSES_ALLOW_DETAILRow
            Return CType(Me.NewRow,EXPENSES_ALLOW_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_ALLOW_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_ALLOW_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_ALLOW_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOW_DETAILRowChanged(Me, New EXPENSES_ALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_ALLOW_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOW_DETAILRowChanging(Me, New EXPENSES_ALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_ALLOW_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOW_DETAILRowDeleted(Me, New EXPENSES_ALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_ALLOW_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ALLOW_DETAILRowDeleting(Me, New EXPENSES_ALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_ALLOW_DETAILRow(ByVal row As EXPENSES_ALLOW_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_ALLOW_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_NONALLOWDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_NONALLOWRow)
        
        Private columnEXNA_KEY As Global.System.Data.DataColumn
        
        Private columnEXNA_EXNAKEY As Global.System.Data.DataColumn
        
        Private columnEXNA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXNA_DESC As Global.System.Data.DataColumn
        
        Private columnEXNA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXNA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXNA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXNA_DETAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_NONALLOW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_EXNAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_EXNAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_NONALLOWRow
            Get
                Return CType(Me.Rows(index),EXPENSES_NONALLOWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOWRowChanging As EXPENSES_NONALLOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOWRowChanged As EXPENSES_NONALLOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOWRowDeleting As EXPENSES_NONALLOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOWRowDeleted As EXPENSES_NONALLOWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_NONALLOWRow(ByVal row As EXPENSES_NONALLOWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_NONALLOWRow(ByVal EXNA_EXNAKEY As Integer, ByVal EXNA_SOURCENO As Integer, ByVal EXNA_DESC As String, ByVal EXNA_AMOUNT As Decimal, ByVal EXNA_DEDUCTIBLE As Boolean, ByVal EXNA_NOTE As String, ByVal EXNA_DETAIL As String) As EXPENSES_NONALLOWRow
            Dim rowEXPENSES_NONALLOWRow As EXPENSES_NONALLOWRow = CType(Me.NewRow,EXPENSES_NONALLOWRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EXNA_EXNAKEY, EXNA_SOURCENO, EXNA_DESC, EXNA_AMOUNT, EXNA_DEDUCTIBLE, EXNA_NOTE, EXNA_DETAIL}
            rowEXPENSES_NONALLOWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_NONALLOWRow)
            Return rowEXPENSES_NONALLOWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_NONALLOWDataTable = CType(MyBase.Clone,EXPENSES_NONALLOWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_NONALLOWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXNA_KEY = MyBase.Columns("EXNA_KEY")
            Me.columnEXNA_EXNAKEY = MyBase.Columns("EXNA_EXNAKEY")
            Me.columnEXNA_SOURCENO = MyBase.Columns("EXNA_SOURCENO")
            Me.columnEXNA_DESC = MyBase.Columns("EXNA_DESC")
            Me.columnEXNA_AMOUNT = MyBase.Columns("EXNA_AMOUNT")
            Me.columnEXNA_DEDUCTIBLE = MyBase.Columns("EXNA_DEDUCTIBLE")
            Me.columnEXNA_NOTE = MyBase.Columns("EXNA_NOTE")
            Me.columnEXNA_DETAIL = MyBase.Columns("EXNA_DETAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXNA_KEY = New Global.System.Data.DataColumn("EXNA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_KEY)
            Me.columnEXNA_EXNAKEY = New Global.System.Data.DataColumn("EXNA_EXNAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_EXNAKEY)
            Me.columnEXNA_SOURCENO = New Global.System.Data.DataColumn("EXNA_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_SOURCENO)
            Me.columnEXNA_DESC = New Global.System.Data.DataColumn("EXNA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_DESC)
            Me.columnEXNA_AMOUNT = New Global.System.Data.DataColumn("EXNA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_AMOUNT)
            Me.columnEXNA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXNA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_DEDUCTIBLE)
            Me.columnEXNA_NOTE = New Global.System.Data.DataColumn("EXNA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_NOTE)
            Me.columnEXNA_DETAIL = New Global.System.Data.DataColumn("EXNA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNA_DETAIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXNA_KEY}, false))
            Me.columnEXNA_KEY.AutoIncrement = true
            Me.columnEXNA_KEY.Unique = true
            Me.columnEXNA_DESC.MaxLength = 255
            Me.columnEXNA_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXNA_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXNA_NOTE.MaxLength = 3000
            Me.columnEXNA_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_NONALLOWRow() As EXPENSES_NONALLOWRow
            Return CType(Me.NewRow,EXPENSES_NONALLOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_NONALLOWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_NONALLOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_NONALLOWRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOWRowChanged(Me, New EXPENSES_NONALLOWRowChangeEvent(CType(e.Row,EXPENSES_NONALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_NONALLOWRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOWRowChanging(Me, New EXPENSES_NONALLOWRowChangeEvent(CType(e.Row,EXPENSES_NONALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_NONALLOWRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOWRowDeleted(Me, New EXPENSES_NONALLOWRowChangeEvent(CType(e.Row,EXPENSES_NONALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_NONALLOWRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOWRowDeleting(Me, New EXPENSES_NONALLOWRowChangeEvent(CType(e.Row,EXPENSES_NONALLOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_NONALLOWRow(ByVal row As EXPENSES_NONALLOWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_NONALLOWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_NONALLOW_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_NONALLOW_DETAILRow)
        
        Private columnEXNAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXNAD_EXNAKEY As Global.System.Data.DataColumn
        
        Private columnEXNAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXNAD_EXNADKEY As Global.System.Data.DataColumn
        
        Private columnEXNAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXNAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXNAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXNAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_NONALLOW_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_EXNAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_EXNAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_EXNADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_EXNADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXNAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXNAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_NONALLOW_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_NONALLOW_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOW_DETAILRowChanging As EXPENSES_NONALLOW_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOW_DETAILRowChanged As EXPENSES_NONALLOW_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOW_DETAILRowDeleting As EXPENSES_NONALLOW_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_NONALLOW_DETAILRowDeleted As EXPENSES_NONALLOW_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_NONALLOW_DETAILRow(ByVal row As EXPENSES_NONALLOW_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_NONALLOW_DETAILRow(ByVal parentEXPENSES_NONALLOWRowByFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL As EXPENSES_NONALLOWRow, ByVal EXNAD_SOURCENO As Integer, ByVal EXNAD_EXNADKEY As Integer, ByVal EXNAD_DESC As String, ByVal EXNAD_DEDUCTIBLE As Boolean, ByVal EXNAD_AMOUNT As Decimal, ByVal EXNAD_NOTE As String) As EXPENSES_NONALLOW_DETAILRow
            Dim rowEXPENSES_NONALLOW_DETAILRow As EXPENSES_NONALLOW_DETAILRow = CType(Me.NewRow,EXPENSES_NONALLOW_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, EXNAD_SOURCENO, EXNAD_EXNADKEY, EXNAD_DESC, EXNAD_DEDUCTIBLE, EXNAD_AMOUNT, EXNAD_NOTE}
            If (Not (parentEXPENSES_NONALLOWRowByFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_NONALLOWRowByFK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL(0)
            End If
            rowEXPENSES_NONALLOW_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_NONALLOW_DETAILRow)
            Return rowEXPENSES_NONALLOW_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXNAD_KEY(ByVal EXNAD_KEY As Integer) As EXPENSES_NONALLOW_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXNAD_KEY}),EXPENSES_NONALLOW_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_NONALLOW_DETAILDataTable = CType(MyBase.Clone,EXPENSES_NONALLOW_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_NONALLOW_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXNAD_KEY = MyBase.Columns("EXNAD_KEY")
            Me.columnEXNAD_EXNAKEY = MyBase.Columns("EXNAD_EXNAKEY")
            Me.columnEXNAD_SOURCENO = MyBase.Columns("EXNAD_SOURCENO")
            Me.columnEXNAD_EXNADKEY = MyBase.Columns("EXNAD_EXNADKEY")
            Me.columnEXNAD_DESC = MyBase.Columns("EXNAD_DESC")
            Me.columnEXNAD_DEDUCTIBLE = MyBase.Columns("EXNAD_DEDUCTIBLE")
            Me.columnEXNAD_AMOUNT = MyBase.Columns("EXNAD_AMOUNT")
            Me.columnEXNAD_NOTE = MyBase.Columns("EXNAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXNAD_KEY = New Global.System.Data.DataColumn("EXNAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_KEY)
            Me.columnEXNAD_EXNAKEY = New Global.System.Data.DataColumn("EXNAD_EXNAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_EXNAKEY)
            Me.columnEXNAD_SOURCENO = New Global.System.Data.DataColumn("EXNAD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_SOURCENO)
            Me.columnEXNAD_EXNADKEY = New Global.System.Data.DataColumn("EXNAD_EXNADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_EXNADKEY)
            Me.columnEXNAD_DESC = New Global.System.Data.DataColumn("EXNAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_DESC)
            Me.columnEXNAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXNAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_DEDUCTIBLE)
            Me.columnEXNAD_AMOUNT = New Global.System.Data.DataColumn("EXNAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_AMOUNT)
            Me.columnEXNAD_NOTE = New Global.System.Data.DataColumn("EXNAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXNAD_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXNAD_KEY}, true))
            Me.columnEXNAD_KEY.AutoIncrement = true
            Me.columnEXNAD_KEY.AllowDBNull = false
            Me.columnEXNAD_KEY.Unique = true
            Me.columnEXNAD_DESC.MaxLength = 255
            Me.columnEXNAD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXNAD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXNAD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_NONALLOW_DETAILRow() As EXPENSES_NONALLOW_DETAILRow
            Return CType(Me.NewRow,EXPENSES_NONALLOW_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_NONALLOW_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_NONALLOW_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_NONALLOW_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOW_DETAILRowChanged(Me, New EXPENSES_NONALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_NONALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_NONALLOW_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOW_DETAILRowChanging(Me, New EXPENSES_NONALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_NONALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_NONALLOW_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOW_DETAILRowDeleted(Me, New EXPENSES_NONALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_NONALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_NONALLOW_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_NONALLOW_DETAILRowDeleting(Me, New EXPENSES_NONALLOW_DETAILRowChangeEvent(CType(e.Row,EXPENSES_NONALLOW_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_NONALLOW_DETAILRow(ByVal row As EXPENSES_NONALLOW_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_NONALLOW_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_CLOSESTOCKDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_CLOSESTOCKRow)
        
        Private columnPLFCS_KEY As Global.System.Data.DataColumn
        
        Private columnPLFCS_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPLFCS_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFCS_DESC As Global.System.Data.DataColumn
        
        Private columnPLFCS_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFCS_NOTE As Global.System.Data.DataColumn
        
        Private columnPLFCS_DETAIL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_CLOSESTOCK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCS_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCS_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_CLOSESTOCKRow
            Get
                Return CType(Me.Rows(index),PLFST_CLOSESTOCKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCKRowChanging As PLFST_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCKRowChanged As PLFST_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCKRowDeleting As PLFST_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCKRowDeleted As PLFST_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_CLOSESTOCKRow(ByVal row As PLFST_CLOSESTOCKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_CLOSESTOCKRow(ByVal PLFCS_PLFCSKEY As Integer, ByVal PLFCS_SOURCENO As Integer, ByVal PLFCS_DESC As String, ByVal PLFCS_AMOUNT As Decimal, ByVal PLFCS_NOTE As String, ByVal PLFCS_DETAIL As String) As PLFST_CLOSESTOCKRow
            Dim rowPLFST_CLOSESTOCKRow As PLFST_CLOSESTOCKRow = CType(Me.NewRow,PLFST_CLOSESTOCKRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PLFCS_PLFCSKEY, PLFCS_SOURCENO, PLFCS_DESC, PLFCS_AMOUNT, PLFCS_NOTE, PLFCS_DETAIL}
            rowPLFST_CLOSESTOCKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_CLOSESTOCKRow)
            Return rowPLFST_CLOSESTOCKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_CLOSESTOCKDataTable = CType(MyBase.Clone,PLFST_CLOSESTOCKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_CLOSESTOCKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFCS_KEY = MyBase.Columns("PLFCS_KEY")
            Me.columnPLFCS_PLFCSKEY = MyBase.Columns("PLFCS_PLFCSKEY")
            Me.columnPLFCS_SOURCENO = MyBase.Columns("PLFCS_SOURCENO")
            Me.columnPLFCS_DESC = MyBase.Columns("PLFCS_DESC")
            Me.columnPLFCS_AMOUNT = MyBase.Columns("PLFCS_AMOUNT")
            Me.columnPLFCS_NOTE = MyBase.Columns("PLFCS_NOTE")
            Me.columnPLFCS_DETAIL = MyBase.Columns("PLFCS_DETAIL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFCS_KEY = New Global.System.Data.DataColumn("PLFCS_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_KEY)
            Me.columnPLFCS_PLFCSKEY = New Global.System.Data.DataColumn("PLFCS_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_PLFCSKEY)
            Me.columnPLFCS_SOURCENO = New Global.System.Data.DataColumn("PLFCS_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_SOURCENO)
            Me.columnPLFCS_DESC = New Global.System.Data.DataColumn("PLFCS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_DESC)
            Me.columnPLFCS_AMOUNT = New Global.System.Data.DataColumn("PLFCS_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_AMOUNT)
            Me.columnPLFCS_NOTE = New Global.System.Data.DataColumn("PLFCS_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_NOTE)
            Me.columnPLFCS_DETAIL = New Global.System.Data.DataColumn("PLFCS_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCS_DETAIL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFCS_KEY}, false))
            Me.columnPLFCS_KEY.AutoIncrement = true
            Me.columnPLFCS_KEY.Unique = true
            Me.columnPLFCS_DESC.MaxLength = 255
            Me.columnPLFCS_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFCS_NOTE.MaxLength = 3000
            Me.columnPLFCS_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_CLOSESTOCKRow() As PLFST_CLOSESTOCKRow
            Return CType(Me.NewRow,PLFST_CLOSESTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_CLOSESTOCKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_CLOSESTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_CLOSESTOCKRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCKRowChanged(Me, New PLFST_CLOSESTOCKRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_CLOSESTOCKRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCKRowChanging(Me, New PLFST_CLOSESTOCKRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_CLOSESTOCKRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCKRowDeleted(Me, New PLFST_CLOSESTOCKRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_CLOSESTOCKRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCKRowDeleting(Me, New PLFST_CLOSESTOCKRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_CLOSESTOCKRow(ByVal row As PLFST_CLOSESTOCKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_CLOSESTOCKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLFST_CLOSESTOCK_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PLFST_CLOSESTOCK_DETAILRow)
        
        Private columnPLFCSD_KEY As Global.System.Data.DataColumn
        
        Private columnPLFCSD_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPLFCSD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLFCSD_PLFCSDKEY As Global.System.Data.DataColumn
        
        Private columnPLFCSD_DESC As Global.System.Data.DataColumn
        
        Private columnPLFCSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLFCSD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLFST_CLOSESTOCK_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_PLFCSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_PLFCSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLFCSD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLFCSD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLFST_CLOSESTOCK_DETAILRow
            Get
                Return CType(Me.Rows(index),PLFST_CLOSESTOCK_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCK_DETAILRowChanging As PLFST_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCK_DETAILRowChanged As PLFST_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCK_DETAILRowDeleting As PLFST_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLFST_CLOSESTOCK_DETAILRowDeleted As PLFST_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLFST_CLOSESTOCK_DETAILRow(ByVal row As PLFST_CLOSESTOCK_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLFST_CLOSESTOCK_DETAILRow(ByVal parentPLFST_CLOSESTOCKRowByFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL As PLFST_CLOSESTOCKRow, ByVal PLFCSD_SOURCENO As Integer, ByVal PLFCSD_PLFCSDKEY As Integer, ByVal PLFCSD_DESC As String, ByVal PLFCSD_AMOUNT As Decimal, ByVal PLFCSD_NOTE As String) As PLFST_CLOSESTOCK_DETAILRow
            Dim rowPLFST_CLOSESTOCK_DETAILRow As PLFST_CLOSESTOCK_DETAILRow = CType(Me.NewRow,PLFST_CLOSESTOCK_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PLFCSD_SOURCENO, PLFCSD_PLFCSDKEY, PLFCSD_DESC, PLFCSD_AMOUNT, PLFCSD_NOTE}
            If (Not (parentPLFST_CLOSESTOCKRowByFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentPLFST_CLOSESTOCKRowByFK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL(0)
            End If
            rowPLFST_CLOSESTOCK_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLFST_CLOSESTOCK_DETAILRow)
            Return rowPLFST_CLOSESTOCK_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPLFCSD_KEY(ByVal PLFCSD_KEY As Integer) As PLFST_CLOSESTOCK_DETAILRow
            Return CType(Me.Rows.Find(New Object() {PLFCSD_KEY}),PLFST_CLOSESTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLFST_CLOSESTOCK_DETAILDataTable = CType(MyBase.Clone,PLFST_CLOSESTOCK_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLFST_CLOSESTOCK_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLFCSD_KEY = MyBase.Columns("PLFCSD_KEY")
            Me.columnPLFCSD_PLFCSKEY = MyBase.Columns("PLFCSD_PLFCSKEY")
            Me.columnPLFCSD_SOURCENO = MyBase.Columns("PLFCSD_SOURCENO")
            Me.columnPLFCSD_PLFCSDKEY = MyBase.Columns("PLFCSD_PLFCSDKEY")
            Me.columnPLFCSD_DESC = MyBase.Columns("PLFCSD_DESC")
            Me.columnPLFCSD_AMOUNT = MyBase.Columns("PLFCSD_AMOUNT")
            Me.columnPLFCSD_NOTE = MyBase.Columns("PLFCSD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLFCSD_KEY = New Global.System.Data.DataColumn("PLFCSD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_KEY)
            Me.columnPLFCSD_PLFCSKEY = New Global.System.Data.DataColumn("PLFCSD_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_PLFCSKEY)
            Me.columnPLFCSD_SOURCENO = New Global.System.Data.DataColumn("PLFCSD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_SOURCENO)
            Me.columnPLFCSD_PLFCSDKEY = New Global.System.Data.DataColumn("PLFCSD_PLFCSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_PLFCSDKEY)
            Me.columnPLFCSD_DESC = New Global.System.Data.DataColumn("PLFCSD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_DESC)
            Me.columnPLFCSD_AMOUNT = New Global.System.Data.DataColumn("PLFCSD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_AMOUNT)
            Me.columnPLFCSD_NOTE = New Global.System.Data.DataColumn("PLFCSD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLFCSD_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPLFCSD_KEY}, true))
            Me.columnPLFCSD_KEY.AutoIncrement = true
            Me.columnPLFCSD_KEY.AllowDBNull = false
            Me.columnPLFCSD_KEY.Unique = true
            Me.columnPLFCSD_DESC.MaxLength = 255
            Me.columnPLFCSD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnPLFCSD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLFST_CLOSESTOCK_DETAILRow() As PLFST_CLOSESTOCK_DETAILRow
            Return CType(Me.NewRow,PLFST_CLOSESTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLFST_CLOSESTOCK_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLFST_CLOSESTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLFST_CLOSESTOCK_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCK_DETAILRowChanged(Me, New PLFST_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLFST_CLOSESTOCK_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCK_DETAILRowChanging(Me, New PLFST_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLFST_CLOSESTOCK_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCK_DETAILRowDeleted(Me, New PLFST_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLFST_CLOSESTOCK_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLFST_CLOSESTOCK_DETAILRowDeleting(Me, New PLFST_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PLFST_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLFST_CLOSESTOCK_DETAILRow(ByVal row As PLFST_CLOSESTOCK_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLFST_CLOSESTOCK_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NONSOURCE_BUSINESSINCOMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of NONSOURCE_BUSINESSINCOMERow)
        
        Private columnNSBI_KEY As Global.System.Data.DataColumn
        
        Private columnNSBI_NSBIKEY As Global.System.Data.DataColumn
        
        Private columnNSBI_DESC As Global.System.Data.DataColumn
        
        Private columnNSBI_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNSBI_NOTE As Global.System.Data.DataColumn
        
        Private columnNSBI_DETAIL As Global.System.Data.DataColumn
        
        Private columnNSBI_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NONSOURCE_BUSINESSINCOME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_NSBIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_NSBIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBI_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NONSOURCE_BUSINESSINCOMERow
            Get
                Return CType(Me.Rows(index),NONSOURCE_BUSINESSINCOMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOMERowChanging As NONSOURCE_BUSINESSINCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOMERowChanged As NONSOURCE_BUSINESSINCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOMERowDeleting As NONSOURCE_BUSINESSINCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOMERowDeleted As NONSOURCE_BUSINESSINCOMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddNONSOURCE_BUSINESSINCOMERow(ByVal row As NONSOURCE_BUSINESSINCOMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddNONSOURCE_BUSINESSINCOMERow(ByVal NSBI_DESC As String, ByVal NSBI_AMOUNT As Decimal, ByVal NSBI_NOTE As String, ByVal NSBI_DETAIL As String, ByVal NSBI_SOURCENO As Double) As NONSOURCE_BUSINESSINCOMERow
            Dim rowNONSOURCE_BUSINESSINCOMERow As NONSOURCE_BUSINESSINCOMERow = CType(Me.NewRow,NONSOURCE_BUSINESSINCOMERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, NSBI_DESC, NSBI_AMOUNT, NSBI_NOTE, NSBI_DETAIL, NSBI_SOURCENO}
            rowNONSOURCE_BUSINESSINCOMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNONSOURCE_BUSINESSINCOMERow)
            Return rowNONSOURCE_BUSINESSINCOMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNSBI_NSBIKEY(ByVal NSBI_NSBIKEY As Integer) As NONSOURCE_BUSINESSINCOMERow
            Return CType(Me.Rows.Find(New Object() {NSBI_NSBIKEY}),NONSOURCE_BUSINESSINCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NONSOURCE_BUSINESSINCOMEDataTable = CType(MyBase.Clone,NONSOURCE_BUSINESSINCOMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NONSOURCE_BUSINESSINCOMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNSBI_KEY = MyBase.Columns("NSBI_KEY")
            Me.columnNSBI_NSBIKEY = MyBase.Columns("NSBI_NSBIKEY")
            Me.columnNSBI_DESC = MyBase.Columns("NSBI_DESC")
            Me.columnNSBI_AMOUNT = MyBase.Columns("NSBI_AMOUNT")
            Me.columnNSBI_NOTE = MyBase.Columns("NSBI_NOTE")
            Me.columnNSBI_DETAIL = MyBase.Columns("NSBI_DETAIL")
            Me.columnNSBI_SOURCENO = MyBase.Columns("NSBI_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNSBI_KEY = New Global.System.Data.DataColumn("NSBI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_KEY)
            Me.columnNSBI_NSBIKEY = New Global.System.Data.DataColumn("NSBI_NSBIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_NSBIKEY)
            Me.columnNSBI_DESC = New Global.System.Data.DataColumn("NSBI_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_DESC)
            Me.columnNSBI_AMOUNT = New Global.System.Data.DataColumn("NSBI_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_AMOUNT)
            Me.columnNSBI_NOTE = New Global.System.Data.DataColumn("NSBI_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_NOTE)
            Me.columnNSBI_DETAIL = New Global.System.Data.DataColumn("NSBI_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_DETAIL)
            Me.columnNSBI_SOURCENO = New Global.System.Data.DataColumn("NSBI_SOURCENO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBI_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNSBI_NSBIKEY}, true))
            Me.columnNSBI_KEY.AutoIncrement = true
            Me.columnNSBI_NSBIKEY.AutoIncrement = true
            Me.columnNSBI_NSBIKEY.AllowDBNull = false
            Me.columnNSBI_NSBIKEY.Unique = true
            Me.columnNSBI_DESC.MaxLength = 255
            Me.columnNSBI_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNSBI_NOTE.MaxLength = 3000
            Me.columnNSBI_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewNONSOURCE_BUSINESSINCOMERow() As NONSOURCE_BUSINESSINCOMERow
            Return CType(Me.NewRow,NONSOURCE_BUSINESSINCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NONSOURCE_BUSINESSINCOMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NONSOURCE_BUSINESSINCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOMERowChangedEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOMERowChanged(Me, New NONSOURCE_BUSINESSINCOMERowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOMERowChangingEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOMERowChanging(Me, New NONSOURCE_BUSINESSINCOMERowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOMERowDeletedEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOMERowDeleted(Me, New NONSOURCE_BUSINESSINCOMERowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOMERowDeletingEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOMERowDeleting(Me, New NONSOURCE_BUSINESSINCOMERowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveNONSOURCE_BUSINESSINCOMERow(ByVal row As NONSOURCE_BUSINESSINCOMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NONSOURCE_BUSINESSINCOMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NONSOURCE_BUSINESSINCOME_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of NONSOURCE_BUSINESSINCOME_DETAILRow)
        
        Private columnNSBID_KEY As Global.System.Data.DataColumn
        
        Private columnNSBID_NSBIKEY As Global.System.Data.DataColumn
        
        Private columnNSBID_NSBIDKEY As Global.System.Data.DataColumn
        
        Private columnNSBID_DESC As Global.System.Data.DataColumn
        
        Private columnNSBID_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNSBID_NOTE As Global.System.Data.DataColumn
        
        Private columnNSBID_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NONSOURCE_BUSINESSINCOME_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_NSBIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_NSBIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_NSBIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_NSBIDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSBID_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSBID_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NONSOURCE_BUSINESSINCOME_DETAILRow
            Get
                Return CType(Me.Rows(index),NONSOURCE_BUSINESSINCOME_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOME_DETAILRowChanging As NONSOURCE_BUSINESSINCOME_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOME_DETAILRowChanged As NONSOURCE_BUSINESSINCOME_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOME_DETAILRowDeleting As NONSOURCE_BUSINESSINCOME_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NONSOURCE_BUSINESSINCOME_DETAILRowDeleted As NONSOURCE_BUSINESSINCOME_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddNONSOURCE_BUSINESSINCOME_DETAILRow(ByVal row As NONSOURCE_BUSINESSINCOME_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddNONSOURCE_BUSINESSINCOME_DETAILRow(ByVal NSBID_KEY As Integer, ByVal parentNONSOURCE_BUSINESSINCOMERowByFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL As NONSOURCE_BUSINESSINCOMERow, ByVal NSBID_DESC As String, ByVal NSBID_AMOUNT As Decimal, ByVal NSBID_NOTE As String, ByVal NSBID_SOURCENO As Double) As NONSOURCE_BUSINESSINCOME_DETAILRow
            Dim rowNONSOURCE_BUSINESSINCOME_DETAILRow As NONSOURCE_BUSINESSINCOME_DETAILRow = CType(Me.NewRow,NONSOURCE_BUSINESSINCOME_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NSBID_KEY, Nothing, Nothing, NSBID_DESC, NSBID_AMOUNT, NSBID_NOTE, NSBID_SOURCENO}
            If (Not (parentNONSOURCE_BUSINESSINCOMERowByFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentNONSOURCE_BUSINESSINCOMERowByFK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL(1)
            End If
            rowNONSOURCE_BUSINESSINCOME_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNONSOURCE_BUSINESSINCOME_DETAILRow)
            Return rowNONSOURCE_BUSINESSINCOME_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNSBID_NSBIDKEY(ByVal NSBID_NSBIDKEY As Integer) As NONSOURCE_BUSINESSINCOME_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NSBID_NSBIDKEY}),NONSOURCE_BUSINESSINCOME_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NONSOURCE_BUSINESSINCOME_DETAILDataTable = CType(MyBase.Clone,NONSOURCE_BUSINESSINCOME_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NONSOURCE_BUSINESSINCOME_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNSBID_KEY = MyBase.Columns("NSBID_KEY")
            Me.columnNSBID_NSBIKEY = MyBase.Columns("NSBID_NSBIKEY")
            Me.columnNSBID_NSBIDKEY = MyBase.Columns("NSBID_NSBIDKEY")
            Me.columnNSBID_DESC = MyBase.Columns("NSBID_DESC")
            Me.columnNSBID_AMOUNT = MyBase.Columns("NSBID_AMOUNT")
            Me.columnNSBID_NOTE = MyBase.Columns("NSBID_NOTE")
            Me.columnNSBID_SOURCENO = MyBase.Columns("NSBID_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNSBID_KEY = New Global.System.Data.DataColumn("NSBID_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_KEY)
            Me.columnNSBID_NSBIKEY = New Global.System.Data.DataColumn("NSBID_NSBIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_NSBIKEY)
            Me.columnNSBID_NSBIDKEY = New Global.System.Data.DataColumn("NSBID_NSBIDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_NSBIDKEY)
            Me.columnNSBID_DESC = New Global.System.Data.DataColumn("NSBID_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_DESC)
            Me.columnNSBID_AMOUNT = New Global.System.Data.DataColumn("NSBID_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_AMOUNT)
            Me.columnNSBID_NOTE = New Global.System.Data.DataColumn("NSBID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_NOTE)
            Me.columnNSBID_SOURCENO = New Global.System.Data.DataColumn("NSBID_SOURCENO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSBID_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNSBID_NSBIDKEY}, true))
            Me.columnNSBID_NSBIDKEY.AutoIncrement = true
            Me.columnNSBID_NSBIDKEY.AllowDBNull = false
            Me.columnNSBID_NSBIDKEY.Unique = true
            Me.columnNSBID_DESC.MaxLength = 255
            Me.columnNSBID_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNSBID_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewNONSOURCE_BUSINESSINCOME_DETAILRow() As NONSOURCE_BUSINESSINCOME_DETAILRow
            Return CType(Me.NewRow,NONSOURCE_BUSINESSINCOME_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NONSOURCE_BUSINESSINCOME_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NONSOURCE_BUSINESSINCOME_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOME_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOME_DETAILRowChanged(Me, New NONSOURCE_BUSINESSINCOME_DETAILRowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOME_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOME_DETAILRowChanging(Me, New NONSOURCE_BUSINESSINCOME_DETAILRowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOME_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOME_DETAILRowDeleted(Me, New NONSOURCE_BUSINESSINCOME_DETAILRowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NONSOURCE_BUSINESSINCOME_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent NONSOURCE_BUSINESSINCOME_DETAILRowDeleting(Me, New NONSOURCE_BUSINESSINCOME_DETAILRowChangeEvent(CType(e.Row,NONSOURCE_BUSINESSINCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveNONSOURCE_BUSINESSINCOME_DETAILRow(ByVal row As NONSOURCE_BUSINESSINCOME_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NONSOURCE_BUSINESSINCOME_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_REALFETDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_REALFETRow)
        
        Private columnIRFET_KEY As Global.System.Data.DataColumn
        
        Private columnIRFET_IRFETKEY As Global.System.Data.DataColumn
        
        Private columnIRFET_DESC As Global.System.Data.DataColumn
        
        Private columnIRFET_AMOUNT As Global.System.Data.DataColumn
        
        Private columnIRFET_NOTE As Global.System.Data.DataColumn
        
        Private columnIRFET_DETAIL As Global.System.Data.DataColumn
        
        Private columnIRFET_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_REALFET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_IRFETKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_IRFETKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFET_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFET_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_REALFETRow
            Get
                Return CType(Me.Rows(index),INCOME_REALFETRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFETRowChanging As INCOME_REALFETRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFETRowChanged As INCOME_REALFETRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFETRowDeleting As INCOME_REALFETRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFETRowDeleted As INCOME_REALFETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_REALFETRow(ByVal row As INCOME_REALFETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_REALFETRow(ByVal IRFET_KEY As Integer, ByVal IRFET_DESC As String, ByVal IRFET_AMOUNT As Decimal, ByVal IRFET_NOTE As String, ByVal IRFET_DETAIL As String, ByVal IRFET_SOURCENO As Double) As INCOME_REALFETRow
            Dim rowINCOME_REALFETRow As INCOME_REALFETRow = CType(Me.NewRow,INCOME_REALFETRow)
            Dim columnValuesArray() As Object = New Object() {IRFET_KEY, Nothing, IRFET_DESC, IRFET_AMOUNT, IRFET_NOTE, IRFET_DETAIL, IRFET_SOURCENO}
            rowINCOME_REALFETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_REALFETRow)
            Return rowINCOME_REALFETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIRFET_IRFETKEY(ByVal IRFET_IRFETKEY As Integer) As INCOME_REALFETRow
            Return CType(Me.Rows.Find(New Object() {IRFET_IRFETKEY}),INCOME_REALFETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_REALFETDataTable = CType(MyBase.Clone,INCOME_REALFETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_REALFETDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIRFET_KEY = MyBase.Columns("IRFET_KEY")
            Me.columnIRFET_IRFETKEY = MyBase.Columns("IRFET_IRFETKEY")
            Me.columnIRFET_DESC = MyBase.Columns("IRFET_DESC")
            Me.columnIRFET_AMOUNT = MyBase.Columns("IRFET_AMOUNT")
            Me.columnIRFET_NOTE = MyBase.Columns("IRFET_NOTE")
            Me.columnIRFET_DETAIL = MyBase.Columns("IRFET_DETAIL")
            Me.columnIRFET_SOURCENO = MyBase.Columns("IRFET_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIRFET_KEY = New Global.System.Data.DataColumn("IRFET_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_KEY)
            Me.columnIRFET_IRFETKEY = New Global.System.Data.DataColumn("IRFET_IRFETKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_IRFETKEY)
            Me.columnIRFET_DESC = New Global.System.Data.DataColumn("IRFET_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_DESC)
            Me.columnIRFET_AMOUNT = New Global.System.Data.DataColumn("IRFET_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_AMOUNT)
            Me.columnIRFET_NOTE = New Global.System.Data.DataColumn("IRFET_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_NOTE)
            Me.columnIRFET_DETAIL = New Global.System.Data.DataColumn("IRFET_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_DETAIL)
            Me.columnIRFET_SOURCENO = New Global.System.Data.DataColumn("IRFET_SOURCENO", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFET_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIRFET_IRFETKEY}, true))
            Me.columnIRFET_IRFETKEY.AutoIncrement = true
            Me.columnIRFET_IRFETKEY.AllowDBNull = false
            Me.columnIRFET_IRFETKEY.Unique = true
            Me.columnIRFET_DESC.MaxLength = 255
            Me.columnIRFET_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnIRFET_NOTE.MaxLength = 3000
            Me.columnIRFET_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_REALFETRow() As INCOME_REALFETRow
            Return CType(Me.NewRow,INCOME_REALFETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_REALFETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_REALFETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_REALFETRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFETRowChanged(Me, New INCOME_REALFETRowChangeEvent(CType(e.Row,INCOME_REALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_REALFETRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFETRowChanging(Me, New INCOME_REALFETRowChangeEvent(CType(e.Row,INCOME_REALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_REALFETRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFETRowDeleted(Me, New INCOME_REALFETRowChangeEvent(CType(e.Row,INCOME_REALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_REALFETRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFETRowDeleting(Me, New INCOME_REALFETRowChangeEvent(CType(e.Row,INCOME_REALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_REALFETRow(ByVal row As INCOME_REALFETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_REALFETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_REALFET_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_REALFET_DETAILRow)
        
        Private columnIRFETD_KEY As Global.System.Data.DataColumn
        
        Private columnIRFETD_IRFETKEY As Global.System.Data.DataColumn
        
        Private columnIRFETD_IRFETDKEY As Global.System.Data.DataColumn
        
        Private columnIRFETD_DESC As Global.System.Data.DataColumn
        
        Private columnIRFETD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnIRFETD_NOTE As Global.System.Data.DataColumn
        
        Private columnIRFETD_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_REALFET_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_IRFETKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_IRFETKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_IRFETDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_IRFETDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IRFETD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIRFETD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_REALFET_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_REALFET_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFET_DETAILRowChanging As INCOME_REALFET_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFET_DETAILRowChanged As INCOME_REALFET_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFET_DETAILRowDeleting As INCOME_REALFET_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_REALFET_DETAILRowDeleted As INCOME_REALFET_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_REALFET_DETAILRow(ByVal row As INCOME_REALFET_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_REALFET_DETAILRow(ByVal IRFETD_KEY As Integer, ByVal parentINCOME_REALFETRowByFK_INCOME_REALFET_INCOME_REALFET_DETAIL As INCOME_REALFETRow, ByVal IRFETD_DESC As String, ByVal IRFETD_AMOUNT As Decimal, ByVal IRFETD_NOTE As String, ByVal IRFETD_SOURCENO As Integer) As INCOME_REALFET_DETAILRow
            Dim rowINCOME_REALFET_DETAILRow As INCOME_REALFET_DETAILRow = CType(Me.NewRow,INCOME_REALFET_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {IRFETD_KEY, Nothing, Nothing, IRFETD_DESC, IRFETD_AMOUNT, IRFETD_NOTE, IRFETD_SOURCENO}
            If (Not (parentINCOME_REALFETRowByFK_INCOME_REALFET_INCOME_REALFET_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_REALFETRowByFK_INCOME_REALFET_INCOME_REALFET_DETAIL(1)
            End If
            rowINCOME_REALFET_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_REALFET_DETAILRow)
            Return rowINCOME_REALFET_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIRFETD_IRFETDKEY(ByVal IRFETD_IRFETDKEY As Integer) As INCOME_REALFET_DETAILRow
            Return CType(Me.Rows.Find(New Object() {IRFETD_IRFETDKEY}),INCOME_REALFET_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_REALFET_DETAILDataTable = CType(MyBase.Clone,INCOME_REALFET_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_REALFET_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIRFETD_KEY = MyBase.Columns("IRFETD_KEY")
            Me.columnIRFETD_IRFETKEY = MyBase.Columns("IRFETD_IRFETKEY")
            Me.columnIRFETD_IRFETDKEY = MyBase.Columns("IRFETD_IRFETDKEY")
            Me.columnIRFETD_DESC = MyBase.Columns("IRFETD_DESC")
            Me.columnIRFETD_AMOUNT = MyBase.Columns("IRFETD_AMOUNT")
            Me.columnIRFETD_NOTE = MyBase.Columns("IRFETD_NOTE")
            Me.columnIRFETD_SOURCENO = MyBase.Columns("IRFETD_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIRFETD_KEY = New Global.System.Data.DataColumn("IRFETD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_KEY)
            Me.columnIRFETD_IRFETKEY = New Global.System.Data.DataColumn("IRFETD_IRFETKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_IRFETKEY)
            Me.columnIRFETD_IRFETDKEY = New Global.System.Data.DataColumn("IRFETD_IRFETDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_IRFETDKEY)
            Me.columnIRFETD_DESC = New Global.System.Data.DataColumn("IRFETD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_DESC)
            Me.columnIRFETD_AMOUNT = New Global.System.Data.DataColumn("IRFETD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_AMOUNT)
            Me.columnIRFETD_NOTE = New Global.System.Data.DataColumn("IRFETD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_NOTE)
            Me.columnIRFETD_SOURCENO = New Global.System.Data.DataColumn("IRFETD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIRFETD_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIRFETD_IRFETDKEY}, true))
            Me.columnIRFETD_IRFETDKEY.AutoIncrement = true
            Me.columnIRFETD_IRFETDKEY.AllowDBNull = false
            Me.columnIRFETD_IRFETDKEY.Unique = true
            Me.columnIRFETD_DESC.MaxLength = 255
            Me.columnIRFETD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnIRFETD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_REALFET_DETAILRow() As INCOME_REALFET_DETAILRow
            Return CType(Me.NewRow,INCOME_REALFET_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_REALFET_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_REALFET_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_REALFET_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFET_DETAILRowChanged(Me, New INCOME_REALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_REALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_REALFET_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFET_DETAILRowChanging(Me, New INCOME_REALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_REALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_REALFET_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFET_DETAILRowDeleted(Me, New INCOME_REALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_REALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_REALFET_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_REALFET_DETAILRowDeleting(Me, New INCOME_REALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_REALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_REALFET_DETAILRow(ByVal row As INCOME_REALFET_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_REALFET_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NBINTERESTDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NBINTERESTRow)
        
        Private columnNOBII_KEY As Global.System.Data.DataColumn
        
        Private columnNOBII_NOBIIKEY As Global.System.Data.DataColumn
        
        Private columnNOBII_DESC As Global.System.Data.DataColumn
        
        Private columnNOBII_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNOBII_NOTE As Global.System.Data.DataColumn
        
        Private columnNOBII_DETAIL As Global.System.Data.DataColumn
        
        Private columnNOBII_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NBINTEREST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_NOBIIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_NOBIIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBII_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBII_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NBINTERESTRow
            Get
                Return CType(Me.Rows(index),INCOME_NBINTERESTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTERESTRowChanging As INCOME_NBINTERESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTERESTRowChanged As INCOME_NBINTERESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTERESTRowDeleting As INCOME_NBINTERESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTERESTRowDeleted As INCOME_NBINTERESTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NBINTERESTRow(ByVal row As INCOME_NBINTERESTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NBINTERESTRow(ByVal NOBII_KEY As Integer, ByVal NOBII_DESC As String, ByVal NOBII_AMOUNT As Decimal, ByVal NOBII_NOTE As String, ByVal NOBII_DETAIL As String, ByVal NOBII_SOURCENO As Integer) As INCOME_NBINTERESTRow
            Dim rowINCOME_NBINTERESTRow As INCOME_NBINTERESTRow = CType(Me.NewRow,INCOME_NBINTERESTRow)
            Dim columnValuesArray() As Object = New Object() {NOBII_KEY, Nothing, NOBII_DESC, NOBII_AMOUNT, NOBII_NOTE, NOBII_DETAIL, NOBII_SOURCENO}
            rowINCOME_NBINTERESTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NBINTERESTRow)
            Return rowINCOME_NBINTERESTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNOBII_NOBIIKEY(ByVal NOBII_NOBIIKEY As Integer) As INCOME_NBINTERESTRow
            Return CType(Me.Rows.Find(New Object() {NOBII_NOBIIKEY}),INCOME_NBINTERESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NBINTERESTDataTable = CType(MyBase.Clone,INCOME_NBINTERESTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NBINTERESTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNOBII_KEY = MyBase.Columns("NOBII_KEY")
            Me.columnNOBII_NOBIIKEY = MyBase.Columns("NOBII_NOBIIKEY")
            Me.columnNOBII_DESC = MyBase.Columns("NOBII_DESC")
            Me.columnNOBII_AMOUNT = MyBase.Columns("NOBII_AMOUNT")
            Me.columnNOBII_NOTE = MyBase.Columns("NOBII_NOTE")
            Me.columnNOBII_DETAIL = MyBase.Columns("NOBII_DETAIL")
            Me.columnNOBII_SOURCENO = MyBase.Columns("NOBII_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNOBII_KEY = New Global.System.Data.DataColumn("NOBII_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_KEY)
            Me.columnNOBII_NOBIIKEY = New Global.System.Data.DataColumn("NOBII_NOBIIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_NOBIIKEY)
            Me.columnNOBII_DESC = New Global.System.Data.DataColumn("NOBII_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_DESC)
            Me.columnNOBII_AMOUNT = New Global.System.Data.DataColumn("NOBII_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_AMOUNT)
            Me.columnNOBII_NOTE = New Global.System.Data.DataColumn("NOBII_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_NOTE)
            Me.columnNOBII_DETAIL = New Global.System.Data.DataColumn("NOBII_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_DETAIL)
            Me.columnNOBII_SOURCENO = New Global.System.Data.DataColumn("NOBII_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBII_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNOBII_NOBIIKEY}, true))
            Me.columnNOBII_NOBIIKEY.AutoIncrement = true
            Me.columnNOBII_NOBIIKEY.AllowDBNull = false
            Me.columnNOBII_NOBIIKEY.Unique = true
            Me.columnNOBII_DESC.MaxLength = 255
            Me.columnNOBII_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNOBII_NOTE.MaxLength = 3000
            Me.columnNOBII_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NBINTERESTRow() As INCOME_NBINTERESTRow
            Return CType(Me.NewRow,INCOME_NBINTERESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NBINTERESTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NBINTERESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NBINTERESTRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTERESTRowChanged(Me, New INCOME_NBINTERESTRowChangeEvent(CType(e.Row,INCOME_NBINTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NBINTERESTRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTERESTRowChanging(Me, New INCOME_NBINTERESTRowChangeEvent(CType(e.Row,INCOME_NBINTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NBINTERESTRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTERESTRowDeleted(Me, New INCOME_NBINTERESTRowChangeEvent(CType(e.Row,INCOME_NBINTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NBINTERESTRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTERESTRowDeleting(Me, New INCOME_NBINTERESTRowChangeEvent(CType(e.Row,INCOME_NBINTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NBINTERESTRow(ByVal row As INCOME_NBINTERESTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NBINTERESTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NBINTEREST_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NBINTEREST_DETAILRow)
        
        Private columnNOBIID_KEY As Global.System.Data.DataColumn
        
        Private columnNOBIID_NOBIIKEY As Global.System.Data.DataColumn
        
        Private columnNOBIID_NOBIIDKEY As Global.System.Data.DataColumn
        
        Private columnNOBIID_DESC As Global.System.Data.DataColumn
        
        Private columnNOBIID_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNOBIID_NOTE As Global.System.Data.DataColumn
        
        Private columnNOBIID_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NBINTEREST_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_NOBIIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_NOBIIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_NOBIIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_NOBIIDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBIID_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBIID_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NBINTEREST_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NBINTEREST_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTEREST_DETAILRowChanging As INCOME_NBINTEREST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTEREST_DETAILRowChanged As INCOME_NBINTEREST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTEREST_DETAILRowDeleting As INCOME_NBINTEREST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBINTEREST_DETAILRowDeleted As INCOME_NBINTEREST_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NBINTEREST_DETAILRow(ByVal row As INCOME_NBINTEREST_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NBINTEREST_DETAILRow(ByVal NOBIID_KEY As Integer, ByVal parentINCOME_NBINTERESTRowByFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL As INCOME_NBINTERESTRow, ByVal NOBIID_DESC As String, ByVal NOBIID_AMOUNT As Decimal, ByVal NOBIID_NOTE As String, ByVal NOBIID_SOURCENO As Integer) As INCOME_NBINTEREST_DETAILRow
            Dim rowINCOME_NBINTEREST_DETAILRow As INCOME_NBINTEREST_DETAILRow = CType(Me.NewRow,INCOME_NBINTEREST_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NOBIID_KEY, Nothing, Nothing, NOBIID_DESC, NOBIID_AMOUNT, NOBIID_NOTE, NOBIID_SOURCENO}
            If (Not (parentINCOME_NBINTERESTRowByFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NBINTERESTRowByFK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL(1)
            End If
            rowINCOME_NBINTEREST_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NBINTEREST_DETAILRow)
            Return rowINCOME_NBINTEREST_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNOBIID_NOBIIDKEY(ByVal NOBIID_NOBIIDKEY As Integer) As INCOME_NBINTEREST_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NOBIID_NOBIIDKEY}),INCOME_NBINTEREST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NBINTEREST_DETAILDataTable = CType(MyBase.Clone,INCOME_NBINTEREST_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NBINTEREST_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNOBIID_KEY = MyBase.Columns("NOBIID_KEY")
            Me.columnNOBIID_NOBIIKEY = MyBase.Columns("NOBIID_NOBIIKEY")
            Me.columnNOBIID_NOBIIDKEY = MyBase.Columns("NOBIID_NOBIIDKEY")
            Me.columnNOBIID_DESC = MyBase.Columns("NOBIID_DESC")
            Me.columnNOBIID_AMOUNT = MyBase.Columns("NOBIID_AMOUNT")
            Me.columnNOBIID_NOTE = MyBase.Columns("NOBIID_NOTE")
            Me.columnNOBIID_SOURCENO = MyBase.Columns("NOBIID_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNOBIID_KEY = New Global.System.Data.DataColumn("NOBIID_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_KEY)
            Me.columnNOBIID_NOBIIKEY = New Global.System.Data.DataColumn("NOBIID_NOBIIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_NOBIIKEY)
            Me.columnNOBIID_NOBIIDKEY = New Global.System.Data.DataColumn("NOBIID_NOBIIDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_NOBIIDKEY)
            Me.columnNOBIID_DESC = New Global.System.Data.DataColumn("NOBIID_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_DESC)
            Me.columnNOBIID_AMOUNT = New Global.System.Data.DataColumn("NOBIID_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_AMOUNT)
            Me.columnNOBIID_NOTE = New Global.System.Data.DataColumn("NOBIID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_NOTE)
            Me.columnNOBIID_SOURCENO = New Global.System.Data.DataColumn("NOBIID_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBIID_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNOBIID_NOBIIDKEY}, true))
            Me.columnNOBIID_NOBIIDKEY.AutoIncrement = true
            Me.columnNOBIID_NOBIIDKEY.AllowDBNull = false
            Me.columnNOBIID_NOBIIDKEY.Unique = true
            Me.columnNOBIID_DESC.MaxLength = 255
            Me.columnNOBIID_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNOBIID_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NBINTEREST_DETAILRow() As INCOME_NBINTEREST_DETAILRow
            Return CType(Me.NewRow,INCOME_NBINTEREST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NBINTEREST_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NBINTEREST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NBINTEREST_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTEREST_DETAILRowChanged(Me, New INCOME_NBINTEREST_DETAILRowChangeEvent(CType(e.Row,INCOME_NBINTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NBINTEREST_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTEREST_DETAILRowChanging(Me, New INCOME_NBINTEREST_DETAILRowChangeEvent(CType(e.Row,INCOME_NBINTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NBINTEREST_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTEREST_DETAILRowDeleted(Me, New INCOME_NBINTEREST_DETAILRowChangeEvent(CType(e.Row,INCOME_NBINTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NBINTEREST_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBINTEREST_DETAILRowDeleting(Me, New INCOME_NBINTEREST_DETAILRowChangeEvent(CType(e.Row,INCOME_NBINTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NBINTEREST_DETAILRow(ByVal row As INCOME_NBINTEREST_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NBINTEREST_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NBROYALTYDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NBROYALTYRow)
        
        Private columnNOBRI_KEY As Global.System.Data.DataColumn
        
        Private columnNOBRI_NOBRIKEY As Global.System.Data.DataColumn
        
        Private columnNOBRI_DESC As Global.System.Data.DataColumn
        
        Private columnNOBRI_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNOBRI_NOTE As Global.System.Data.DataColumn
        
        Private columnNOBRI_DETAIL As Global.System.Data.DataColumn
        
        Private columnNOBRI_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NBROYALTY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_NOBRIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_NOBRIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRI_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NBROYALTYRow
            Get
                Return CType(Me.Rows(index),INCOME_NBROYALTYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTYRowChanging As INCOME_NBROYALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTYRowChanged As INCOME_NBROYALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTYRowDeleting As INCOME_NBROYALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTYRowDeleted As INCOME_NBROYALTYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NBROYALTYRow(ByVal row As INCOME_NBROYALTYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NBROYALTYRow(ByVal NOBRI_KEY As Integer, ByVal NOBRI_DESC As String, ByVal NOBRI_AMOUNT As Decimal, ByVal NOBRI_NOTE As String, ByVal NOBRI_DETAIL As String, ByVal NOBRI_SOURCENO As Integer) As INCOME_NBROYALTYRow
            Dim rowINCOME_NBROYALTYRow As INCOME_NBROYALTYRow = CType(Me.NewRow,INCOME_NBROYALTYRow)
            Dim columnValuesArray() As Object = New Object() {NOBRI_KEY, Nothing, NOBRI_DESC, NOBRI_AMOUNT, NOBRI_NOTE, NOBRI_DETAIL, NOBRI_SOURCENO}
            rowINCOME_NBROYALTYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NBROYALTYRow)
            Return rowINCOME_NBROYALTYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNOBRI_NOBRIKEY(ByVal NOBRI_NOBRIKEY As Integer) As INCOME_NBROYALTYRow
            Return CType(Me.Rows.Find(New Object() {NOBRI_NOBRIKEY}),INCOME_NBROYALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NBROYALTYDataTable = CType(MyBase.Clone,INCOME_NBROYALTYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NBROYALTYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNOBRI_KEY = MyBase.Columns("NOBRI_KEY")
            Me.columnNOBRI_NOBRIKEY = MyBase.Columns("NOBRI_NOBRIKEY")
            Me.columnNOBRI_DESC = MyBase.Columns("NOBRI_DESC")
            Me.columnNOBRI_AMOUNT = MyBase.Columns("NOBRI_AMOUNT")
            Me.columnNOBRI_NOTE = MyBase.Columns("NOBRI_NOTE")
            Me.columnNOBRI_DETAIL = MyBase.Columns("NOBRI_DETAIL")
            Me.columnNOBRI_SOURCENO = MyBase.Columns("NOBRI_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNOBRI_KEY = New Global.System.Data.DataColumn("NOBRI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_KEY)
            Me.columnNOBRI_NOBRIKEY = New Global.System.Data.DataColumn("NOBRI_NOBRIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_NOBRIKEY)
            Me.columnNOBRI_DESC = New Global.System.Data.DataColumn("NOBRI_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_DESC)
            Me.columnNOBRI_AMOUNT = New Global.System.Data.DataColumn("NOBRI_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_AMOUNT)
            Me.columnNOBRI_NOTE = New Global.System.Data.DataColumn("NOBRI_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_NOTE)
            Me.columnNOBRI_DETAIL = New Global.System.Data.DataColumn("NOBRI_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_DETAIL)
            Me.columnNOBRI_SOURCENO = New Global.System.Data.DataColumn("NOBRI_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRI_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNOBRI_NOBRIKEY}, true))
            Me.columnNOBRI_NOBRIKEY.AutoIncrement = true
            Me.columnNOBRI_NOBRIKEY.AllowDBNull = false
            Me.columnNOBRI_NOBRIKEY.Unique = true
            Me.columnNOBRI_DESC.MaxLength = 255
            Me.columnNOBRI_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNOBRI_NOTE.MaxLength = 3000
            Me.columnNOBRI_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NBROYALTYRow() As INCOME_NBROYALTYRow
            Return CType(Me.NewRow,INCOME_NBROYALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NBROYALTYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NBROYALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NBROYALTYRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTYRowChanged(Me, New INCOME_NBROYALTYRowChangeEvent(CType(e.Row,INCOME_NBROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NBROYALTYRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTYRowChanging(Me, New INCOME_NBROYALTYRowChangeEvent(CType(e.Row,INCOME_NBROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NBROYALTYRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTYRowDeleted(Me, New INCOME_NBROYALTYRowChangeEvent(CType(e.Row,INCOME_NBROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NBROYALTYRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTYRowDeleting(Me, New INCOME_NBROYALTYRowChangeEvent(CType(e.Row,INCOME_NBROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NBROYALTYRow(ByVal row As INCOME_NBROYALTYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NBROYALTYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NBROYALTY_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NBROYALTY_DETAILRow)
        
        Private columnNOBRID_KEY As Global.System.Data.DataColumn
        
        Private columnNOBRID_NOBRIKEY As Global.System.Data.DataColumn
        
        Private columnNOBRID_NOBRIDKEY As Global.System.Data.DataColumn
        
        Private columnNOBRID_DESC As Global.System.Data.DataColumn
        
        Private columnNOBRID_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNOBRID_NOTE As Global.System.Data.DataColumn
        
        Private columnNOBRID_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NBROYALTY_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_NOBRIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_NOBRIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_NOBRIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_NOBRIDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOBRID_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOBRID_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NBROYALTY_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NBROYALTY_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTY_DETAILRowChanging As INCOME_NBROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTY_DETAILRowChanged As INCOME_NBROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTY_DETAILRowDeleting As INCOME_NBROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NBROYALTY_DETAILRowDeleted As INCOME_NBROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NBROYALTY_DETAILRow(ByVal row As INCOME_NBROYALTY_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NBROYALTY_DETAILRow(ByVal NOBRID_KEY As Integer, ByVal parentINCOME_NBROYALTYRowByFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL As INCOME_NBROYALTYRow, ByVal NOBRID_DESC As String, ByVal NOBRID_AMOUNT As Decimal, ByVal NOBRID_NOTE As String, ByVal NOBRID_SOURCENO As Integer) As INCOME_NBROYALTY_DETAILRow
            Dim rowINCOME_NBROYALTY_DETAILRow As INCOME_NBROYALTY_DETAILRow = CType(Me.NewRow,INCOME_NBROYALTY_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NOBRID_KEY, Nothing, Nothing, NOBRID_DESC, NOBRID_AMOUNT, NOBRID_NOTE, NOBRID_SOURCENO}
            If (Not (parentINCOME_NBROYALTYRowByFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NBROYALTYRowByFK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL(1)
            End If
            rowINCOME_NBROYALTY_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NBROYALTY_DETAILRow)
            Return rowINCOME_NBROYALTY_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNOBRID_NOBRIDKEY(ByVal NOBRID_NOBRIDKEY As Integer) As INCOME_NBROYALTY_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NOBRID_NOBRIDKEY}),INCOME_NBROYALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NBROYALTY_DETAILDataTable = CType(MyBase.Clone,INCOME_NBROYALTY_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NBROYALTY_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNOBRID_KEY = MyBase.Columns("NOBRID_KEY")
            Me.columnNOBRID_NOBRIKEY = MyBase.Columns("NOBRID_NOBRIKEY")
            Me.columnNOBRID_NOBRIDKEY = MyBase.Columns("NOBRID_NOBRIDKEY")
            Me.columnNOBRID_DESC = MyBase.Columns("NOBRID_DESC")
            Me.columnNOBRID_AMOUNT = MyBase.Columns("NOBRID_AMOUNT")
            Me.columnNOBRID_NOTE = MyBase.Columns("NOBRID_NOTE")
            Me.columnNOBRID_SOURCENO = MyBase.Columns("NOBRID_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNOBRID_KEY = New Global.System.Data.DataColumn("NOBRID_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_KEY)
            Me.columnNOBRID_NOBRIKEY = New Global.System.Data.DataColumn("NOBRID_NOBRIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_NOBRIKEY)
            Me.columnNOBRID_NOBRIDKEY = New Global.System.Data.DataColumn("NOBRID_NOBRIDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_NOBRIDKEY)
            Me.columnNOBRID_DESC = New Global.System.Data.DataColumn("NOBRID_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_DESC)
            Me.columnNOBRID_AMOUNT = New Global.System.Data.DataColumn("NOBRID_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_AMOUNT)
            Me.columnNOBRID_NOTE = New Global.System.Data.DataColumn("NOBRID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_NOTE)
            Me.columnNOBRID_SOURCENO = New Global.System.Data.DataColumn("NOBRID_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOBRID_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNOBRID_NOBRIDKEY}, true))
            Me.columnNOBRID_NOBRIDKEY.AutoIncrement = true
            Me.columnNOBRID_NOBRIDKEY.AllowDBNull = false
            Me.columnNOBRID_NOBRIDKEY.Unique = true
            Me.columnNOBRID_DESC.MaxLength = 255
            Me.columnNOBRID_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNOBRID_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NBROYALTY_DETAILRow() As INCOME_NBROYALTY_DETAILRow
            Return CType(Me.NewRow,INCOME_NBROYALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NBROYALTY_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NBROYALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NBROYALTY_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTY_DETAILRowChanged(Me, New INCOME_NBROYALTY_DETAILRowChangeEvent(CType(e.Row,INCOME_NBROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NBROYALTY_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTY_DETAILRowChanging(Me, New INCOME_NBROYALTY_DETAILRowChangeEvent(CType(e.Row,INCOME_NBROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NBROYALTY_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTY_DETAILRowDeleted(Me, New INCOME_NBROYALTY_DETAILRowChangeEvent(CType(e.Row,INCOME_NBROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NBROYALTY_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NBROYALTY_DETAILRowDeleting(Me, New INCOME_NBROYALTY_DETAILRowChangeEvent(CType(e.Row,INCOME_NBROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NBROYALTY_DETAILRow(ByVal row As INCOME_NBROYALTY_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NBROYALTY_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_INCOMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_INCOMERow)
        
        Private columnOI_KEY As Global.System.Data.DataColumn
        
        Private columnOI_OIKEY As Global.System.Data.DataColumn
        
        Private columnOI_DESC As Global.System.Data.DataColumn
        
        Private columnOI_AMOUNT As Global.System.Data.DataColumn
        
        Private columnOI_NOTE As Global.System.Data.DataColumn
        
        Private columnOI_DETAIL As Global.System.Data.DataColumn
        
        Private columnOI_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_INCOME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_OIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_OIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOI_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_INCOMERow
            Get
                Return CType(Me.Rows(index),OTHER_INCOMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOMERowChanging As OTHER_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOMERowChanged As OTHER_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOMERowDeleting As OTHER_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOMERowDeleted As OTHER_INCOMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_INCOMERow(ByVal row As OTHER_INCOMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_INCOMERow(ByVal OI_KEY As Integer, ByVal OI_DESC As String, ByVal OI_AMOUNT As Decimal, ByVal OI_NOTE As String, ByVal OI_DETAIL As String, ByVal OI_SOURCENO As Integer) As OTHER_INCOMERow
            Dim rowOTHER_INCOMERow As OTHER_INCOMERow = CType(Me.NewRow,OTHER_INCOMERow)
            Dim columnValuesArray() As Object = New Object() {OI_KEY, Nothing, OI_DESC, OI_AMOUNT, OI_NOTE, OI_DETAIL, OI_SOURCENO}
            rowOTHER_INCOMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_INCOMERow)
            Return rowOTHER_INCOMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByOI_OIKEY(ByVal OI_OIKEY As Integer) As OTHER_INCOMERow
            Return CType(Me.Rows.Find(New Object() {OI_OIKEY}),OTHER_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_INCOMEDataTable = CType(MyBase.Clone,OTHER_INCOMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_INCOMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnOI_KEY = MyBase.Columns("OI_KEY")
            Me.columnOI_OIKEY = MyBase.Columns("OI_OIKEY")
            Me.columnOI_DESC = MyBase.Columns("OI_DESC")
            Me.columnOI_AMOUNT = MyBase.Columns("OI_AMOUNT")
            Me.columnOI_NOTE = MyBase.Columns("OI_NOTE")
            Me.columnOI_DETAIL = MyBase.Columns("OI_DETAIL")
            Me.columnOI_SOURCENO = MyBase.Columns("OI_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnOI_KEY = New Global.System.Data.DataColumn("OI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_KEY)
            Me.columnOI_OIKEY = New Global.System.Data.DataColumn("OI_OIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_OIKEY)
            Me.columnOI_DESC = New Global.System.Data.DataColumn("OI_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_DESC)
            Me.columnOI_AMOUNT = New Global.System.Data.DataColumn("OI_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_AMOUNT)
            Me.columnOI_NOTE = New Global.System.Data.DataColumn("OI_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_NOTE)
            Me.columnOI_DETAIL = New Global.System.Data.DataColumn("OI_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_DETAIL)
            Me.columnOI_SOURCENO = New Global.System.Data.DataColumn("OI_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOI_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOI_OIKEY}, true))
            Me.columnOI_OIKEY.AutoIncrement = true
            Me.columnOI_OIKEY.AllowDBNull = false
            Me.columnOI_OIKEY.Unique = true
            Me.columnOI_DESC.MaxLength = 255
            Me.columnOI_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnOI_NOTE.MaxLength = 3000
            Me.columnOI_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_INCOMERow() As OTHER_INCOMERow
            Return CType(Me.NewRow,OTHER_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_INCOMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_INCOMERowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOMERowChanged(Me, New OTHER_INCOMERowChangeEvent(CType(e.Row,OTHER_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_INCOMERowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOMERowChanging(Me, New OTHER_INCOMERowChangeEvent(CType(e.Row,OTHER_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_INCOMERowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOMERowDeleted(Me, New OTHER_INCOMERowChangeEvent(CType(e.Row,OTHER_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_INCOMERowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOMERowDeleting(Me, New OTHER_INCOMERowChangeEvent(CType(e.Row,OTHER_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_INCOMERow(ByVal row As OTHER_INCOMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_INCOMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_INCOME_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_INCOME_DETAILRow)
        
        Private columnOID_KEY As Global.System.Data.DataColumn
        
        Private columnOID_OIKEY As Global.System.Data.DataColumn
        
        Private columnOID_OIDKEY As Global.System.Data.DataColumn
        
        Private columnOID_DESC As Global.System.Data.DataColumn
        
        Private columnOID_AMOUNT As Global.System.Data.DataColumn
        
        Private columnOID_NOTE As Global.System.Data.DataColumn
        
        Private columnOID_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_INCOME_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_OIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_OIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_OIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_OIDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OID_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOID_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_INCOME_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_INCOME_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOME_DETAILRowChanging As OTHER_INCOME_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOME_DETAILRowChanged As OTHER_INCOME_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOME_DETAILRowDeleting As OTHER_INCOME_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_INCOME_DETAILRowDeleted As OTHER_INCOME_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_INCOME_DETAILRow(ByVal row As OTHER_INCOME_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_INCOME_DETAILRow(ByVal OID_KEY As Integer, ByVal parentOTHER_INCOMERowByFK_OTHER_INCOME_OTHER_INCOME_DETAIL As OTHER_INCOMERow, ByVal OID_DESC As String, ByVal OID_AMOUNT As Decimal, ByVal OID_NOTE As String, ByVal OID_SOURCENO As Integer) As OTHER_INCOME_DETAILRow
            Dim rowOTHER_INCOME_DETAILRow As OTHER_INCOME_DETAILRow = CType(Me.NewRow,OTHER_INCOME_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {OID_KEY, Nothing, Nothing, OID_DESC, OID_AMOUNT, OID_NOTE, OID_SOURCENO}
            If (Not (parentOTHER_INCOMERowByFK_OTHER_INCOME_OTHER_INCOME_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_INCOMERowByFK_OTHER_INCOME_OTHER_INCOME_DETAIL(1)
            End If
            rowOTHER_INCOME_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_INCOME_DETAILRow)
            Return rowOTHER_INCOME_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByOID_OIDKEY(ByVal OID_OIDKEY As Integer) As OTHER_INCOME_DETAILRow
            Return CType(Me.Rows.Find(New Object() {OID_OIDKEY}),OTHER_INCOME_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_INCOME_DETAILDataTable = CType(MyBase.Clone,OTHER_INCOME_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_INCOME_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnOID_KEY = MyBase.Columns("OID_KEY")
            Me.columnOID_OIKEY = MyBase.Columns("OID_OIKEY")
            Me.columnOID_OIDKEY = MyBase.Columns("OID_OIDKEY")
            Me.columnOID_DESC = MyBase.Columns("OID_DESC")
            Me.columnOID_AMOUNT = MyBase.Columns("OID_AMOUNT")
            Me.columnOID_NOTE = MyBase.Columns("OID_NOTE")
            Me.columnOID_SOURCENO = MyBase.Columns("OID_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnOID_KEY = New Global.System.Data.DataColumn("OID_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_KEY)
            Me.columnOID_OIKEY = New Global.System.Data.DataColumn("OID_OIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_OIKEY)
            Me.columnOID_OIDKEY = New Global.System.Data.DataColumn("OID_OIDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_OIDKEY)
            Me.columnOID_DESC = New Global.System.Data.DataColumn("OID_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_DESC)
            Me.columnOID_AMOUNT = New Global.System.Data.DataColumn("OID_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_AMOUNT)
            Me.columnOID_NOTE = New Global.System.Data.DataColumn("OID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_NOTE)
            Me.columnOID_SOURCENO = New Global.System.Data.DataColumn("OID_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOID_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOID_OIDKEY}, true))
            Me.columnOID_OIDKEY.AutoIncrement = true
            Me.columnOID_OIDKEY.AllowDBNull = false
            Me.columnOID_OIDKEY.Unique = true
            Me.columnOID_DESC.MaxLength = 255
            Me.columnOID_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnOID_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_INCOME_DETAILRow() As OTHER_INCOME_DETAILRow
            Return CType(Me.NewRow,OTHER_INCOME_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_INCOME_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_INCOME_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_INCOME_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOME_DETAILRowChanged(Me, New OTHER_INCOME_DETAILRowChangeEvent(CType(e.Row,OTHER_INCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_INCOME_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOME_DETAILRowChanging(Me, New OTHER_INCOME_DETAILRowChangeEvent(CType(e.Row,OTHER_INCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_INCOME_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOME_DETAILRowDeleted(Me, New OTHER_INCOME_DETAILRowChangeEvent(CType(e.Row,OTHER_INCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_INCOME_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_INCOME_DETAILRowDeleting(Me, New OTHER_INCOME_DETAILRowChangeEvent(CType(e.Row,OTHER_INCOME_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_INCOME_DETAILRow(ByVal row As OTHER_INCOME_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_INCOME_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTDISPOSALFADataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTDISPOSALFARow)
        
        Private columnNTIDFA_KEY As Global.System.Data.DataColumn
        
        Private columnNTIDFA_NTIDFAKEY As Global.System.Data.DataColumn
        
        Private columnNTIDFA_DESC As Global.System.Data.DataColumn
        
        Private columnNTIDFA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIDFA_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIDFA_DETAIL As Global.System.Data.DataColumn
        
        Private columnNTIDFA_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTDISPOSALFA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_NTIDFAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_NTIDFAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTDISPOSALFARow
            Get
                Return CType(Me.Rows(index),INCOME_NTDISPOSALFARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFARowChanging As INCOME_NTDISPOSALFARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFARowChanged As INCOME_NTDISPOSALFARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFARowDeleting As INCOME_NTDISPOSALFARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFARowDeleted As INCOME_NTDISPOSALFARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTDISPOSALFARow(ByVal row As INCOME_NTDISPOSALFARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTDISPOSALFARow(ByVal NTIDFA_KEY As Integer, ByVal NTIDFA_DESC As String, ByVal NTIDFA_AMOUNT As Decimal, ByVal NTIDFA_NOTE As String, ByVal NTIDFA_DETAIL As String, ByVal NTIDFA_SOURCENO As Integer) As INCOME_NTDISPOSALFARow
            Dim rowINCOME_NTDISPOSALFARow As INCOME_NTDISPOSALFARow = CType(Me.NewRow,INCOME_NTDISPOSALFARow)
            Dim columnValuesArray() As Object = New Object() {NTIDFA_KEY, Nothing, NTIDFA_DESC, NTIDFA_AMOUNT, NTIDFA_NOTE, NTIDFA_DETAIL, NTIDFA_SOURCENO}
            rowINCOME_NTDISPOSALFARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTDISPOSALFARow)
            Return rowINCOME_NTDISPOSALFARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIDFA_NTIDFAKEY(ByVal NTIDFA_NTIDFAKEY As Integer) As INCOME_NTDISPOSALFARow
            Return CType(Me.Rows.Find(New Object() {NTIDFA_NTIDFAKEY}),INCOME_NTDISPOSALFARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTDISPOSALFADataTable = CType(MyBase.Clone,INCOME_NTDISPOSALFADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTDISPOSALFADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIDFA_KEY = MyBase.Columns("NTIDFA_KEY")
            Me.columnNTIDFA_NTIDFAKEY = MyBase.Columns("NTIDFA_NTIDFAKEY")
            Me.columnNTIDFA_DESC = MyBase.Columns("NTIDFA_DESC")
            Me.columnNTIDFA_AMOUNT = MyBase.Columns("NTIDFA_AMOUNT")
            Me.columnNTIDFA_NOTE = MyBase.Columns("NTIDFA_NOTE")
            Me.columnNTIDFA_DETAIL = MyBase.Columns("NTIDFA_DETAIL")
            Me.columnNTIDFA_SOURCENO = MyBase.Columns("NTIDFA_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIDFA_KEY = New Global.System.Data.DataColumn("NTIDFA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_KEY)
            Me.columnNTIDFA_NTIDFAKEY = New Global.System.Data.DataColumn("NTIDFA_NTIDFAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_NTIDFAKEY)
            Me.columnNTIDFA_DESC = New Global.System.Data.DataColumn("NTIDFA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_DESC)
            Me.columnNTIDFA_AMOUNT = New Global.System.Data.DataColumn("NTIDFA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_AMOUNT)
            Me.columnNTIDFA_NOTE = New Global.System.Data.DataColumn("NTIDFA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_NOTE)
            Me.columnNTIDFA_DETAIL = New Global.System.Data.DataColumn("NTIDFA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_DETAIL)
            Me.columnNTIDFA_SOURCENO = New Global.System.Data.DataColumn("NTIDFA_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFA_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIDFA_NTIDFAKEY}, true))
            Me.columnNTIDFA_NTIDFAKEY.AutoIncrement = true
            Me.columnNTIDFA_NTIDFAKEY.AllowDBNull = false
            Me.columnNTIDFA_NTIDFAKEY.Unique = true
            Me.columnNTIDFA_DESC.MaxLength = 255
            Me.columnNTIDFA_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIDFA_NOTE.MaxLength = 3000
            Me.columnNTIDFA_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTDISPOSALFARow() As INCOME_NTDISPOSALFARow
            Return CType(Me.NewRow,INCOME_NTDISPOSALFARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTDISPOSALFARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTDISPOSALFARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTDISPOSALFARowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFARowChanged(Me, New INCOME_NTDISPOSALFARowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTDISPOSALFARowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFARowChanging(Me, New INCOME_NTDISPOSALFARowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTDISPOSALFARowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFARowDeleted(Me, New INCOME_NTDISPOSALFARowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTDISPOSALFARowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFARowDeleting(Me, New INCOME_NTDISPOSALFARowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTDISPOSALFARow(ByVal row As INCOME_NTDISPOSALFARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTDISPOSALFADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTDISPOSALFA_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTDISPOSALFA_DETAILRow)
        
        Private columnNTIDFAD_KEY As Global.System.Data.DataColumn
        
        Private columnNTIDFAD_NTIDFAKEY As Global.System.Data.DataColumn
        
        Private columnNTIDFAD_NTIDFADKEY As Global.System.Data.DataColumn
        
        Private columnNTIDFAD_DESC As Global.System.Data.DataColumn
        
        Private columnNTIDFAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIDFAD_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIDFAD_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTDISPOSALFA_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_NTIDFAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_NTIDFAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_NTIDFADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_NTIDFADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDFAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDFAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTDISPOSALFA_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NTDISPOSALFA_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFA_DETAILRowChanging As INCOME_NTDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFA_DETAILRowChanged As INCOME_NTDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFA_DETAILRowDeleting As INCOME_NTDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALFA_DETAILRowDeleted As INCOME_NTDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTDISPOSALFA_DETAILRow(ByVal row As INCOME_NTDISPOSALFA_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTDISPOSALFA_DETAILRow(ByVal NTIDFAD_KEY As Integer, ByVal parentINCOME_NTDISPOSALFARowByFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL As INCOME_NTDISPOSALFARow, ByVal NTIDFAD_DESC As String, ByVal NTIDFAD_AMOUNT As Decimal, ByVal NTIDFAD_NOTE As String, ByVal NTIDFAD_SOURCENO As Integer) As INCOME_NTDISPOSALFA_DETAILRow
            Dim rowINCOME_NTDISPOSALFA_DETAILRow As INCOME_NTDISPOSALFA_DETAILRow = CType(Me.NewRow,INCOME_NTDISPOSALFA_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NTIDFAD_KEY, Nothing, Nothing, NTIDFAD_DESC, NTIDFAD_AMOUNT, NTIDFAD_NOTE, NTIDFAD_SOURCENO}
            If (Not (parentINCOME_NTDISPOSALFARowByFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NTDISPOSALFARowByFK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL(1)
            End If
            rowINCOME_NTDISPOSALFA_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTDISPOSALFA_DETAILRow)
            Return rowINCOME_NTDISPOSALFA_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIDFAD_NTIDFADKEY(ByVal NTIDFAD_NTIDFADKEY As Integer) As INCOME_NTDISPOSALFA_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NTIDFAD_NTIDFADKEY}),INCOME_NTDISPOSALFA_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTDISPOSALFA_DETAILDataTable = CType(MyBase.Clone,INCOME_NTDISPOSALFA_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTDISPOSALFA_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIDFAD_KEY = MyBase.Columns("NTIDFAD_KEY")
            Me.columnNTIDFAD_NTIDFAKEY = MyBase.Columns("NTIDFAD_NTIDFAKEY")
            Me.columnNTIDFAD_NTIDFADKEY = MyBase.Columns("NTIDFAD_NTIDFADKEY")
            Me.columnNTIDFAD_DESC = MyBase.Columns("NTIDFAD_DESC")
            Me.columnNTIDFAD_AMOUNT = MyBase.Columns("NTIDFAD_AMOUNT")
            Me.columnNTIDFAD_NOTE = MyBase.Columns("NTIDFAD_NOTE")
            Me.columnNTIDFAD_SOURCENO = MyBase.Columns("NTIDFAD_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIDFAD_KEY = New Global.System.Data.DataColumn("NTIDFAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_KEY)
            Me.columnNTIDFAD_NTIDFAKEY = New Global.System.Data.DataColumn("NTIDFAD_NTIDFAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_NTIDFAKEY)
            Me.columnNTIDFAD_NTIDFADKEY = New Global.System.Data.DataColumn("NTIDFAD_NTIDFADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_NTIDFADKEY)
            Me.columnNTIDFAD_DESC = New Global.System.Data.DataColumn("NTIDFAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_DESC)
            Me.columnNTIDFAD_AMOUNT = New Global.System.Data.DataColumn("NTIDFAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_AMOUNT)
            Me.columnNTIDFAD_NOTE = New Global.System.Data.DataColumn("NTIDFAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_NOTE)
            Me.columnNTIDFAD_SOURCENO = New Global.System.Data.DataColumn("NTIDFAD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDFAD_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIDFAD_NTIDFADKEY}, true))
            Me.columnNTIDFAD_NTIDFADKEY.AutoIncrement = true
            Me.columnNTIDFAD_NTIDFADKEY.AllowDBNull = false
            Me.columnNTIDFAD_NTIDFADKEY.Unique = true
            Me.columnNTIDFAD_DESC.MaxLength = 255
            Me.columnNTIDFAD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIDFAD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTDISPOSALFA_DETAILRow() As INCOME_NTDISPOSALFA_DETAILRow
            Return CType(Me.NewRow,INCOME_NTDISPOSALFA_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTDISPOSALFA_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTDISPOSALFA_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTDISPOSALFA_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFA_DETAILRowChanged(Me, New INCOME_NTDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTDISPOSALFA_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFA_DETAILRowChanging(Me, New INCOME_NTDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTDISPOSALFA_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFA_DETAILRowDeleted(Me, New INCOME_NTDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTDISPOSALFA_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALFA_DETAILRowDeleting(Me, New INCOME_NTDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTDISPOSALFA_DETAILRow(ByVal row As INCOME_NTDISPOSALFA_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTDISPOSALFA_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTDISPOSALINVESTDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTDISPOSALINVESTRow)
        
        Private columnNTIDI_KEY As Global.System.Data.DataColumn
        
        Private columnNTIDI_NTIDIKEY As Global.System.Data.DataColumn
        
        Private columnNTIDI_DESC As Global.System.Data.DataColumn
        
        Private columnNTIDI_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIDI_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIDI_DETAIL As Global.System.Data.DataColumn
        
        Private columnNTIDI_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTDISPOSALINVEST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_NTIDIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_NTIDIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDI_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTDISPOSALINVESTRow
            Get
                Return CType(Me.Rows(index),INCOME_NTDISPOSALINVESTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVESTRowChanging As INCOME_NTDISPOSALINVESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVESTRowChanged As INCOME_NTDISPOSALINVESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVESTRowDeleting As INCOME_NTDISPOSALINVESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVESTRowDeleted As INCOME_NTDISPOSALINVESTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTDISPOSALINVESTRow(ByVal row As INCOME_NTDISPOSALINVESTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTDISPOSALINVESTRow(ByVal NTIDI_KEY As Integer, ByVal NTIDI_DESC As String, ByVal NTIDI_AMOUNT As Decimal, ByVal NTIDI_NOTE As String, ByVal NTIDI_DETAIL As String, ByVal NTIDI_SOURCENO As Integer) As INCOME_NTDISPOSALINVESTRow
            Dim rowINCOME_NTDISPOSALINVESTRow As INCOME_NTDISPOSALINVESTRow = CType(Me.NewRow,INCOME_NTDISPOSALINVESTRow)
            Dim columnValuesArray() As Object = New Object() {NTIDI_KEY, Nothing, NTIDI_DESC, NTIDI_AMOUNT, NTIDI_NOTE, NTIDI_DETAIL, NTIDI_SOURCENO}
            rowINCOME_NTDISPOSALINVESTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTDISPOSALINVESTRow)
            Return rowINCOME_NTDISPOSALINVESTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIDI_NTIDIKEY(ByVal NTIDI_NTIDIKEY As Integer) As INCOME_NTDISPOSALINVESTRow
            Return CType(Me.Rows.Find(New Object() {NTIDI_NTIDIKEY}),INCOME_NTDISPOSALINVESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTDISPOSALINVESTDataTable = CType(MyBase.Clone,INCOME_NTDISPOSALINVESTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTDISPOSALINVESTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIDI_KEY = MyBase.Columns("NTIDI_KEY")
            Me.columnNTIDI_NTIDIKEY = MyBase.Columns("NTIDI_NTIDIKEY")
            Me.columnNTIDI_DESC = MyBase.Columns("NTIDI_DESC")
            Me.columnNTIDI_AMOUNT = MyBase.Columns("NTIDI_AMOUNT")
            Me.columnNTIDI_NOTE = MyBase.Columns("NTIDI_NOTE")
            Me.columnNTIDI_DETAIL = MyBase.Columns("NTIDI_DETAIL")
            Me.columnNTIDI_SOURCENO = MyBase.Columns("NTIDI_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIDI_KEY = New Global.System.Data.DataColumn("NTIDI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_KEY)
            Me.columnNTIDI_NTIDIKEY = New Global.System.Data.DataColumn("NTIDI_NTIDIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_NTIDIKEY)
            Me.columnNTIDI_DESC = New Global.System.Data.DataColumn("NTIDI_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_DESC)
            Me.columnNTIDI_AMOUNT = New Global.System.Data.DataColumn("NTIDI_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_AMOUNT)
            Me.columnNTIDI_NOTE = New Global.System.Data.DataColumn("NTIDI_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_NOTE)
            Me.columnNTIDI_DETAIL = New Global.System.Data.DataColumn("NTIDI_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_DETAIL)
            Me.columnNTIDI_SOURCENO = New Global.System.Data.DataColumn("NTIDI_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDI_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIDI_NTIDIKEY}, true))
            Me.columnNTIDI_NTIDIKEY.AutoIncrement = true
            Me.columnNTIDI_NTIDIKEY.AllowDBNull = false
            Me.columnNTIDI_NTIDIKEY.Unique = true
            Me.columnNTIDI_DESC.MaxLength = 255
            Me.columnNTIDI_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIDI_NOTE.MaxLength = 3000
            Me.columnNTIDI_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTDISPOSALINVESTRow() As INCOME_NTDISPOSALINVESTRow
            Return CType(Me.NewRow,INCOME_NTDISPOSALINVESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTDISPOSALINVESTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTDISPOSALINVESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTDISPOSALINVESTRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVESTRowChanged(Me, New INCOME_NTDISPOSALINVESTRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTDISPOSALINVESTRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVESTRowChanging(Me, New INCOME_NTDISPOSALINVESTRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTDISPOSALINVESTRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVESTRowDeleted(Me, New INCOME_NTDISPOSALINVESTRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTDISPOSALINVESTRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVESTRowDeleting(Me, New INCOME_NTDISPOSALINVESTRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTDISPOSALINVESTRow(ByVal row As INCOME_NTDISPOSALINVESTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTDISPOSALINVESTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTDISPOSALINVEST_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTDISPOSALINVEST_DETAILRow)
        
        Private columnNTIDID_KEY As Global.System.Data.DataColumn
        
        Private columnNTIDID_NTIDIKEY As Global.System.Data.DataColumn
        
        Private columnNTIDID_NTIDIDKEY As Global.System.Data.DataColumn
        
        Private columnNTIDID_DESC As Global.System.Data.DataColumn
        
        Private columnNTIDID_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIDID_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIDID_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTDISPOSALINVEST_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_NTIDIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_NTIDIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_NTIDIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_NTIDIDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIDID_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIDID_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTDISPOSALINVEST_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NTDISPOSALINVEST_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVEST_DETAILRowChanging As INCOME_NTDISPOSALINVEST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVEST_DETAILRowChanged As INCOME_NTDISPOSALINVEST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVEST_DETAILRowDeleting As INCOME_NTDISPOSALINVEST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTDISPOSALINVEST_DETAILRowDeleted As INCOME_NTDISPOSALINVEST_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTDISPOSALINVEST_DETAILRow(ByVal row As INCOME_NTDISPOSALINVEST_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTDISPOSALINVEST_DETAILRow(ByVal NTIDID_KEY As Integer, ByVal parentINCOME_NTDISPOSALINVESTRowByFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL As INCOME_NTDISPOSALINVESTRow, ByVal NTIDID_DESC As String, ByVal NTIDID_AMOUNT As Decimal, ByVal NTIDID_NOTE As String, ByVal NTIDID_SOURCENO As Integer) As INCOME_NTDISPOSALINVEST_DETAILRow
            Dim rowINCOME_NTDISPOSALINVEST_DETAILRow As INCOME_NTDISPOSALINVEST_DETAILRow = CType(Me.NewRow,INCOME_NTDISPOSALINVEST_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NTIDID_KEY, Nothing, Nothing, NTIDID_DESC, NTIDID_AMOUNT, NTIDID_NOTE, NTIDID_SOURCENO}
            If (Not (parentINCOME_NTDISPOSALINVESTRowByFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NTDISPOSALINVESTRowByFK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL(1)
            End If
            rowINCOME_NTDISPOSALINVEST_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTDISPOSALINVEST_DETAILRow)
            Return rowINCOME_NTDISPOSALINVEST_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIDID_NTIDIDKEY(ByVal NTIDID_NTIDIDKEY As Integer) As INCOME_NTDISPOSALINVEST_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NTIDID_NTIDIDKEY}),INCOME_NTDISPOSALINVEST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTDISPOSALINVEST_DETAILDataTable = CType(MyBase.Clone,INCOME_NTDISPOSALINVEST_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTDISPOSALINVEST_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIDID_KEY = MyBase.Columns("NTIDID_KEY")
            Me.columnNTIDID_NTIDIKEY = MyBase.Columns("NTIDID_NTIDIKEY")
            Me.columnNTIDID_NTIDIDKEY = MyBase.Columns("NTIDID_NTIDIDKEY")
            Me.columnNTIDID_DESC = MyBase.Columns("NTIDID_DESC")
            Me.columnNTIDID_AMOUNT = MyBase.Columns("NTIDID_AMOUNT")
            Me.columnNTIDID_NOTE = MyBase.Columns("NTIDID_NOTE")
            Me.columnNTIDID_SOURCENO = MyBase.Columns("NTIDID_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIDID_KEY = New Global.System.Data.DataColumn("NTIDID_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_KEY)
            Me.columnNTIDID_NTIDIKEY = New Global.System.Data.DataColumn("NTIDID_NTIDIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_NTIDIKEY)
            Me.columnNTIDID_NTIDIDKEY = New Global.System.Data.DataColumn("NTIDID_NTIDIDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_NTIDIDKEY)
            Me.columnNTIDID_DESC = New Global.System.Data.DataColumn("NTIDID_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_DESC)
            Me.columnNTIDID_AMOUNT = New Global.System.Data.DataColumn("NTIDID_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_AMOUNT)
            Me.columnNTIDID_NOTE = New Global.System.Data.DataColumn("NTIDID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_NOTE)
            Me.columnNTIDID_SOURCENO = New Global.System.Data.DataColumn("NTIDID_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIDID_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIDID_NTIDIDKEY}, true))
            Me.columnNTIDID_NTIDIDKEY.AutoIncrement = true
            Me.columnNTIDID_NTIDIDKEY.AllowDBNull = false
            Me.columnNTIDID_NTIDIDKEY.Unique = true
            Me.columnNTIDID_DESC.MaxLength = 255
            Me.columnNTIDID_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIDID_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTDISPOSALINVEST_DETAILRow() As INCOME_NTDISPOSALINVEST_DETAILRow
            Return CType(Me.NewRow,INCOME_NTDISPOSALINVEST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTDISPOSALINVEST_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTDISPOSALINVEST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTDISPOSALINVEST_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVEST_DETAILRowChanged(Me, New INCOME_NTDISPOSALINVEST_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVEST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTDISPOSALINVEST_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVEST_DETAILRowChanging(Me, New INCOME_NTDISPOSALINVEST_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVEST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTDISPOSALINVEST_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVEST_DETAILRowDeleted(Me, New INCOME_NTDISPOSALINVEST_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVEST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTDISPOSALINVEST_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTDISPOSALINVEST_DETAILRowDeleting(Me, New INCOME_NTDISPOSALINVEST_DETAILRowChangeEvent(CType(e.Row,INCOME_NTDISPOSALINVEST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTDISPOSALINVEST_DETAILRow(ByVal row As INCOME_NTDISPOSALINVEST_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTDISPOSALINVEST_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTFOREIGNINCREMDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTFOREIGNINCREMRow)
        
        Private columnNTIFIR_KEY As Global.System.Data.DataColumn
        
        Private columnNTIFIR_NTIFIRKEY As Global.System.Data.DataColumn
        
        Private columnNTIFIR_DESC As Global.System.Data.DataColumn
        
        Private columnNTIFIR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIFIR_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIFIR_DETAIL As Global.System.Data.DataColumn
        
        Private columnNTIFIR_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTFOREIGNINCREM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_NTIFIRKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_NTIFIRKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIR_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIR_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTFOREIGNINCREMRow
            Get
                Return CType(Me.Rows(index),INCOME_NTFOREIGNINCREMRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREMRowChanging As INCOME_NTFOREIGNINCREMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREMRowChanged As INCOME_NTFOREIGNINCREMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREMRowDeleting As INCOME_NTFOREIGNINCREMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREMRowDeleted As INCOME_NTFOREIGNINCREMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTFOREIGNINCREMRow(ByVal row As INCOME_NTFOREIGNINCREMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTFOREIGNINCREMRow(ByVal NTIFIR_KEY As Integer, ByVal NTIFIR_DESC As String, ByVal NTIFIR_AMOUNT As Decimal, ByVal NTIFIR_NOTE As String, ByVal NTIFIR_DETAIL As String, ByVal NTIFIR_SOURCENO As Integer) As INCOME_NTFOREIGNINCREMRow
            Dim rowINCOME_NTFOREIGNINCREMRow As INCOME_NTFOREIGNINCREMRow = CType(Me.NewRow,INCOME_NTFOREIGNINCREMRow)
            Dim columnValuesArray() As Object = New Object() {NTIFIR_KEY, Nothing, NTIFIR_DESC, NTIFIR_AMOUNT, NTIFIR_NOTE, NTIFIR_DETAIL, NTIFIR_SOURCENO}
            rowINCOME_NTFOREIGNINCREMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTFOREIGNINCREMRow)
            Return rowINCOME_NTFOREIGNINCREMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIFIR_NTIFIRKEY(ByVal NTIFIR_NTIFIRKEY As Integer) As INCOME_NTFOREIGNINCREMRow
            Return CType(Me.Rows.Find(New Object() {NTIFIR_NTIFIRKEY}),INCOME_NTFOREIGNINCREMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTFOREIGNINCREMDataTable = CType(MyBase.Clone,INCOME_NTFOREIGNINCREMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTFOREIGNINCREMDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIFIR_KEY = MyBase.Columns("NTIFIR_KEY")
            Me.columnNTIFIR_NTIFIRKEY = MyBase.Columns("NTIFIR_NTIFIRKEY")
            Me.columnNTIFIR_DESC = MyBase.Columns("NTIFIR_DESC")
            Me.columnNTIFIR_AMOUNT = MyBase.Columns("NTIFIR_AMOUNT")
            Me.columnNTIFIR_NOTE = MyBase.Columns("NTIFIR_NOTE")
            Me.columnNTIFIR_DETAIL = MyBase.Columns("NTIFIR_DETAIL")
            Me.columnNTIFIR_SOURCENO = MyBase.Columns("NTIFIR_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIFIR_KEY = New Global.System.Data.DataColumn("NTIFIR_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_KEY)
            Me.columnNTIFIR_NTIFIRKEY = New Global.System.Data.DataColumn("NTIFIR_NTIFIRKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_NTIFIRKEY)
            Me.columnNTIFIR_DESC = New Global.System.Data.DataColumn("NTIFIR_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_DESC)
            Me.columnNTIFIR_AMOUNT = New Global.System.Data.DataColumn("NTIFIR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_AMOUNT)
            Me.columnNTIFIR_NOTE = New Global.System.Data.DataColumn("NTIFIR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_NOTE)
            Me.columnNTIFIR_DETAIL = New Global.System.Data.DataColumn("NTIFIR_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_DETAIL)
            Me.columnNTIFIR_SOURCENO = New Global.System.Data.DataColumn("NTIFIR_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIR_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIFIR_NTIFIRKEY}, true))
            Me.columnNTIFIR_NTIFIRKEY.AutoIncrement = true
            Me.columnNTIFIR_NTIFIRKEY.AllowDBNull = false
            Me.columnNTIFIR_NTIFIRKEY.Unique = true
            Me.columnNTIFIR_DESC.MaxLength = 255
            Me.columnNTIFIR_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIFIR_NOTE.MaxLength = 3000
            Me.columnNTIFIR_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTFOREIGNINCREMRow() As INCOME_NTFOREIGNINCREMRow
            Return CType(Me.NewRow,INCOME_NTFOREIGNINCREMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTFOREIGNINCREMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTFOREIGNINCREMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTFOREIGNINCREMRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREMRowChanged(Me, New INCOME_NTFOREIGNINCREMRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTFOREIGNINCREMRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREMRowChanging(Me, New INCOME_NTFOREIGNINCREMRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTFOREIGNINCREMRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREMRowDeleted(Me, New INCOME_NTFOREIGNINCREMRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTFOREIGNINCREMRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREMRowDeleting(Me, New INCOME_NTFOREIGNINCREMRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTFOREIGNINCREMRow(ByVal row As INCOME_NTFOREIGNINCREMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTFOREIGNINCREMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTFOREIGNINCREM_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTFOREIGNINCREM_DETAILRow)
        
        Private columnNTIFIRD_KEY As Global.System.Data.DataColumn
        
        Private columnNTIFIRD_NTIFIRKEY As Global.System.Data.DataColumn
        
        Private columnNTIFIRD_NTIFIRDKEY As Global.System.Data.DataColumn
        
        Private columnNTIFIRD_DESC As Global.System.Data.DataColumn
        
        Private columnNTIFIRD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIFIRD_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIFIRD_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTFOREIGNINCREM_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_NTIFIRKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_NTIFIRKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_NTIFIRDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_NTIFIRDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIFIRD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIFIRD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTFOREIGNINCREM_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NTFOREIGNINCREM_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREM_DETAILRowChanging As INCOME_NTFOREIGNINCREM_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREM_DETAILRowChanged As INCOME_NTFOREIGNINCREM_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREM_DETAILRowDeleting As INCOME_NTFOREIGNINCREM_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTFOREIGNINCREM_DETAILRowDeleted As INCOME_NTFOREIGNINCREM_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTFOREIGNINCREM_DETAILRow(ByVal row As INCOME_NTFOREIGNINCREM_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTFOREIGNINCREM_DETAILRow(ByVal NTIFIRD_KEY As Integer, ByVal parentINCOME_NTFOREIGNINCREMRowByFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL As INCOME_NTFOREIGNINCREMRow, ByVal NTIFIRD_DESC As String, ByVal NTIFIRD_AMOUNT As Decimal, ByVal NTIFIRD_NOTE As String, ByVal NTIFIRD_SOURCENO As Integer) As INCOME_NTFOREIGNINCREM_DETAILRow
            Dim rowINCOME_NTFOREIGNINCREM_DETAILRow As INCOME_NTFOREIGNINCREM_DETAILRow = CType(Me.NewRow,INCOME_NTFOREIGNINCREM_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NTIFIRD_KEY, Nothing, Nothing, NTIFIRD_DESC, NTIFIRD_AMOUNT, NTIFIRD_NOTE, NTIFIRD_SOURCENO}
            If (Not (parentINCOME_NTFOREIGNINCREMRowByFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NTFOREIGNINCREMRowByFK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL(1)
            End If
            rowINCOME_NTFOREIGNINCREM_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTFOREIGNINCREM_DETAILRow)
            Return rowINCOME_NTFOREIGNINCREM_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIFIRD_NTIFIRDKEY(ByVal NTIFIRD_NTIFIRDKEY As Integer) As INCOME_NTFOREIGNINCREM_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NTIFIRD_NTIFIRDKEY}),INCOME_NTFOREIGNINCREM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTFOREIGNINCREM_DETAILDataTable = CType(MyBase.Clone,INCOME_NTFOREIGNINCREM_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTFOREIGNINCREM_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIFIRD_KEY = MyBase.Columns("NTIFIRD_KEY")
            Me.columnNTIFIRD_NTIFIRKEY = MyBase.Columns("NTIFIRD_NTIFIRKEY")
            Me.columnNTIFIRD_NTIFIRDKEY = MyBase.Columns("NTIFIRD_NTIFIRDKEY")
            Me.columnNTIFIRD_DESC = MyBase.Columns("NTIFIRD_DESC")
            Me.columnNTIFIRD_AMOUNT = MyBase.Columns("NTIFIRD_AMOUNT")
            Me.columnNTIFIRD_NOTE = MyBase.Columns("NTIFIRD_NOTE")
            Me.columnNTIFIRD_SOURCENO = MyBase.Columns("NTIFIRD_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIFIRD_KEY = New Global.System.Data.DataColumn("NTIFIRD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_KEY)
            Me.columnNTIFIRD_NTIFIRKEY = New Global.System.Data.DataColumn("NTIFIRD_NTIFIRKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_NTIFIRKEY)
            Me.columnNTIFIRD_NTIFIRDKEY = New Global.System.Data.DataColumn("NTIFIRD_NTIFIRDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_NTIFIRDKEY)
            Me.columnNTIFIRD_DESC = New Global.System.Data.DataColumn("NTIFIRD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_DESC)
            Me.columnNTIFIRD_AMOUNT = New Global.System.Data.DataColumn("NTIFIRD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_AMOUNT)
            Me.columnNTIFIRD_NOTE = New Global.System.Data.DataColumn("NTIFIRD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_NOTE)
            Me.columnNTIFIRD_SOURCENO = New Global.System.Data.DataColumn("NTIFIRD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIFIRD_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIFIRD_NTIFIRDKEY}, true))
            Me.columnNTIFIRD_NTIFIRDKEY.AutoIncrement = true
            Me.columnNTIFIRD_NTIFIRDKEY.AllowDBNull = false
            Me.columnNTIFIRD_NTIFIRDKEY.Unique = true
            Me.columnNTIFIRD_DESC.MaxLength = 255
            Me.columnNTIFIRD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIFIRD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTFOREIGNINCREM_DETAILRow() As INCOME_NTFOREIGNINCREM_DETAILRow
            Return CType(Me.NewRow,INCOME_NTFOREIGNINCREM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTFOREIGNINCREM_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTFOREIGNINCREM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTFOREIGNINCREM_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREM_DETAILRowChanged(Me, New INCOME_NTFOREIGNINCREM_DETAILRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTFOREIGNINCREM_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREM_DETAILRowChanging(Me, New INCOME_NTFOREIGNINCREM_DETAILRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTFOREIGNINCREM_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREM_DETAILRowDeleted(Me, New INCOME_NTFOREIGNINCREM_DETAILRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTFOREIGNINCREM_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTFOREIGNINCREM_DETAILRowDeleting(Me, New INCOME_NTFOREIGNINCREM_DETAILRowChangeEvent(CType(e.Row,INCOME_NTFOREIGNINCREM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTFOREIGNINCREM_DETAILRow(ByVal row As INCOME_NTFOREIGNINCREM_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTFOREIGNINCREM_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTREALFEDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTREALFERow)
        
        Private columnNTIRFECT_KEY As Global.System.Data.DataColumn
        
        Private columnNTIRFECT_NTIRFECTKEY As Global.System.Data.DataColumn
        
        Private columnNTIRFECT_DESC As Global.System.Data.DataColumn
        
        Private columnNTIRFECT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIRFECT_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIRFECT_DETAIL As Global.System.Data.DataColumn
        
        Private columnNTIRFECT_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTREALFE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_NTIRFECTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_NTIRFECTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECT_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECT_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTREALFERow
            Get
                Return CType(Me.Rows(index),INCOME_NTREALFERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFERowChanging As INCOME_NTREALFERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFERowChanged As INCOME_NTREALFERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFERowDeleting As INCOME_NTREALFERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFERowDeleted As INCOME_NTREALFERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTREALFERow(ByVal row As INCOME_NTREALFERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTREALFERow(ByVal NTIRFECT_KEY As Integer, ByVal NTIRFECT_DESC As String, ByVal NTIRFECT_AMOUNT As Decimal, ByVal NTIRFECT_NOTE As String, ByVal NTIRFECT_DETAIL As String, ByVal NTIRFECT_SOURCENO As Integer) As INCOME_NTREALFERow
            Dim rowINCOME_NTREALFERow As INCOME_NTREALFERow = CType(Me.NewRow,INCOME_NTREALFERow)
            Dim columnValuesArray() As Object = New Object() {NTIRFECT_KEY, Nothing, NTIRFECT_DESC, NTIRFECT_AMOUNT, NTIRFECT_NOTE, NTIRFECT_DETAIL, NTIRFECT_SOURCENO}
            rowINCOME_NTREALFERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTREALFERow)
            Return rowINCOME_NTREALFERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIRFECT_NTIRFECTKEY(ByVal NTIRFECT_NTIRFECTKEY As Integer) As INCOME_NTREALFERow
            Return CType(Me.Rows.Find(New Object() {NTIRFECT_NTIRFECTKEY}),INCOME_NTREALFERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTREALFEDataTable = CType(MyBase.Clone,INCOME_NTREALFEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTREALFEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIRFECT_KEY = MyBase.Columns("NTIRFECT_KEY")
            Me.columnNTIRFECT_NTIRFECTKEY = MyBase.Columns("NTIRFECT_NTIRFECTKEY")
            Me.columnNTIRFECT_DESC = MyBase.Columns("NTIRFECT_DESC")
            Me.columnNTIRFECT_AMOUNT = MyBase.Columns("NTIRFECT_AMOUNT")
            Me.columnNTIRFECT_NOTE = MyBase.Columns("NTIRFECT_NOTE")
            Me.columnNTIRFECT_DETAIL = MyBase.Columns("NTIRFECT_DETAIL")
            Me.columnNTIRFECT_SOURCENO = MyBase.Columns("NTIRFECT_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIRFECT_KEY = New Global.System.Data.DataColumn("NTIRFECT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_KEY)
            Me.columnNTIRFECT_NTIRFECTKEY = New Global.System.Data.DataColumn("NTIRFECT_NTIRFECTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_NTIRFECTKEY)
            Me.columnNTIRFECT_DESC = New Global.System.Data.DataColumn("NTIRFECT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_DESC)
            Me.columnNTIRFECT_AMOUNT = New Global.System.Data.DataColumn("NTIRFECT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_AMOUNT)
            Me.columnNTIRFECT_NOTE = New Global.System.Data.DataColumn("NTIRFECT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_NOTE)
            Me.columnNTIRFECT_DETAIL = New Global.System.Data.DataColumn("NTIRFECT_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_DETAIL)
            Me.columnNTIRFECT_SOURCENO = New Global.System.Data.DataColumn("NTIRFECT_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECT_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIRFECT_NTIRFECTKEY}, true))
            Me.columnNTIRFECT_NTIRFECTKEY.AutoIncrement = true
            Me.columnNTIRFECT_NTIRFECTKEY.AllowDBNull = false
            Me.columnNTIRFECT_NTIRFECTKEY.Unique = true
            Me.columnNTIRFECT_DESC.MaxLength = 255
            Me.columnNTIRFECT_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIRFECT_NOTE.MaxLength = 3000
            Me.columnNTIRFECT_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTREALFERow() As INCOME_NTREALFERow
            Return CType(Me.NewRow,INCOME_NTREALFERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTREALFERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTREALFERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTREALFERowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFERowChanged(Me, New INCOME_NTREALFERowChangeEvent(CType(e.Row,INCOME_NTREALFERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTREALFERowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFERowChanging(Me, New INCOME_NTREALFERowChangeEvent(CType(e.Row,INCOME_NTREALFERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTREALFERowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFERowDeleted(Me, New INCOME_NTREALFERowChangeEvent(CType(e.Row,INCOME_NTREALFERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTREALFERowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFERowDeleting(Me, New INCOME_NTREALFERowChangeEvent(CType(e.Row,INCOME_NTREALFERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTREALFERow(ByVal row As INCOME_NTREALFERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTREALFEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTREALFE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTREALFE_DETAILRow)
        
        Private columnNTIRFECTD_KEY As Global.System.Data.DataColumn
        
        Private columnNTIRFECTD_NTIRFECTKEY As Global.System.Data.DataColumn
        
        Private columnNTIRFECTD_NTIRFECTDKEY As Global.System.Data.DataColumn
        
        Private columnNTIRFECTD_DESC As Global.System.Data.DataColumn
        
        Private columnNTIRFECTD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIRFECTD_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIRFECTD_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTREALFE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_NTIRFECTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_NTIRFECTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_NTIRFECTDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_NTIRFECTDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIRFECTD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIRFECTD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTREALFE_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NTREALFE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFE_DETAILRowChanging As INCOME_NTREALFE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFE_DETAILRowChanged As INCOME_NTREALFE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFE_DETAILRowDeleting As INCOME_NTREALFE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTREALFE_DETAILRowDeleted As INCOME_NTREALFE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTREALFE_DETAILRow(ByVal row As INCOME_NTREALFE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTREALFE_DETAILRow(ByVal NTIRFECTD_KEY As Integer, ByVal parentINCOME_NTREALFERowByFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL As INCOME_NTREALFERow, ByVal NTIRFECTD_DESC As String, ByVal NTIRFECTD_AMOUNT As Decimal, ByVal NTIRFECTD_NOTE As String, ByVal NTIRFECTD_SOURCENO As Integer) As INCOME_NTREALFE_DETAILRow
            Dim rowINCOME_NTREALFE_DETAILRow As INCOME_NTREALFE_DETAILRow = CType(Me.NewRow,INCOME_NTREALFE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NTIRFECTD_KEY, Nothing, Nothing, NTIRFECTD_DESC, NTIRFECTD_AMOUNT, NTIRFECTD_NOTE, NTIRFECTD_SOURCENO}
            If (Not (parentINCOME_NTREALFERowByFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NTREALFERowByFK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL(1)
            End If
            rowINCOME_NTREALFE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTREALFE_DETAILRow)
            Return rowINCOME_NTREALFE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIRFECTD_NTIRFECTDKEY(ByVal NTIRFECTD_NTIRFECTDKEY As Integer) As INCOME_NTREALFE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NTIRFECTD_NTIRFECTDKEY}),INCOME_NTREALFE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTREALFE_DETAILDataTable = CType(MyBase.Clone,INCOME_NTREALFE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTREALFE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIRFECTD_KEY = MyBase.Columns("NTIRFECTD_KEY")
            Me.columnNTIRFECTD_NTIRFECTKEY = MyBase.Columns("NTIRFECTD_NTIRFECTKEY")
            Me.columnNTIRFECTD_NTIRFECTDKEY = MyBase.Columns("NTIRFECTD_NTIRFECTDKEY")
            Me.columnNTIRFECTD_DESC = MyBase.Columns("NTIRFECTD_DESC")
            Me.columnNTIRFECTD_AMOUNT = MyBase.Columns("NTIRFECTD_AMOUNT")
            Me.columnNTIRFECTD_NOTE = MyBase.Columns("NTIRFECTD_NOTE")
            Me.columnNTIRFECTD_SOURCENO = MyBase.Columns("NTIRFECTD_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIRFECTD_KEY = New Global.System.Data.DataColumn("NTIRFECTD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_KEY)
            Me.columnNTIRFECTD_NTIRFECTKEY = New Global.System.Data.DataColumn("NTIRFECTD_NTIRFECTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_NTIRFECTKEY)
            Me.columnNTIRFECTD_NTIRFECTDKEY = New Global.System.Data.DataColumn("NTIRFECTD_NTIRFECTDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_NTIRFECTDKEY)
            Me.columnNTIRFECTD_DESC = New Global.System.Data.DataColumn("NTIRFECTD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_DESC)
            Me.columnNTIRFECTD_AMOUNT = New Global.System.Data.DataColumn("NTIRFECTD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_AMOUNT)
            Me.columnNTIRFECTD_NOTE = New Global.System.Data.DataColumn("NTIRFECTD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_NOTE)
            Me.columnNTIRFECTD_SOURCENO = New Global.System.Data.DataColumn("NTIRFECTD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIRFECTD_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIRFECTD_NTIRFECTDKEY}, true))
            Me.columnNTIRFECTD_NTIRFECTDKEY.AutoIncrement = true
            Me.columnNTIRFECTD_NTIRFECTDKEY.AllowDBNull = false
            Me.columnNTIRFECTD_NTIRFECTDKEY.Unique = true
            Me.columnNTIRFECTD_DESC.MaxLength = 255
            Me.columnNTIRFECTD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIRFECTD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTREALFE_DETAILRow() As INCOME_NTREALFE_DETAILRow
            Return CType(Me.NewRow,INCOME_NTREALFE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTREALFE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTREALFE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTREALFE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFE_DETAILRowChanged(Me, New INCOME_NTREALFE_DETAILRowChangeEvent(CType(e.Row,INCOME_NTREALFE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTREALFE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFE_DETAILRowChanging(Me, New INCOME_NTREALFE_DETAILRowChangeEvent(CType(e.Row,INCOME_NTREALFE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTREALFE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFE_DETAILRowDeleted(Me, New INCOME_NTREALFE_DETAILRowChangeEvent(CType(e.Row,INCOME_NTREALFE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTREALFE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTREALFE_DETAILRowDeleting(Me, New INCOME_NTREALFE_DETAILRowChangeEvent(CType(e.Row,INCOME_NTREALFE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTREALFE_DETAILRow(ByVal row As INCOME_NTREALFE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTREALFE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTUREALFENTDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTUREALFENTRow)
        
        Private columnNTIUNT_KEY As Global.System.Data.DataColumn
        
        Private columnNTIUNT_NTIUNTKEY As Global.System.Data.DataColumn
        
        Private columnNTIUNT_DESC As Global.System.Data.DataColumn
        
        Private columnNTIUNT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIUNT_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIUNT_DETAIL As Global.System.Data.DataColumn
        
        Private columnNTIUNT_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTUREALFENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_NTIUNTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_NTIUNTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNT_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNT_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTUREALFENTRow
            Get
                Return CType(Me.Rows(index),INCOME_NTUREALFENTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENTRowChanging As INCOME_NTUREALFENTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENTRowChanged As INCOME_NTUREALFENTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENTRowDeleting As INCOME_NTUREALFENTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENTRowDeleted As INCOME_NTUREALFENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTUREALFENTRow(ByVal row As INCOME_NTUREALFENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTUREALFENTRow(ByVal NTIUNT_KEY As Integer, ByVal NTIUNT_DESC As String, ByVal NTIUNT_AMOUNT As Decimal, ByVal NTIUNT_NOTE As String, ByVal NTIUNT_DETAIL As String, ByVal NTIUNT_SOURCENO As Integer) As INCOME_NTUREALFENTRow
            Dim rowINCOME_NTUREALFENTRow As INCOME_NTUREALFENTRow = CType(Me.NewRow,INCOME_NTUREALFENTRow)
            Dim columnValuesArray() As Object = New Object() {NTIUNT_KEY, Nothing, NTIUNT_DESC, NTIUNT_AMOUNT, NTIUNT_NOTE, NTIUNT_DETAIL, NTIUNT_SOURCENO}
            rowINCOME_NTUREALFENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTUREALFENTRow)
            Return rowINCOME_NTUREALFENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIUNT_NTIUNTKEY(ByVal NTIUNT_NTIUNTKEY As Integer) As INCOME_NTUREALFENTRow
            Return CType(Me.Rows.Find(New Object() {NTIUNT_NTIUNTKEY}),INCOME_NTUREALFENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTUREALFENTDataTable = CType(MyBase.Clone,INCOME_NTUREALFENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTUREALFENTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIUNT_KEY = MyBase.Columns("NTIUNT_KEY")
            Me.columnNTIUNT_NTIUNTKEY = MyBase.Columns("NTIUNT_NTIUNTKEY")
            Me.columnNTIUNT_DESC = MyBase.Columns("NTIUNT_DESC")
            Me.columnNTIUNT_AMOUNT = MyBase.Columns("NTIUNT_AMOUNT")
            Me.columnNTIUNT_NOTE = MyBase.Columns("NTIUNT_NOTE")
            Me.columnNTIUNT_DETAIL = MyBase.Columns("NTIUNT_DETAIL")
            Me.columnNTIUNT_SOURCENO = MyBase.Columns("NTIUNT_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIUNT_KEY = New Global.System.Data.DataColumn("NTIUNT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_KEY)
            Me.columnNTIUNT_NTIUNTKEY = New Global.System.Data.DataColumn("NTIUNT_NTIUNTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_NTIUNTKEY)
            Me.columnNTIUNT_DESC = New Global.System.Data.DataColumn("NTIUNT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_DESC)
            Me.columnNTIUNT_AMOUNT = New Global.System.Data.DataColumn("NTIUNT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_AMOUNT)
            Me.columnNTIUNT_NOTE = New Global.System.Data.DataColumn("NTIUNT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_NOTE)
            Me.columnNTIUNT_DETAIL = New Global.System.Data.DataColumn("NTIUNT_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_DETAIL)
            Me.columnNTIUNT_SOURCENO = New Global.System.Data.DataColumn("NTIUNT_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNT_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIUNT_NTIUNTKEY}, true))
            Me.columnNTIUNT_NTIUNTKEY.AutoIncrement = true
            Me.columnNTIUNT_NTIUNTKEY.AllowDBNull = false
            Me.columnNTIUNT_NTIUNTKEY.Unique = true
            Me.columnNTIUNT_DESC.MaxLength = 255
            Me.columnNTIUNT_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIUNT_NOTE.MaxLength = 3000
            Me.columnNTIUNT_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTUREALFENTRow() As INCOME_NTUREALFENTRow
            Return CType(Me.NewRow,INCOME_NTUREALFENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTUREALFENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTUREALFENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTUREALFENTRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENTRowChanged(Me, New INCOME_NTUREALFENTRowChangeEvent(CType(e.Row,INCOME_NTUREALFENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTUREALFENTRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENTRowChanging(Me, New INCOME_NTUREALFENTRowChangeEvent(CType(e.Row,INCOME_NTUREALFENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTUREALFENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENTRowDeleted(Me, New INCOME_NTUREALFENTRowChangeEvent(CType(e.Row,INCOME_NTUREALFENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTUREALFENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENTRowDeleting(Me, New INCOME_NTUREALFENTRowChangeEvent(CType(e.Row,INCOME_NTUREALFENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTUREALFENTRow(ByVal row As INCOME_NTUREALFENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTUREALFENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTUREALFENT_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTUREALFENT_DETAILRow)
        
        Private columnNTIUNTD_KEY As Global.System.Data.DataColumn
        
        Private columnNTIUNTD_NTIUNTKEY As Global.System.Data.DataColumn
        
        Private columnNTIUNTD_NTIUNTDKEY As Global.System.Data.DataColumn
        
        Private columnNTIUNTD_DESC As Global.System.Data.DataColumn
        
        Private columnNTIUNTD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIUNTD_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIUNTD_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTUREALFENT_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_NTIUNTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_NTIUNTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_NTIUNTDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_NTIUNTDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUNTD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUNTD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTUREALFENT_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NTUREALFENT_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENT_DETAILRowChanging As INCOME_NTUREALFENT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENT_DETAILRowChanged As INCOME_NTUREALFENT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENT_DETAILRowDeleting As INCOME_NTUREALFENT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFENT_DETAILRowDeleted As INCOME_NTUREALFENT_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTUREALFENT_DETAILRow(ByVal row As INCOME_NTUREALFENT_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTUREALFENT_DETAILRow(ByVal NTIUNTD_KEY As Integer, ByVal parentINCOME_NTUREALFENTRowByFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL As INCOME_NTUREALFENTRow, ByVal NTIUNTD_DESC As String, ByVal NTIUNTD_AMOUNT As Decimal, ByVal NTIUNTD_NOTE As String, ByVal NTIUNTD_SOURCENO As Integer) As INCOME_NTUREALFENT_DETAILRow
            Dim rowINCOME_NTUREALFENT_DETAILRow As INCOME_NTUREALFENT_DETAILRow = CType(Me.NewRow,INCOME_NTUREALFENT_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NTIUNTD_KEY, Nothing, Nothing, NTIUNTD_DESC, NTIUNTD_AMOUNT, NTIUNTD_NOTE, NTIUNTD_SOURCENO}
            If (Not (parentINCOME_NTUREALFENTRowByFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NTUREALFENTRowByFK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL(1)
            End If
            rowINCOME_NTUREALFENT_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTUREALFENT_DETAILRow)
            Return rowINCOME_NTUREALFENT_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIUNTD_NTIUNTDKEY(ByVal NTIUNTD_NTIUNTDKEY As Integer) As INCOME_NTUREALFENT_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NTIUNTD_NTIUNTDKEY}),INCOME_NTUREALFENT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTUREALFENT_DETAILDataTable = CType(MyBase.Clone,INCOME_NTUREALFENT_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTUREALFENT_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIUNTD_KEY = MyBase.Columns("NTIUNTD_KEY")
            Me.columnNTIUNTD_NTIUNTKEY = MyBase.Columns("NTIUNTD_NTIUNTKEY")
            Me.columnNTIUNTD_NTIUNTDKEY = MyBase.Columns("NTIUNTD_NTIUNTDKEY")
            Me.columnNTIUNTD_DESC = MyBase.Columns("NTIUNTD_DESC")
            Me.columnNTIUNTD_AMOUNT = MyBase.Columns("NTIUNTD_AMOUNT")
            Me.columnNTIUNTD_NOTE = MyBase.Columns("NTIUNTD_NOTE")
            Me.columnNTIUNTD_SOURCENO = MyBase.Columns("NTIUNTD_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIUNTD_KEY = New Global.System.Data.DataColumn("NTIUNTD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_KEY)
            Me.columnNTIUNTD_NTIUNTKEY = New Global.System.Data.DataColumn("NTIUNTD_NTIUNTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_NTIUNTKEY)
            Me.columnNTIUNTD_NTIUNTDKEY = New Global.System.Data.DataColumn("NTIUNTD_NTIUNTDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_NTIUNTDKEY)
            Me.columnNTIUNTD_DESC = New Global.System.Data.DataColumn("NTIUNTD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_DESC)
            Me.columnNTIUNTD_AMOUNT = New Global.System.Data.DataColumn("NTIUNTD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_AMOUNT)
            Me.columnNTIUNTD_NOTE = New Global.System.Data.DataColumn("NTIUNTD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_NOTE)
            Me.columnNTIUNTD_SOURCENO = New Global.System.Data.DataColumn("NTIUNTD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUNTD_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIUNTD_NTIUNTDKEY}, true))
            Me.columnNTIUNTD_NTIUNTDKEY.AutoIncrement = true
            Me.columnNTIUNTD_NTIUNTDKEY.AllowDBNull = false
            Me.columnNTIUNTD_NTIUNTDKEY.Unique = true
            Me.columnNTIUNTD_DESC.MaxLength = 255
            Me.columnNTIUNTD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIUNTD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTUREALFENT_DETAILRow() As INCOME_NTUREALFENT_DETAILRow
            Return CType(Me.NewRow,INCOME_NTUREALFENT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTUREALFENT_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTUREALFENT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTUREALFENT_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENT_DETAILRowChanged(Me, New INCOME_NTUREALFENT_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTUREALFENT_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENT_DETAILRowChanging(Me, New INCOME_NTUREALFENT_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTUREALFENT_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENT_DETAILRowDeleted(Me, New INCOME_NTUREALFENT_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTUREALFENT_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFENT_DETAILRowDeleting(Me, New INCOME_NTUREALFENT_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTUREALFENT_DETAILRow(ByVal row As INCOME_NTUREALFENT_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTUREALFENT_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTUREALFETDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTUREALFETRow)
        
        Private columnNTIUT_KEY As Global.System.Data.DataColumn
        
        Private columnNTIUT_NTIUTKEY As Global.System.Data.DataColumn
        
        Private columnNTIUT_DESC As Global.System.Data.DataColumn
        
        Private columnNTIUT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIUT_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIUT_DETAIL As Global.System.Data.DataColumn
        
        Private columnNTIUT_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTUREALFET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_NTIUTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_NTIUTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUT_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUT_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTUREALFETRow
            Get
                Return CType(Me.Rows(index),INCOME_NTUREALFETRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFETRowChanging As INCOME_NTUREALFETRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFETRowChanged As INCOME_NTUREALFETRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFETRowDeleting As INCOME_NTUREALFETRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFETRowDeleted As INCOME_NTUREALFETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTUREALFETRow(ByVal row As INCOME_NTUREALFETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTUREALFETRow(ByVal NTIUT_KEY As Integer, ByVal NTIUT_DESC As String, ByVal NTIUT_AMOUNT As Decimal, ByVal NTIUT_NOTE As String, ByVal NTIUT_DETAIL As String, ByVal NTIUT_SOURCENO As Integer) As INCOME_NTUREALFETRow
            Dim rowINCOME_NTUREALFETRow As INCOME_NTUREALFETRow = CType(Me.NewRow,INCOME_NTUREALFETRow)
            Dim columnValuesArray() As Object = New Object() {NTIUT_KEY, Nothing, NTIUT_DESC, NTIUT_AMOUNT, NTIUT_NOTE, NTIUT_DETAIL, NTIUT_SOURCENO}
            rowINCOME_NTUREALFETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTUREALFETRow)
            Return rowINCOME_NTUREALFETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIUT_NTIUTKEY(ByVal NTIUT_NTIUTKEY As Integer) As INCOME_NTUREALFETRow
            Return CType(Me.Rows.Find(New Object() {NTIUT_NTIUTKEY}),INCOME_NTUREALFETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTUREALFETDataTable = CType(MyBase.Clone,INCOME_NTUREALFETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTUREALFETDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIUT_KEY = MyBase.Columns("NTIUT_KEY")
            Me.columnNTIUT_NTIUTKEY = MyBase.Columns("NTIUT_NTIUTKEY")
            Me.columnNTIUT_DESC = MyBase.Columns("NTIUT_DESC")
            Me.columnNTIUT_AMOUNT = MyBase.Columns("NTIUT_AMOUNT")
            Me.columnNTIUT_NOTE = MyBase.Columns("NTIUT_NOTE")
            Me.columnNTIUT_DETAIL = MyBase.Columns("NTIUT_DETAIL")
            Me.columnNTIUT_SOURCENO = MyBase.Columns("NTIUT_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIUT_KEY = New Global.System.Data.DataColumn("NTIUT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_KEY)
            Me.columnNTIUT_NTIUTKEY = New Global.System.Data.DataColumn("NTIUT_NTIUTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_NTIUTKEY)
            Me.columnNTIUT_DESC = New Global.System.Data.DataColumn("NTIUT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_DESC)
            Me.columnNTIUT_AMOUNT = New Global.System.Data.DataColumn("NTIUT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_AMOUNT)
            Me.columnNTIUT_NOTE = New Global.System.Data.DataColumn("NTIUT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_NOTE)
            Me.columnNTIUT_DETAIL = New Global.System.Data.DataColumn("NTIUT_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_DETAIL)
            Me.columnNTIUT_SOURCENO = New Global.System.Data.DataColumn("NTIUT_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUT_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIUT_NTIUTKEY}, true))
            Me.columnNTIUT_NTIUTKEY.AutoIncrement = true
            Me.columnNTIUT_NTIUTKEY.AllowDBNull = false
            Me.columnNTIUT_NTIUTKEY.Unique = true
            Me.columnNTIUT_DESC.MaxLength = 255
            Me.columnNTIUT_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIUT_NOTE.MaxLength = 3000
            Me.columnNTIUT_DETAIL.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTUREALFETRow() As INCOME_NTUREALFETRow
            Return CType(Me.NewRow,INCOME_NTUREALFETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTUREALFETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTUREALFETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTUREALFETRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFETRowChanged(Me, New INCOME_NTUREALFETRowChangeEvent(CType(e.Row,INCOME_NTUREALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTUREALFETRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFETRowChanging(Me, New INCOME_NTUREALFETRowChangeEvent(CType(e.Row,INCOME_NTUREALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTUREALFETRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFETRowDeleted(Me, New INCOME_NTUREALFETRowChangeEvent(CType(e.Row,INCOME_NTUREALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTUREALFETRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFETRowDeleting(Me, New INCOME_NTUREALFETRowChangeEvent(CType(e.Row,INCOME_NTUREALFETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTUREALFETRow(ByVal row As INCOME_NTUREALFETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTUREALFETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_NTUREALFET_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_NTUREALFET_DETAILRow)
        
        Private columnNTIUTD_KEY As Global.System.Data.DataColumn
        
        Private columnNTIUTD_NTIUTKEY As Global.System.Data.DataColumn
        
        Private columnNTIUTD_NTIUTDKEY As Global.System.Data.DataColumn
        
        Private columnNTIUTD_DESC As Global.System.Data.DataColumn
        
        Private columnNTIUTD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNTIUTD_NOTE As Global.System.Data.DataColumn
        
        Private columnNTIUTD_SOURCENO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_NTUREALFET_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_NTIUTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_NTIUTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_NTIUTDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_NTIUTDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIUTD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIUTD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_NTUREALFET_DETAILRow
            Get
                Return CType(Me.Rows(index),INCOME_NTUREALFET_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFET_DETAILRowChanging As INCOME_NTUREALFET_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFET_DETAILRowChanged As INCOME_NTUREALFET_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFET_DETAILRowDeleting As INCOME_NTUREALFET_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_NTUREALFET_DETAILRowDeleted As INCOME_NTUREALFET_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_NTUREALFET_DETAILRow(ByVal row As INCOME_NTUREALFET_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddINCOME_NTUREALFET_DETAILRow(ByVal NTIUTD_KEY As Integer, ByVal parentINCOME_NTUREALFETRowByFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL As INCOME_NTUREALFETRow, ByVal NTIUTD_DESC As String, ByVal NTIUTD_AMOUNT As Decimal, ByVal NTIUTD_NOTE As String, ByVal NTIUTD_SOURCENO As Integer) As INCOME_NTUREALFET_DETAILRow
            Dim rowINCOME_NTUREALFET_DETAILRow As INCOME_NTUREALFET_DETAILRow = CType(Me.NewRow,INCOME_NTUREALFET_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {NTIUTD_KEY, Nothing, Nothing, NTIUTD_DESC, NTIUTD_AMOUNT, NTIUTD_NOTE, NTIUTD_SOURCENO}
            If (Not (parentINCOME_NTUREALFETRowByFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentINCOME_NTUREALFETRowByFK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL(1)
            End If
            rowINCOME_NTUREALFET_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_NTUREALFET_DETAILRow)
            Return rowINCOME_NTUREALFET_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByNTIUTD_NTIUTDKEY(ByVal NTIUTD_NTIUTDKEY As Integer) As INCOME_NTUREALFET_DETAILRow
            Return CType(Me.Rows.Find(New Object() {NTIUTD_NTIUTDKEY}),INCOME_NTUREALFET_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_NTUREALFET_DETAILDataTable = CType(MyBase.Clone,INCOME_NTUREALFET_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_NTUREALFET_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNTIUTD_KEY = MyBase.Columns("NTIUTD_KEY")
            Me.columnNTIUTD_NTIUTKEY = MyBase.Columns("NTIUTD_NTIUTKEY")
            Me.columnNTIUTD_NTIUTDKEY = MyBase.Columns("NTIUTD_NTIUTDKEY")
            Me.columnNTIUTD_DESC = MyBase.Columns("NTIUTD_DESC")
            Me.columnNTIUTD_AMOUNT = MyBase.Columns("NTIUTD_AMOUNT")
            Me.columnNTIUTD_NOTE = MyBase.Columns("NTIUTD_NOTE")
            Me.columnNTIUTD_SOURCENO = MyBase.Columns("NTIUTD_SOURCENO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNTIUTD_KEY = New Global.System.Data.DataColumn("NTIUTD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_KEY)
            Me.columnNTIUTD_NTIUTKEY = New Global.System.Data.DataColumn("NTIUTD_NTIUTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_NTIUTKEY)
            Me.columnNTIUTD_NTIUTDKEY = New Global.System.Data.DataColumn("NTIUTD_NTIUTDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_NTIUTDKEY)
            Me.columnNTIUTD_DESC = New Global.System.Data.DataColumn("NTIUTD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_DESC)
            Me.columnNTIUTD_AMOUNT = New Global.System.Data.DataColumn("NTIUTD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_AMOUNT)
            Me.columnNTIUTD_NOTE = New Global.System.Data.DataColumn("NTIUTD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_NOTE)
            Me.columnNTIUTD_SOURCENO = New Global.System.Data.DataColumn("NTIUTD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIUTD_SOURCENO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNTIUTD_NTIUTDKEY}, true))
            Me.columnNTIUTD_NTIUTDKEY.AutoIncrement = true
            Me.columnNTIUTD_NTIUTDKEY.AllowDBNull = false
            Me.columnNTIUTD_NTIUTDKEY.Unique = true
            Me.columnNTIUTD_DESC.MaxLength = 255
            Me.columnNTIUTD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnNTIUTD_NOTE.MaxLength = 3000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_NTUREALFET_DETAILRow() As INCOME_NTUREALFET_DETAILRow
            Return CType(Me.NewRow,INCOME_NTUREALFET_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_NTUREALFET_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_NTUREALFET_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_NTUREALFET_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFET_DETAILRowChanged(Me, New INCOME_NTUREALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_NTUREALFET_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFET_DETAILRowChanging(Me, New INCOME_NTUREALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_NTUREALFET_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFET_DETAILRowDeleted(Me, New INCOME_NTUREALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_NTUREALFET_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_NTUREALFET_DETAILRowDeleting(Me, New INCOME_NTUREALFET_DETAILRowChangeEvent(CType(e.Row,INCOME_NTUREALFET_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_NTUREALFET_DETAILRow(ByVal row As INCOME_NTUREALFET_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_NTUREALFET_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_INTERESTDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_INTERESTRow)
        
        Private columnEXI_KEY As Global.System.Data.DataColumn
        
        Private columnEXI_EXIKEY As Global.System.Data.DataColumn
        
        Private columnEXI_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXI_DESC As Global.System.Data.DataColumn
        
        Private columnEXI_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXI_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXI_NOTE As Global.System.Data.DataColumn
        
        Private columnEXI_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXI_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_INTEREST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_EXIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_EXIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXI_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXI_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_INTERESTRow
            Get
                Return CType(Me.Rows(index),EXPENSES_INTERESTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTERESTRowChanging As EXPENSES_INTERESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTERESTRowChanged As EXPENSES_INTERESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTERESTRowDeleting As EXPENSES_INTERESTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTERESTRowDeleted As EXPENSES_INTERESTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_INTERESTRow(ByVal row As EXPENSES_INTERESTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_INTERESTRow(ByVal EXI_KEY As Integer, ByVal EXI_SOURCENO As Integer, ByVal EXI_DESC As String, ByVal EXI_AMOUNT As Decimal, ByVal EXI_DEDUCTIBLE As Boolean, ByVal EXI_NOTE As String, ByVal EXI_DETAIL As String, ByVal EXI_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_INTERESTRow
            Dim rowEXPENSES_INTERESTRow As EXPENSES_INTERESTRow = CType(Me.NewRow,EXPENSES_INTERESTRow)
            Dim columnValuesArray() As Object = New Object() {EXI_KEY, Nothing, EXI_SOURCENO, EXI_DESC, EXI_AMOUNT, EXI_DEDUCTIBLE, EXI_NOTE, EXI_DETAIL, EXI_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_INTERESTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_INTERESTRow)
            Return rowEXPENSES_INTERESTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXI_EXIKEY(ByVal EXI_EXIKEY As Integer) As EXPENSES_INTERESTRow
            Return CType(Me.Rows.Find(New Object() {EXI_EXIKEY}),EXPENSES_INTERESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_INTERESTDataTable = CType(MyBase.Clone,EXPENSES_INTERESTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_INTERESTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXI_KEY = MyBase.Columns("EXI_KEY")
            Me.columnEXI_EXIKEY = MyBase.Columns("EXI_EXIKEY")
            Me.columnEXI_SOURCENO = MyBase.Columns("EXI_SOURCENO")
            Me.columnEXI_DESC = MyBase.Columns("EXI_DESC")
            Me.columnEXI_AMOUNT = MyBase.Columns("EXI_AMOUNT")
            Me.columnEXI_DEDUCTIBLE = MyBase.Columns("EXI_DEDUCTIBLE")
            Me.columnEXI_NOTE = MyBase.Columns("EXI_NOTE")
            Me.columnEXI_DETAIL = MyBase.Columns("EXI_DETAIL")
            Me.columnEXI_DEDUCTIBLE_ADD = MyBase.Columns("EXI_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXI_KEY = New Global.System.Data.DataColumn("EXI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_KEY)
            Me.columnEXI_EXIKEY = New Global.System.Data.DataColumn("EXI_EXIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_EXIKEY)
            Me.columnEXI_SOURCENO = New Global.System.Data.DataColumn("EXI_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_SOURCENO)
            Me.columnEXI_DESC = New Global.System.Data.DataColumn("EXI_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_DESC)
            Me.columnEXI_AMOUNT = New Global.System.Data.DataColumn("EXI_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_AMOUNT)
            Me.columnEXI_DEDUCTIBLE = New Global.System.Data.DataColumn("EXI_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_DEDUCTIBLE)
            Me.columnEXI_NOTE = New Global.System.Data.DataColumn("EXI_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_NOTE)
            Me.columnEXI_DETAIL = New Global.System.Data.DataColumn("EXI_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_DETAIL)
            Me.columnEXI_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXI_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXI_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXI_EXIKEY}, true))
            Me.columnEXI_EXIKEY.AutoIncrement = true
            Me.columnEXI_EXIKEY.AllowDBNull = false
            Me.columnEXI_EXIKEY.Unique = true
            Me.columnEXI_DESC.MaxLength = 255
            Me.columnEXI_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXI_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXI_NOTE.MaxLength = 3000
            Me.columnEXI_DETAIL.MaxLength = 30
            Me.columnEXI_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_INTERESTRow() As EXPENSES_INTERESTRow
            Return CType(Me.NewRow,EXPENSES_INTERESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_INTERESTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_INTERESTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_INTERESTRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTERESTRowChanged(Me, New EXPENSES_INTERESTRowChangeEvent(CType(e.Row,EXPENSES_INTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_INTERESTRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTERESTRowChanging(Me, New EXPENSES_INTERESTRowChangeEvent(CType(e.Row,EXPENSES_INTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_INTERESTRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTERESTRowDeleted(Me, New EXPENSES_INTERESTRowChangeEvent(CType(e.Row,EXPENSES_INTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_INTERESTRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTERESTRowDeleting(Me, New EXPENSES_INTERESTRowChangeEvent(CType(e.Row,EXPENSES_INTERESTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_INTERESTRow(ByVal row As EXPENSES_INTERESTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_INTERESTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_INTEREST_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_INTEREST_DETAILRow)
        
        Private columnEXID_KEY As Global.System.Data.DataColumn
        
        Private columnEXID_EXIKEY As Global.System.Data.DataColumn
        
        Private columnEXID_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXID_EXIDKEY As Global.System.Data.DataColumn
        
        Private columnEXID_DESC As Global.System.Data.DataColumn
        
        Private columnEXID_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXID_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXID_NOTE As Global.System.Data.DataColumn
        
        Private columnEXID_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_INTEREST_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_EXIKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_EXIKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_EXIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_EXIDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXID_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXID_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_INTEREST_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_INTEREST_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTEREST_DETAILRowChanging As EXPENSES_INTEREST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTEREST_DETAILRowChanged As EXPENSES_INTEREST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTEREST_DETAILRowDeleting As EXPENSES_INTEREST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_INTEREST_DETAILRowDeleted As EXPENSES_INTEREST_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_INTEREST_DETAILRow(ByVal row As EXPENSES_INTEREST_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_INTEREST_DETAILRow(ByVal EXID_KEY As Integer, ByVal parentEXPENSES_INTERESTRowByFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL As EXPENSES_INTERESTRow, ByVal EXID_SOURCENO As Integer, ByVal EXID_DESC As String, ByVal EXID_DEDUCTIBLE As Boolean, ByVal EXID_AMOUNT As Decimal, ByVal EXID_NOTE As String, ByVal EXID_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_INTEREST_DETAILRow
            Dim rowEXPENSES_INTEREST_DETAILRow As EXPENSES_INTEREST_DETAILRow = CType(Me.NewRow,EXPENSES_INTEREST_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXID_KEY, Nothing, EXID_SOURCENO, Nothing, EXID_DESC, EXID_DEDUCTIBLE, EXID_AMOUNT, EXID_NOTE, EXID_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_INTERESTRowByFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_INTERESTRowByFK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL(1)
            End If
            rowEXPENSES_INTEREST_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_INTEREST_DETAILRow)
            Return rowEXPENSES_INTEREST_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXID_EXIDKEY(ByVal EXID_EXIDKEY As Integer) As EXPENSES_INTEREST_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXID_EXIDKEY}),EXPENSES_INTEREST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_INTEREST_DETAILDataTable = CType(MyBase.Clone,EXPENSES_INTEREST_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_INTEREST_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXID_KEY = MyBase.Columns("EXID_KEY")
            Me.columnEXID_EXIKEY = MyBase.Columns("EXID_EXIKEY")
            Me.columnEXID_SOURCENO = MyBase.Columns("EXID_SOURCENO")
            Me.columnEXID_EXIDKEY = MyBase.Columns("EXID_EXIDKEY")
            Me.columnEXID_DESC = MyBase.Columns("EXID_DESC")
            Me.columnEXID_DEDUCTIBLE = MyBase.Columns("EXID_DEDUCTIBLE")
            Me.columnEXID_AMOUNT = MyBase.Columns("EXID_AMOUNT")
            Me.columnEXID_NOTE = MyBase.Columns("EXID_NOTE")
            Me.columnEXID_DEDUCTIBLE_ADD = MyBase.Columns("EXID_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXID_KEY = New Global.System.Data.DataColumn("EXID_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_KEY)
            Me.columnEXID_EXIKEY = New Global.System.Data.DataColumn("EXID_EXIKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_EXIKEY)
            Me.columnEXID_SOURCENO = New Global.System.Data.DataColumn("EXID_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_SOURCENO)
            Me.columnEXID_EXIDKEY = New Global.System.Data.DataColumn("EXID_EXIDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_EXIDKEY)
            Me.columnEXID_DESC = New Global.System.Data.DataColumn("EXID_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_DESC)
            Me.columnEXID_DEDUCTIBLE = New Global.System.Data.DataColumn("EXID_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_DEDUCTIBLE)
            Me.columnEXID_AMOUNT = New Global.System.Data.DataColumn("EXID_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_AMOUNT)
            Me.columnEXID_NOTE = New Global.System.Data.DataColumn("EXID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_NOTE)
            Me.columnEXID_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXID_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXID_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXID_EXIDKEY}, true))
            Me.columnEXID_EXIDKEY.AutoIncrement = true
            Me.columnEXID_EXIDKEY.AllowDBNull = false
            Me.columnEXID_EXIDKEY.Unique = true
            Me.columnEXID_DESC.MaxLength = 255
            Me.columnEXID_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXID_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXID_NOTE.MaxLength = 3000
            Me.columnEXID_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_INTEREST_DETAILRow() As EXPENSES_INTEREST_DETAILRow
            Return CType(Me.NewRow,EXPENSES_INTEREST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_INTEREST_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_INTEREST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_INTEREST_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTEREST_DETAILRowChanged(Me, New EXPENSES_INTEREST_DETAILRowChangeEvent(CType(e.Row,EXPENSES_INTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_INTEREST_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTEREST_DETAILRowChanging(Me, New EXPENSES_INTEREST_DETAILRowChangeEvent(CType(e.Row,EXPENSES_INTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_INTEREST_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTEREST_DETAILRowDeleted(Me, New EXPENSES_INTEREST_DETAILRowChangeEvent(CType(e.Row,EXPENSES_INTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_INTEREST_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_INTEREST_DETAILRowDeleting(Me, New EXPENSES_INTEREST_DETAILRowChangeEvent(CType(e.Row,EXPENSES_INTEREST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_INTEREST_DETAILRow(ByVal row As EXPENSES_INTEREST_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_INTEREST_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_LEGALDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_LEGALRow)
        
        Private columnEXL_KEY As Global.System.Data.DataColumn
        
        Private columnEXL_EXLKEY As Global.System.Data.DataColumn
        
        Private columnEXL_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXL_DESC As Global.System.Data.DataColumn
        
        Private columnEXL_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXL_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXL_NOTE As Global.System.Data.DataColumn
        
        Private columnEXL_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXL_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_LEGAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_EXLKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_EXLKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXL_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXL_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_LEGALRow
            Get
                Return CType(Me.Rows(index),EXPENSES_LEGALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGALRowChanging As EXPENSES_LEGALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGALRowChanged As EXPENSES_LEGALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGALRowDeleting As EXPENSES_LEGALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGALRowDeleted As EXPENSES_LEGALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_LEGALRow(ByVal row As EXPENSES_LEGALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_LEGALRow(ByVal EXL_KEY As Integer, ByVal EXL_SOURCENO As Integer, ByVal EXL_DESC As String, ByVal EXL_AMOUNT As Decimal, ByVal EXL_DEDUCTIBLE As Boolean, ByVal EXL_NOTE As String, ByVal EXL_DETAIL As String, ByVal EXL_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_LEGALRow
            Dim rowEXPENSES_LEGALRow As EXPENSES_LEGALRow = CType(Me.NewRow,EXPENSES_LEGALRow)
            Dim columnValuesArray() As Object = New Object() {EXL_KEY, Nothing, EXL_SOURCENO, EXL_DESC, EXL_AMOUNT, EXL_DEDUCTIBLE, EXL_NOTE, EXL_DETAIL, EXL_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_LEGALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_LEGALRow)
            Return rowEXPENSES_LEGALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXL_EXLKEY(ByVal EXL_EXLKEY As Integer) As EXPENSES_LEGALRow
            Return CType(Me.Rows.Find(New Object() {EXL_EXLKEY}),EXPENSES_LEGALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_LEGALDataTable = CType(MyBase.Clone,EXPENSES_LEGALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_LEGALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXL_KEY = MyBase.Columns("EXL_KEY")
            Me.columnEXL_EXLKEY = MyBase.Columns("EXL_EXLKEY")
            Me.columnEXL_SOURCENO = MyBase.Columns("EXL_SOURCENO")
            Me.columnEXL_DESC = MyBase.Columns("EXL_DESC")
            Me.columnEXL_AMOUNT = MyBase.Columns("EXL_AMOUNT")
            Me.columnEXL_DEDUCTIBLE = MyBase.Columns("EXL_DEDUCTIBLE")
            Me.columnEXL_NOTE = MyBase.Columns("EXL_NOTE")
            Me.columnEXL_DETAIL = MyBase.Columns("EXL_DETAIL")
            Me.columnEXL_DEDUCTIBLE_ADD = MyBase.Columns("EXL_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXL_KEY = New Global.System.Data.DataColumn("EXL_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_KEY)
            Me.columnEXL_EXLKEY = New Global.System.Data.DataColumn("EXL_EXLKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_EXLKEY)
            Me.columnEXL_SOURCENO = New Global.System.Data.DataColumn("EXL_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_SOURCENO)
            Me.columnEXL_DESC = New Global.System.Data.DataColumn("EXL_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_DESC)
            Me.columnEXL_AMOUNT = New Global.System.Data.DataColumn("EXL_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_AMOUNT)
            Me.columnEXL_DEDUCTIBLE = New Global.System.Data.DataColumn("EXL_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_DEDUCTIBLE)
            Me.columnEXL_NOTE = New Global.System.Data.DataColumn("EXL_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_NOTE)
            Me.columnEXL_DETAIL = New Global.System.Data.DataColumn("EXL_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_DETAIL)
            Me.columnEXL_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXL_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXL_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXL_EXLKEY}, true))
            Me.columnEXL_EXLKEY.AutoIncrement = true
            Me.columnEXL_EXLKEY.AllowDBNull = false
            Me.columnEXL_EXLKEY.Unique = true
            Me.columnEXL_DESC.MaxLength = 255
            Me.columnEXL_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXL_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXL_NOTE.MaxLength = 3000
            Me.columnEXL_DETAIL.MaxLength = 30
            Me.columnEXL_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_LEGALRow() As EXPENSES_LEGALRow
            Return CType(Me.NewRow,EXPENSES_LEGALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_LEGALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_LEGALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_LEGALRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGALRowChanged(Me, New EXPENSES_LEGALRowChangeEvent(CType(e.Row,EXPENSES_LEGALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_LEGALRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGALRowChanging(Me, New EXPENSES_LEGALRowChangeEvent(CType(e.Row,EXPENSES_LEGALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_LEGALRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGALRowDeleted(Me, New EXPENSES_LEGALRowChangeEvent(CType(e.Row,EXPENSES_LEGALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_LEGALRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGALRowDeleting(Me, New EXPENSES_LEGALRowChangeEvent(CType(e.Row,EXPENSES_LEGALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_LEGALRow(ByVal row As EXPENSES_LEGALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_LEGALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_LEGAL_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_LEGAL_DETAILRow)
        
        Private columnEXLD_KEY As Global.System.Data.DataColumn
        
        Private columnEXLD_EXLKEY As Global.System.Data.DataColumn
        
        Private columnEXLD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXLD_EXLDKEY As Global.System.Data.DataColumn
        
        Private columnEXLD_DESC As Global.System.Data.DataColumn
        
        Private columnEXLD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXLD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXLD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXLD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_LEGAL_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_EXLKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_EXLKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_EXLDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_EXLDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXLD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXLD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_LEGAL_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_LEGAL_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGAL_DETAILRowChanging As EXPENSES_LEGAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGAL_DETAILRowChanged As EXPENSES_LEGAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGAL_DETAILRowDeleting As EXPENSES_LEGAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_LEGAL_DETAILRowDeleted As EXPENSES_LEGAL_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_LEGAL_DETAILRow(ByVal row As EXPENSES_LEGAL_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_LEGAL_DETAILRow(ByVal EXLD_KEY As Integer, ByVal parentEXPENSES_LEGALRowByFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL As EXPENSES_LEGALRow, ByVal EXLD_SOURCENO As Integer, ByVal EXLD_DESC As String, ByVal EXLD_DEDUCTIBLE As Boolean, ByVal EXLD_AMOUNT As Decimal, ByVal EXLD_NOTE As String, ByVal EXLD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_LEGAL_DETAILRow
            Dim rowEXPENSES_LEGAL_DETAILRow As EXPENSES_LEGAL_DETAILRow = CType(Me.NewRow,EXPENSES_LEGAL_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXLD_KEY, Nothing, EXLD_SOURCENO, Nothing, EXLD_DESC, EXLD_DEDUCTIBLE, EXLD_AMOUNT, EXLD_NOTE, EXLD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_LEGALRowByFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_LEGALRowByFK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL(1)
            End If
            rowEXPENSES_LEGAL_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_LEGAL_DETAILRow)
            Return rowEXPENSES_LEGAL_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXLD_EXLDKEY(ByVal EXLD_EXLDKEY As Integer) As EXPENSES_LEGAL_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXLD_EXLDKEY}),EXPENSES_LEGAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_LEGAL_DETAILDataTable = CType(MyBase.Clone,EXPENSES_LEGAL_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_LEGAL_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXLD_KEY = MyBase.Columns("EXLD_KEY")
            Me.columnEXLD_EXLKEY = MyBase.Columns("EXLD_EXLKEY")
            Me.columnEXLD_SOURCENO = MyBase.Columns("EXLD_SOURCENO")
            Me.columnEXLD_EXLDKEY = MyBase.Columns("EXLD_EXLDKEY")
            Me.columnEXLD_DESC = MyBase.Columns("EXLD_DESC")
            Me.columnEXLD_DEDUCTIBLE = MyBase.Columns("EXLD_DEDUCTIBLE")
            Me.columnEXLD_AMOUNT = MyBase.Columns("EXLD_AMOUNT")
            Me.columnEXLD_NOTE = MyBase.Columns("EXLD_NOTE")
            Me.columnEXLD_DEDUCTIBLE_ADD = MyBase.Columns("EXLD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXLD_KEY = New Global.System.Data.DataColumn("EXLD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_KEY)
            Me.columnEXLD_EXLKEY = New Global.System.Data.DataColumn("EXLD_EXLKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_EXLKEY)
            Me.columnEXLD_SOURCENO = New Global.System.Data.DataColumn("EXLD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_SOURCENO)
            Me.columnEXLD_EXLDKEY = New Global.System.Data.DataColumn("EXLD_EXLDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_EXLDKEY)
            Me.columnEXLD_DESC = New Global.System.Data.DataColumn("EXLD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_DESC)
            Me.columnEXLD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXLD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_DEDUCTIBLE)
            Me.columnEXLD_AMOUNT = New Global.System.Data.DataColumn("EXLD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_AMOUNT)
            Me.columnEXLD_NOTE = New Global.System.Data.DataColumn("EXLD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_NOTE)
            Me.columnEXLD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXLD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXLD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXLD_EXLDKEY}, true))
            Me.columnEXLD_EXLDKEY.AutoIncrement = true
            Me.columnEXLD_EXLDKEY.AllowDBNull = false
            Me.columnEXLD_EXLDKEY.Unique = true
            Me.columnEXLD_DESC.MaxLength = 255
            Me.columnEXLD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXLD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXLD_NOTE.MaxLength = 3000
            Me.columnEXLD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_LEGAL_DETAILRow() As EXPENSES_LEGAL_DETAILRow
            Return CType(Me.NewRow,EXPENSES_LEGAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_LEGAL_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_LEGAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_LEGAL_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGAL_DETAILRowChanged(Me, New EXPENSES_LEGAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_LEGAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_LEGAL_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGAL_DETAILRowChanging(Me, New EXPENSES_LEGAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_LEGAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_LEGAL_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGAL_DETAILRowDeleted(Me, New EXPENSES_LEGAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_LEGAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_LEGAL_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_LEGAL_DETAILRowDeleting(Me, New EXPENSES_LEGAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_LEGAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_LEGAL_DETAILRow(ByVal row As EXPENSES_LEGAL_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_LEGAL_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_TECH_FEEDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_TECH_FEERow)
        
        Private columnEXTF_KEY As Global.System.Data.DataColumn
        
        Private columnEXTF_EXTFKEY As Global.System.Data.DataColumn
        
        Private columnEXTF_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXTF_DESC As Global.System.Data.DataColumn
        
        Private columnEXTF_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXTF_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXTF_NOTE As Global.System.Data.DataColumn
        
        Private columnEXTF_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXTF_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_TECH_FEE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_EXTFKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_EXTFKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTF_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTF_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_TECH_FEERow
            Get
                Return CType(Me.Rows(index),EXPENSES_TECH_FEERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEERowChanging As EXPENSES_TECH_FEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEERowChanged As EXPENSES_TECH_FEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEERowDeleting As EXPENSES_TECH_FEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEERowDeleted As EXPENSES_TECH_FEERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_TECH_FEERow(ByVal row As EXPENSES_TECH_FEERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_TECH_FEERow(ByVal EXTF_KEY As Integer, ByVal EXTF_SOURCENO As Integer, ByVal EXTF_DESC As String, ByVal EXTF_AMOUNT As Decimal, ByVal EXTF_DEDUCTIBLE As Boolean, ByVal EXTF_NOTE As String, ByVal EXTF_DETAIL As String, ByVal EXTF_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_TECH_FEERow
            Dim rowEXPENSES_TECH_FEERow As EXPENSES_TECH_FEERow = CType(Me.NewRow,EXPENSES_TECH_FEERow)
            Dim columnValuesArray() As Object = New Object() {EXTF_KEY, Nothing, EXTF_SOURCENO, EXTF_DESC, EXTF_AMOUNT, EXTF_DEDUCTIBLE, EXTF_NOTE, EXTF_DETAIL, EXTF_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_TECH_FEERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_TECH_FEERow)
            Return rowEXPENSES_TECH_FEERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXTF_EXTFKEY(ByVal EXTF_EXTFKEY As Integer) As EXPENSES_TECH_FEERow
            Return CType(Me.Rows.Find(New Object() {EXTF_EXTFKEY}),EXPENSES_TECH_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_TECH_FEEDataTable = CType(MyBase.Clone,EXPENSES_TECH_FEEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_TECH_FEEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXTF_KEY = MyBase.Columns("EXTF_KEY")
            Me.columnEXTF_EXTFKEY = MyBase.Columns("EXTF_EXTFKEY")
            Me.columnEXTF_SOURCENO = MyBase.Columns("EXTF_SOURCENO")
            Me.columnEXTF_DESC = MyBase.Columns("EXTF_DESC")
            Me.columnEXTF_AMOUNT = MyBase.Columns("EXTF_AMOUNT")
            Me.columnEXTF_DEDUCTIBLE = MyBase.Columns("EXTF_DEDUCTIBLE")
            Me.columnEXTF_NOTE = MyBase.Columns("EXTF_NOTE")
            Me.columnEXTF_DETAIL = MyBase.Columns("EXTF_DETAIL")
            Me.columnEXTF_DEDUCTIBLE_ADD = MyBase.Columns("EXTF_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXTF_KEY = New Global.System.Data.DataColumn("EXTF_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_KEY)
            Me.columnEXTF_EXTFKEY = New Global.System.Data.DataColumn("EXTF_EXTFKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_EXTFKEY)
            Me.columnEXTF_SOURCENO = New Global.System.Data.DataColumn("EXTF_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_SOURCENO)
            Me.columnEXTF_DESC = New Global.System.Data.DataColumn("EXTF_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_DESC)
            Me.columnEXTF_AMOUNT = New Global.System.Data.DataColumn("EXTF_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_AMOUNT)
            Me.columnEXTF_DEDUCTIBLE = New Global.System.Data.DataColumn("EXTF_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_DEDUCTIBLE)
            Me.columnEXTF_NOTE = New Global.System.Data.DataColumn("EXTF_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_NOTE)
            Me.columnEXTF_DETAIL = New Global.System.Data.DataColumn("EXTF_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_DETAIL)
            Me.columnEXTF_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXTF_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTF_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXTF_EXTFKEY}, true))
            Me.columnEXTF_EXTFKEY.AutoIncrement = true
            Me.columnEXTF_EXTFKEY.AllowDBNull = false
            Me.columnEXTF_EXTFKEY.Unique = true
            Me.columnEXTF_DESC.MaxLength = 255
            Me.columnEXTF_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXTF_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXTF_NOTE.MaxLength = 3000
            Me.columnEXTF_DETAIL.MaxLength = 30
            Me.columnEXTF_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_TECH_FEERow() As EXPENSES_TECH_FEERow
            Return CType(Me.NewRow,EXPENSES_TECH_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_TECH_FEERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_TECH_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_TECH_FEERowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEERowChanged(Me, New EXPENSES_TECH_FEERowChangeEvent(CType(e.Row,EXPENSES_TECH_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_TECH_FEERowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEERowChanging(Me, New EXPENSES_TECH_FEERowChangeEvent(CType(e.Row,EXPENSES_TECH_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_TECH_FEERowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEERowDeleted(Me, New EXPENSES_TECH_FEERowChangeEvent(CType(e.Row,EXPENSES_TECH_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_TECH_FEERowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEERowDeleting(Me, New EXPENSES_TECH_FEERowChangeEvent(CType(e.Row,EXPENSES_TECH_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_TECH_FEERow(ByVal row As EXPENSES_TECH_FEERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_TECH_FEEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_TECH_FEE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_TECH_FEE_DETAILRow)
        
        Private columnEXTFD_KEY As Global.System.Data.DataColumn
        
        Private columnEXTFD_EXTFKEY As Global.System.Data.DataColumn
        
        Private columnEXTFD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXTFD_EXTFDKEY As Global.System.Data.DataColumn
        
        Private columnEXTFD_DESC As Global.System.Data.DataColumn
        
        Private columnEXTFD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXTFD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXTFD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXTFD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_TECH_FEE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_EXTFKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_EXTFKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_EXTFDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_EXTFDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTFD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTFD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_TECH_FEE_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_TECH_FEE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEE_DETAILRowChanging As EXPENSES_TECH_FEE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEE_DETAILRowChanged As EXPENSES_TECH_FEE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEE_DETAILRowDeleting As EXPENSES_TECH_FEE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TECH_FEE_DETAILRowDeleted As EXPENSES_TECH_FEE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_TECH_FEE_DETAILRow(ByVal row As EXPENSES_TECH_FEE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_TECH_FEE_DETAILRow(ByVal EXTFD_KEY As Integer, ByVal parentEXPENSES_TECH_FEERowByFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL As EXPENSES_TECH_FEERow, ByVal EXTFD_SOURCENO As Integer, ByVal EXTFD_DESC As String, ByVal EXTFD_DEDUCTIBLE As Boolean, ByVal EXTFD_AMOUNT As Decimal, ByVal EXTFD_NOTE As String, ByVal EXTFD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_TECH_FEE_DETAILRow
            Dim rowEXPENSES_TECH_FEE_DETAILRow As EXPENSES_TECH_FEE_DETAILRow = CType(Me.NewRow,EXPENSES_TECH_FEE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXTFD_KEY, Nothing, EXTFD_SOURCENO, Nothing, EXTFD_DESC, EXTFD_DEDUCTIBLE, EXTFD_AMOUNT, EXTFD_NOTE, EXTFD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_TECH_FEERowByFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_TECH_FEERowByFK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL(1)
            End If
            rowEXPENSES_TECH_FEE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_TECH_FEE_DETAILRow)
            Return rowEXPENSES_TECH_FEE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXTFD_EXTFDKEY(ByVal EXTFD_EXTFDKEY As Integer) As EXPENSES_TECH_FEE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXTFD_EXTFDKEY}),EXPENSES_TECH_FEE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_TECH_FEE_DETAILDataTable = CType(MyBase.Clone,EXPENSES_TECH_FEE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_TECH_FEE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXTFD_KEY = MyBase.Columns("EXTFD_KEY")
            Me.columnEXTFD_EXTFKEY = MyBase.Columns("EXTFD_EXTFKEY")
            Me.columnEXTFD_SOURCENO = MyBase.Columns("EXTFD_SOURCENO")
            Me.columnEXTFD_EXTFDKEY = MyBase.Columns("EXTFD_EXTFDKEY")
            Me.columnEXTFD_DESC = MyBase.Columns("EXTFD_DESC")
            Me.columnEXTFD_DEDUCTIBLE = MyBase.Columns("EXTFD_DEDUCTIBLE")
            Me.columnEXTFD_AMOUNT = MyBase.Columns("EXTFD_AMOUNT")
            Me.columnEXTFD_NOTE = MyBase.Columns("EXTFD_NOTE")
            Me.columnEXTFD_DEDUCTIBLE_ADD = MyBase.Columns("EXTFD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXTFD_KEY = New Global.System.Data.DataColumn("EXTFD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_KEY)
            Me.columnEXTFD_EXTFKEY = New Global.System.Data.DataColumn("EXTFD_EXTFKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_EXTFKEY)
            Me.columnEXTFD_SOURCENO = New Global.System.Data.DataColumn("EXTFD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_SOURCENO)
            Me.columnEXTFD_EXTFDKEY = New Global.System.Data.DataColumn("EXTFD_EXTFDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_EXTFDKEY)
            Me.columnEXTFD_DESC = New Global.System.Data.DataColumn("EXTFD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_DESC)
            Me.columnEXTFD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXTFD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_DEDUCTIBLE)
            Me.columnEXTFD_AMOUNT = New Global.System.Data.DataColumn("EXTFD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_AMOUNT)
            Me.columnEXTFD_NOTE = New Global.System.Data.DataColumn("EXTFD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_NOTE)
            Me.columnEXTFD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXTFD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTFD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXTFD_EXTFDKEY}, true))
            Me.columnEXTFD_EXTFDKEY.AutoIncrement = true
            Me.columnEXTFD_EXTFDKEY.AllowDBNull = false
            Me.columnEXTFD_EXTFDKEY.Unique = true
            Me.columnEXTFD_DESC.MaxLength = 255
            Me.columnEXTFD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXTFD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXTFD_NOTE.MaxLength = 3000
            Me.columnEXTFD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_TECH_FEE_DETAILRow() As EXPENSES_TECH_FEE_DETAILRow
            Return CType(Me.NewRow,EXPENSES_TECH_FEE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_TECH_FEE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_TECH_FEE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_TECH_FEE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEE_DETAILRowChanged(Me, New EXPENSES_TECH_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TECH_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_TECH_FEE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEE_DETAILRowChanging(Me, New EXPENSES_TECH_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TECH_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_TECH_FEE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEE_DETAILRowDeleted(Me, New EXPENSES_TECH_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TECH_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_TECH_FEE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TECH_FEE_DETAILRowDeleting(Me, New EXPENSES_TECH_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TECH_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_TECH_FEE_DETAILRow(ByVal row As EXPENSES_TECH_FEE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_TECH_FEE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_CONTRACTDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_CONTRACTRow)
        
        Private columnEXC_KEY As Global.System.Data.DataColumn
        
        Private columnEXC_EXCKEY As Global.System.Data.DataColumn
        
        Private columnEXC_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXC_DESC As Global.System.Data.DataColumn
        
        Private columnEXC_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXC_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXC_NOTE As Global.System.Data.DataColumn
        
        Private columnEXC_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXC_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_CONTRACT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_EXCKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_EXCKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXC_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXC_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_CONTRACTRow
            Get
                Return CType(Me.Rows(index),EXPENSES_CONTRACTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACTRowChanging As EXPENSES_CONTRACTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACTRowChanged As EXPENSES_CONTRACTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACTRowDeleting As EXPENSES_CONTRACTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACTRowDeleted As EXPENSES_CONTRACTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_CONTRACTRow(ByVal row As EXPENSES_CONTRACTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_CONTRACTRow(ByVal EXC_KEY As Integer, ByVal EXC_SOURCENO As Integer, ByVal EXC_DESC As String, ByVal EXC_AMOUNT As Decimal, ByVal EXC_DEDUCTIBLE As Boolean, ByVal EXC_NOTE As String, ByVal EXC_DETAIL As String, ByVal EXC_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_CONTRACTRow
            Dim rowEXPENSES_CONTRACTRow As EXPENSES_CONTRACTRow = CType(Me.NewRow,EXPENSES_CONTRACTRow)
            Dim columnValuesArray() As Object = New Object() {EXC_KEY, Nothing, EXC_SOURCENO, EXC_DESC, EXC_AMOUNT, EXC_DEDUCTIBLE, EXC_NOTE, EXC_DETAIL, EXC_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_CONTRACTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_CONTRACTRow)
            Return rowEXPENSES_CONTRACTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXC_EXCKEY(ByVal EXC_EXCKEY As Integer) As EXPENSES_CONTRACTRow
            Return CType(Me.Rows.Find(New Object() {EXC_EXCKEY}),EXPENSES_CONTRACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_CONTRACTDataTable = CType(MyBase.Clone,EXPENSES_CONTRACTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_CONTRACTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXC_KEY = MyBase.Columns("EXC_KEY")
            Me.columnEXC_EXCKEY = MyBase.Columns("EXC_EXCKEY")
            Me.columnEXC_SOURCENO = MyBase.Columns("EXC_SOURCENO")
            Me.columnEXC_DESC = MyBase.Columns("EXC_DESC")
            Me.columnEXC_AMOUNT = MyBase.Columns("EXC_AMOUNT")
            Me.columnEXC_DEDUCTIBLE = MyBase.Columns("EXC_DEDUCTIBLE")
            Me.columnEXC_NOTE = MyBase.Columns("EXC_NOTE")
            Me.columnEXC_DETAIL = MyBase.Columns("EXC_DETAIL")
            Me.columnEXC_DEDUCTIBLE_ADD = MyBase.Columns("EXC_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXC_KEY = New Global.System.Data.DataColumn("EXC_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_KEY)
            Me.columnEXC_EXCKEY = New Global.System.Data.DataColumn("EXC_EXCKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_EXCKEY)
            Me.columnEXC_SOURCENO = New Global.System.Data.DataColumn("EXC_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_SOURCENO)
            Me.columnEXC_DESC = New Global.System.Data.DataColumn("EXC_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_DESC)
            Me.columnEXC_AMOUNT = New Global.System.Data.DataColumn("EXC_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_AMOUNT)
            Me.columnEXC_DEDUCTIBLE = New Global.System.Data.DataColumn("EXC_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_DEDUCTIBLE)
            Me.columnEXC_NOTE = New Global.System.Data.DataColumn("EXC_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_NOTE)
            Me.columnEXC_DETAIL = New Global.System.Data.DataColumn("EXC_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_DETAIL)
            Me.columnEXC_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXC_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXC_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXC_EXCKEY}, true))
            Me.columnEXC_EXCKEY.AutoIncrement = true
            Me.columnEXC_EXCKEY.AllowDBNull = false
            Me.columnEXC_EXCKEY.Unique = true
            Me.columnEXC_DESC.MaxLength = 255
            Me.columnEXC_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXC_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXC_NOTE.MaxLength = 3000
            Me.columnEXC_DETAIL.MaxLength = 30
            Me.columnEXC_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_CONTRACTRow() As EXPENSES_CONTRACTRow
            Return CType(Me.NewRow,EXPENSES_CONTRACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_CONTRACTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_CONTRACTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_CONTRACTRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACTRowChanged(Me, New EXPENSES_CONTRACTRowChangeEvent(CType(e.Row,EXPENSES_CONTRACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_CONTRACTRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACTRowChanging(Me, New EXPENSES_CONTRACTRowChangeEvent(CType(e.Row,EXPENSES_CONTRACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_CONTRACTRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACTRowDeleted(Me, New EXPENSES_CONTRACTRowChangeEvent(CType(e.Row,EXPENSES_CONTRACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_CONTRACTRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACTRowDeleting(Me, New EXPENSES_CONTRACTRowChangeEvent(CType(e.Row,EXPENSES_CONTRACTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_CONTRACTRow(ByVal row As EXPENSES_CONTRACTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_CONTRACTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_CONTRACT_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_CONTRACT_DETAILRow)
        
        Private columnEXCD_KEY As Global.System.Data.DataColumn
        
        Private columnEXCD_EXCKEY As Global.System.Data.DataColumn
        
        Private columnEXCD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXCD_EXCDKEY As Global.System.Data.DataColumn
        
        Private columnEXCD_DESC As Global.System.Data.DataColumn
        
        Private columnEXCD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXCD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXCD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXCD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_CONTRACT_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_EXCKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_EXCKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_EXCDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_EXCDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_CONTRACT_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_CONTRACT_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACT_DETAILRowChanging As EXPENSES_CONTRACT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACT_DETAILRowChanged As EXPENSES_CONTRACT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACT_DETAILRowDeleting As EXPENSES_CONTRACT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_CONTRACT_DETAILRowDeleted As EXPENSES_CONTRACT_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_CONTRACT_DETAILRow(ByVal row As EXPENSES_CONTRACT_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_CONTRACT_DETAILRow(ByVal EXCD_KEY As Integer, ByVal parentEXPENSES_CONTRACTRowByFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL As EXPENSES_CONTRACTRow, ByVal EXCD_SOURCENO As Integer, ByVal EXCD_DESC As String, ByVal EXCD_DEDUCTIBLE As Boolean, ByVal EXCD_AMOUNT As Decimal, ByVal EXCD_NOTE As String, ByVal EXCD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_CONTRACT_DETAILRow
            Dim rowEXPENSES_CONTRACT_DETAILRow As EXPENSES_CONTRACT_DETAILRow = CType(Me.NewRow,EXPENSES_CONTRACT_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXCD_KEY, Nothing, EXCD_SOURCENO, Nothing, EXCD_DESC, EXCD_DEDUCTIBLE, EXCD_AMOUNT, EXCD_NOTE, EXCD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_CONTRACTRowByFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_CONTRACTRowByFK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL(1)
            End If
            rowEXPENSES_CONTRACT_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_CONTRACT_DETAILRow)
            Return rowEXPENSES_CONTRACT_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXCD_EXCDKEY(ByVal EXCD_EXCDKEY As Integer) As EXPENSES_CONTRACT_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXCD_EXCDKEY}),EXPENSES_CONTRACT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_CONTRACT_DETAILDataTable = CType(MyBase.Clone,EXPENSES_CONTRACT_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_CONTRACT_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXCD_KEY = MyBase.Columns("EXCD_KEY")
            Me.columnEXCD_EXCKEY = MyBase.Columns("EXCD_EXCKEY")
            Me.columnEXCD_SOURCENO = MyBase.Columns("EXCD_SOURCENO")
            Me.columnEXCD_EXCDKEY = MyBase.Columns("EXCD_EXCDKEY")
            Me.columnEXCD_DESC = MyBase.Columns("EXCD_DESC")
            Me.columnEXCD_DEDUCTIBLE = MyBase.Columns("EXCD_DEDUCTIBLE")
            Me.columnEXCD_AMOUNT = MyBase.Columns("EXCD_AMOUNT")
            Me.columnEXCD_NOTE = MyBase.Columns("EXCD_NOTE")
            Me.columnEXCD_DEDUCTIBLE_ADD = MyBase.Columns("EXCD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXCD_KEY = New Global.System.Data.DataColumn("EXCD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_KEY)
            Me.columnEXCD_EXCKEY = New Global.System.Data.DataColumn("EXCD_EXCKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_EXCKEY)
            Me.columnEXCD_SOURCENO = New Global.System.Data.DataColumn("EXCD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_SOURCENO)
            Me.columnEXCD_EXCDKEY = New Global.System.Data.DataColumn("EXCD_EXCDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_EXCDKEY)
            Me.columnEXCD_DESC = New Global.System.Data.DataColumn("EXCD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_DESC)
            Me.columnEXCD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXCD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_DEDUCTIBLE)
            Me.columnEXCD_AMOUNT = New Global.System.Data.DataColumn("EXCD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_AMOUNT)
            Me.columnEXCD_NOTE = New Global.System.Data.DataColumn("EXCD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_NOTE)
            Me.columnEXCD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXCD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXCD_EXCDKEY}, true))
            Me.columnEXCD_EXCDKEY.AutoIncrement = true
            Me.columnEXCD_EXCDKEY.AllowDBNull = false
            Me.columnEXCD_EXCDKEY.Unique = true
            Me.columnEXCD_DESC.MaxLength = 255
            Me.columnEXCD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXCD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXCD_NOTE.MaxLength = 3000
            Me.columnEXCD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_CONTRACT_DETAILRow() As EXPENSES_CONTRACT_DETAILRow
            Return CType(Me.NewRow,EXPENSES_CONTRACT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_CONTRACT_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_CONTRACT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_CONTRACT_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACT_DETAILRowChanged(Me, New EXPENSES_CONTRACT_DETAILRowChangeEvent(CType(e.Row,EXPENSES_CONTRACT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_CONTRACT_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACT_DETAILRowChanging(Me, New EXPENSES_CONTRACT_DETAILRowChangeEvent(CType(e.Row,EXPENSES_CONTRACT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_CONTRACT_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACT_DETAILRowDeleted(Me, New EXPENSES_CONTRACT_DETAILRowChangeEvent(CType(e.Row,EXPENSES_CONTRACT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_CONTRACT_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_CONTRACT_DETAILRowDeleting(Me, New EXPENSES_CONTRACT_DETAILRowChangeEvent(CType(e.Row,EXPENSES_CONTRACT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_CONTRACT_DETAILRow(ByVal row As EXPENSES_CONTRACT_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_CONTRACT_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_DIRECTORS_FEEDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_DIRECTORS_FEERow)
        
        Private columnEXDF_KEY As Global.System.Data.DataColumn
        
        Private columnEXDF_EXDFKEY As Global.System.Data.DataColumn
        
        Private columnEXDF_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXDF_DESC As Global.System.Data.DataColumn
        
        Private columnEXDF_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXDF_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXDF_NOTE As Global.System.Data.DataColumn
        
        Private columnEXDF_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXDF_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_DIRECTORS_FEE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_EXDFKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_EXDFKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDF_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDF_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_DIRECTORS_FEERow
            Get
                Return CType(Me.Rows(index),EXPENSES_DIRECTORS_FEERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEERowChanging As EXPENSES_DIRECTORS_FEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEERowChanged As EXPENSES_DIRECTORS_FEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEERowDeleting As EXPENSES_DIRECTORS_FEERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEERowDeleted As EXPENSES_DIRECTORS_FEERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_DIRECTORS_FEERow(ByVal row As EXPENSES_DIRECTORS_FEERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_DIRECTORS_FEERow(ByVal EXDF_KEY As Integer, ByVal EXDF_SOURCENO As Integer, ByVal EXDF_DESC As String, ByVal EXDF_AMOUNT As Decimal, ByVal EXDF_DEDUCTIBLE As Boolean, ByVal EXDF_NOTE As String, ByVal EXDF_DETAIL As String, ByVal EXDF_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_DIRECTORS_FEERow
            Dim rowEXPENSES_DIRECTORS_FEERow As EXPENSES_DIRECTORS_FEERow = CType(Me.NewRow,EXPENSES_DIRECTORS_FEERow)
            Dim columnValuesArray() As Object = New Object() {EXDF_KEY, Nothing, EXDF_SOURCENO, EXDF_DESC, EXDF_AMOUNT, EXDF_DEDUCTIBLE, EXDF_NOTE, EXDF_DETAIL, EXDF_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_DIRECTORS_FEERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_DIRECTORS_FEERow)
            Return rowEXPENSES_DIRECTORS_FEERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXDF_EXDFKEY(ByVal EXDF_EXDFKEY As Integer) As EXPENSES_DIRECTORS_FEERow
            Return CType(Me.Rows.Find(New Object() {EXDF_EXDFKEY}),EXPENSES_DIRECTORS_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_DIRECTORS_FEEDataTable = CType(MyBase.Clone,EXPENSES_DIRECTORS_FEEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_DIRECTORS_FEEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXDF_KEY = MyBase.Columns("EXDF_KEY")
            Me.columnEXDF_EXDFKEY = MyBase.Columns("EXDF_EXDFKEY")
            Me.columnEXDF_SOURCENO = MyBase.Columns("EXDF_SOURCENO")
            Me.columnEXDF_DESC = MyBase.Columns("EXDF_DESC")
            Me.columnEXDF_AMOUNT = MyBase.Columns("EXDF_AMOUNT")
            Me.columnEXDF_DEDUCTIBLE = MyBase.Columns("EXDF_DEDUCTIBLE")
            Me.columnEXDF_NOTE = MyBase.Columns("EXDF_NOTE")
            Me.columnEXDF_DETAIL = MyBase.Columns("EXDF_DETAIL")
            Me.columnEXDF_DEDUCTIBLE_ADD = MyBase.Columns("EXDF_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXDF_KEY = New Global.System.Data.DataColumn("EXDF_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_KEY)
            Me.columnEXDF_EXDFKEY = New Global.System.Data.DataColumn("EXDF_EXDFKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_EXDFKEY)
            Me.columnEXDF_SOURCENO = New Global.System.Data.DataColumn("EXDF_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_SOURCENO)
            Me.columnEXDF_DESC = New Global.System.Data.DataColumn("EXDF_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_DESC)
            Me.columnEXDF_AMOUNT = New Global.System.Data.DataColumn("EXDF_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_AMOUNT)
            Me.columnEXDF_DEDUCTIBLE = New Global.System.Data.DataColumn("EXDF_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_DEDUCTIBLE)
            Me.columnEXDF_NOTE = New Global.System.Data.DataColumn("EXDF_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_NOTE)
            Me.columnEXDF_DETAIL = New Global.System.Data.DataColumn("EXDF_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_DETAIL)
            Me.columnEXDF_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXDF_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDF_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXDF_EXDFKEY}, true))
            Me.columnEXDF_EXDFKEY.AutoIncrement = true
            Me.columnEXDF_EXDFKEY.AllowDBNull = false
            Me.columnEXDF_EXDFKEY.Unique = true
            Me.columnEXDF_DESC.MaxLength = 255
            Me.columnEXDF_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXDF_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXDF_NOTE.MaxLength = 3000
            Me.columnEXDF_DETAIL.MaxLength = 30
            Me.columnEXDF_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_DIRECTORS_FEERow() As EXPENSES_DIRECTORS_FEERow
            Return CType(Me.NewRow,EXPENSES_DIRECTORS_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_DIRECTORS_FEERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_DIRECTORS_FEERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEERowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEERowChanged(Me, New EXPENSES_DIRECTORS_FEERowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEERowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEERowChanging(Me, New EXPENSES_DIRECTORS_FEERowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEERowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEERowDeleted(Me, New EXPENSES_DIRECTORS_FEERowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEERowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEERowDeleting(Me, New EXPENSES_DIRECTORS_FEERowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_DIRECTORS_FEERow(ByVal row As EXPENSES_DIRECTORS_FEERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_DIRECTORS_FEEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_DIRECTORS_FEE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_DIRECTORS_FEE_DETAILRow)
        
        Private columnEXDFD_KEY As Global.System.Data.DataColumn
        
        Private columnEXDFD_EXDFKEY As Global.System.Data.DataColumn
        
        Private columnEXDFD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXDFD_EXDFDKEY As Global.System.Data.DataColumn
        
        Private columnEXDFD_DESC As Global.System.Data.DataColumn
        
        Private columnEXDFD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXDFD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXDFD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXDFD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_DIRECTORS_FEE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_EXDFKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_EXDFKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_EXDFDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_EXDFDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXDFD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXDFD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_DIRECTORS_FEE_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_DIRECTORS_FEE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEE_DETAILRowChanging As EXPENSES_DIRECTORS_FEE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEE_DETAILRowChanged As EXPENSES_DIRECTORS_FEE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEE_DETAILRowDeleting As EXPENSES_DIRECTORS_FEE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_DIRECTORS_FEE_DETAILRowDeleted As EXPENSES_DIRECTORS_FEE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_DIRECTORS_FEE_DETAILRow(ByVal row As EXPENSES_DIRECTORS_FEE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_DIRECTORS_FEE_DETAILRow(ByVal EXDFD_KEY As Integer, ByVal parentEXPENSES_DIRECTORS_FEERowByFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL As EXPENSES_DIRECTORS_FEERow, ByVal EXDFD_SOURCENO As Integer, ByVal EXDFD_DESC As String, ByVal EXDFD_DEDUCTIBLE As Boolean, ByVal EXDFD_AMOUNT As Decimal, ByVal EXDFD_NOTE As String, ByVal EXDFD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_DIRECTORS_FEE_DETAILRow
            Dim rowEXPENSES_DIRECTORS_FEE_DETAILRow As EXPENSES_DIRECTORS_FEE_DETAILRow = CType(Me.NewRow,EXPENSES_DIRECTORS_FEE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXDFD_KEY, Nothing, EXDFD_SOURCENO, Nothing, EXDFD_DESC, EXDFD_DEDUCTIBLE, EXDFD_AMOUNT, EXDFD_NOTE, EXDFD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_DIRECTORS_FEERowByFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_DIRECTORS_FEERowByFK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL(1)
            End If
            rowEXPENSES_DIRECTORS_FEE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_DIRECTORS_FEE_DETAILRow)
            Return rowEXPENSES_DIRECTORS_FEE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXDFD_EXDFDKEY(ByVal EXDFD_EXDFDKEY As Integer) As EXPENSES_DIRECTORS_FEE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXDFD_EXDFDKEY}),EXPENSES_DIRECTORS_FEE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_DIRECTORS_FEE_DETAILDataTable = CType(MyBase.Clone,EXPENSES_DIRECTORS_FEE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_DIRECTORS_FEE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXDFD_KEY = MyBase.Columns("EXDFD_KEY")
            Me.columnEXDFD_EXDFKEY = MyBase.Columns("EXDFD_EXDFKEY")
            Me.columnEXDFD_SOURCENO = MyBase.Columns("EXDFD_SOURCENO")
            Me.columnEXDFD_EXDFDKEY = MyBase.Columns("EXDFD_EXDFDKEY")
            Me.columnEXDFD_DESC = MyBase.Columns("EXDFD_DESC")
            Me.columnEXDFD_DEDUCTIBLE = MyBase.Columns("EXDFD_DEDUCTIBLE")
            Me.columnEXDFD_AMOUNT = MyBase.Columns("EXDFD_AMOUNT")
            Me.columnEXDFD_NOTE = MyBase.Columns("EXDFD_NOTE")
            Me.columnEXDFD_DEDUCTIBLE_ADD = MyBase.Columns("EXDFD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXDFD_KEY = New Global.System.Data.DataColumn("EXDFD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_KEY)
            Me.columnEXDFD_EXDFKEY = New Global.System.Data.DataColumn("EXDFD_EXDFKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_EXDFKEY)
            Me.columnEXDFD_SOURCENO = New Global.System.Data.DataColumn("EXDFD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_SOURCENO)
            Me.columnEXDFD_EXDFDKEY = New Global.System.Data.DataColumn("EXDFD_EXDFDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_EXDFDKEY)
            Me.columnEXDFD_DESC = New Global.System.Data.DataColumn("EXDFD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_DESC)
            Me.columnEXDFD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXDFD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_DEDUCTIBLE)
            Me.columnEXDFD_AMOUNT = New Global.System.Data.DataColumn("EXDFD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_AMOUNT)
            Me.columnEXDFD_NOTE = New Global.System.Data.DataColumn("EXDFD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_NOTE)
            Me.columnEXDFD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXDFD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXDFD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXDFD_EXDFDKEY}, true))
            Me.columnEXDFD_EXDFDKEY.AutoIncrement = true
            Me.columnEXDFD_EXDFDKEY.AllowDBNull = false
            Me.columnEXDFD_EXDFDKEY.Unique = true
            Me.columnEXDFD_DESC.MaxLength = 255
            Me.columnEXDFD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXDFD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXDFD_NOTE.MaxLength = 3000
            Me.columnEXDFD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_DIRECTORS_FEE_DETAILRow() As EXPENSES_DIRECTORS_FEE_DETAILRow
            Return CType(Me.NewRow,EXPENSES_DIRECTORS_FEE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_DIRECTORS_FEE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_DIRECTORS_FEE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEE_DETAILRowChanged(Me, New EXPENSES_DIRECTORS_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEE_DETAILRowChanging(Me, New EXPENSES_DIRECTORS_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEE_DETAILRowDeleted(Me, New EXPENSES_DIRECTORS_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_DIRECTORS_FEE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_DIRECTORS_FEE_DETAILRowDeleting(Me, New EXPENSES_DIRECTORS_FEE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_DIRECTORS_FEE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_DIRECTORS_FEE_DETAILRow(ByVal row As EXPENSES_DIRECTORS_FEE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_DIRECTORS_FEE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_SALARYDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_SALARYRow)
        
        Private columnEXS_KEY As Global.System.Data.DataColumn
        
        Private columnEXS_EXSKEY As Global.System.Data.DataColumn
        
        Private columnEXS_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXS_DESC As Global.System.Data.DataColumn
        
        Private columnEXS_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXS_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXS_NOTE As Global.System.Data.DataColumn
        
        Private columnEXS_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXS_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_SALARY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_EXSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_EXSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXS_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXS_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_SALARYRow
            Get
                Return CType(Me.Rows(index),EXPENSES_SALARYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARYRowChanging As EXPENSES_SALARYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARYRowChanged As EXPENSES_SALARYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARYRowDeleting As EXPENSES_SALARYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARYRowDeleted As EXPENSES_SALARYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_SALARYRow(ByVal row As EXPENSES_SALARYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_SALARYRow(ByVal EXS_KEY As Integer, ByVal EXS_SOURCENO As Integer, ByVal EXS_DESC As String, ByVal EXS_AMOUNT As Decimal, ByVal EXS_DEDUCTIBLE As Boolean, ByVal EXS_NOTE As String, ByVal EXS_DETAIL As String, ByVal EXS_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_SALARYRow
            Dim rowEXPENSES_SALARYRow As EXPENSES_SALARYRow = CType(Me.NewRow,EXPENSES_SALARYRow)
            Dim columnValuesArray() As Object = New Object() {EXS_KEY, Nothing, EXS_SOURCENO, EXS_DESC, EXS_AMOUNT, EXS_DEDUCTIBLE, EXS_NOTE, EXS_DETAIL, EXS_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_SALARYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_SALARYRow)
            Return rowEXPENSES_SALARYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXS_EXSKEY(ByVal EXS_EXSKEY As Integer) As EXPENSES_SALARYRow
            Return CType(Me.Rows.Find(New Object() {EXS_EXSKEY}),EXPENSES_SALARYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_SALARYDataTable = CType(MyBase.Clone,EXPENSES_SALARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_SALARYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXS_KEY = MyBase.Columns("EXS_KEY")
            Me.columnEXS_EXSKEY = MyBase.Columns("EXS_EXSKEY")
            Me.columnEXS_SOURCENO = MyBase.Columns("EXS_SOURCENO")
            Me.columnEXS_DESC = MyBase.Columns("EXS_DESC")
            Me.columnEXS_AMOUNT = MyBase.Columns("EXS_AMOUNT")
            Me.columnEXS_DEDUCTIBLE = MyBase.Columns("EXS_DEDUCTIBLE")
            Me.columnEXS_NOTE = MyBase.Columns("EXS_NOTE")
            Me.columnEXS_DETAIL = MyBase.Columns("EXS_DETAIL")
            Me.columnEXS_DEDUCTIBLE_ADD = MyBase.Columns("EXS_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXS_KEY = New Global.System.Data.DataColumn("EXS_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_KEY)
            Me.columnEXS_EXSKEY = New Global.System.Data.DataColumn("EXS_EXSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_EXSKEY)
            Me.columnEXS_SOURCENO = New Global.System.Data.DataColumn("EXS_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_SOURCENO)
            Me.columnEXS_DESC = New Global.System.Data.DataColumn("EXS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_DESC)
            Me.columnEXS_AMOUNT = New Global.System.Data.DataColumn("EXS_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_AMOUNT)
            Me.columnEXS_DEDUCTIBLE = New Global.System.Data.DataColumn("EXS_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_DEDUCTIBLE)
            Me.columnEXS_NOTE = New Global.System.Data.DataColumn("EXS_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_NOTE)
            Me.columnEXS_DETAIL = New Global.System.Data.DataColumn("EXS_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_DETAIL)
            Me.columnEXS_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXS_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXS_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXS_EXSKEY}, true))
            Me.columnEXS_EXSKEY.AutoIncrement = true
            Me.columnEXS_EXSKEY.AllowDBNull = false
            Me.columnEXS_EXSKEY.Unique = true
            Me.columnEXS_DESC.MaxLength = 255
            Me.columnEXS_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXS_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXS_NOTE.MaxLength = 3000
            Me.columnEXS_DETAIL.MaxLength = 30
            Me.columnEXS_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_SALARYRow() As EXPENSES_SALARYRow
            Return CType(Me.NewRow,EXPENSES_SALARYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_SALARYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_SALARYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_SALARYRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARYRowChanged(Me, New EXPENSES_SALARYRowChangeEvent(CType(e.Row,EXPENSES_SALARYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_SALARYRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARYRowChanging(Me, New EXPENSES_SALARYRowChangeEvent(CType(e.Row,EXPENSES_SALARYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_SALARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARYRowDeleted(Me, New EXPENSES_SALARYRowChangeEvent(CType(e.Row,EXPENSES_SALARYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_SALARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARYRowDeleting(Me, New EXPENSES_SALARYRowChangeEvent(CType(e.Row,EXPENSES_SALARYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_SALARYRow(ByVal row As EXPENSES_SALARYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_SALARYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_SALARY_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_SALARY_DETAILRow)
        
        Private columnEXSD_KEY As Global.System.Data.DataColumn
        
        Private columnEXSD_EXSKEY As Global.System.Data.DataColumn
        
        Private columnEXSD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXSD_EXSDKEY As Global.System.Data.DataColumn
        
        Private columnEXSD_DESC As Global.System.Data.DataColumn
        
        Private columnEXSD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXSD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXSD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_SALARY_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_EXSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_EXSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_EXSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_EXSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXSD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXSD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_SALARY_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_SALARY_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARY_DETAILRowChanging As EXPENSES_SALARY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARY_DETAILRowChanged As EXPENSES_SALARY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARY_DETAILRowDeleting As EXPENSES_SALARY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_SALARY_DETAILRowDeleted As EXPENSES_SALARY_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_SALARY_DETAILRow(ByVal row As EXPENSES_SALARY_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_SALARY_DETAILRow(ByVal EXSD_KEY As Integer, ByVal parentEXPENSES_SALARYRowByFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL As EXPENSES_SALARYRow, ByVal EXSD_SOURCENO As Integer, ByVal EXSD_DESC As String, ByVal EXSD_DEDUCTIBLE As Boolean, ByVal EXSD_AMOUNT As Decimal, ByVal EXSD_NOTE As String, ByVal EXSD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_SALARY_DETAILRow
            Dim rowEXPENSES_SALARY_DETAILRow As EXPENSES_SALARY_DETAILRow = CType(Me.NewRow,EXPENSES_SALARY_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXSD_KEY, Nothing, EXSD_SOURCENO, Nothing, EXSD_DESC, EXSD_DEDUCTIBLE, EXSD_AMOUNT, EXSD_NOTE, EXSD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_SALARYRowByFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_SALARYRowByFK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL(1)
            End If
            rowEXPENSES_SALARY_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_SALARY_DETAILRow)
            Return rowEXPENSES_SALARY_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXSD_EXSDKEY(ByVal EXSD_EXSDKEY As Integer) As EXPENSES_SALARY_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXSD_EXSDKEY}),EXPENSES_SALARY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_SALARY_DETAILDataTable = CType(MyBase.Clone,EXPENSES_SALARY_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_SALARY_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXSD_KEY = MyBase.Columns("EXSD_KEY")
            Me.columnEXSD_EXSKEY = MyBase.Columns("EXSD_EXSKEY")
            Me.columnEXSD_SOURCENO = MyBase.Columns("EXSD_SOURCENO")
            Me.columnEXSD_EXSDKEY = MyBase.Columns("EXSD_EXSDKEY")
            Me.columnEXSD_DESC = MyBase.Columns("EXSD_DESC")
            Me.columnEXSD_DEDUCTIBLE = MyBase.Columns("EXSD_DEDUCTIBLE")
            Me.columnEXSD_AMOUNT = MyBase.Columns("EXSD_AMOUNT")
            Me.columnEXSD_NOTE = MyBase.Columns("EXSD_NOTE")
            Me.columnEXSD_DEDUCTIBLE_ADD = MyBase.Columns("EXSD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXSD_KEY = New Global.System.Data.DataColumn("EXSD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_KEY)
            Me.columnEXSD_EXSKEY = New Global.System.Data.DataColumn("EXSD_EXSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_EXSKEY)
            Me.columnEXSD_SOURCENO = New Global.System.Data.DataColumn("EXSD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_SOURCENO)
            Me.columnEXSD_EXSDKEY = New Global.System.Data.DataColumn("EXSD_EXSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_EXSDKEY)
            Me.columnEXSD_DESC = New Global.System.Data.DataColumn("EXSD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_DESC)
            Me.columnEXSD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXSD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_DEDUCTIBLE)
            Me.columnEXSD_AMOUNT = New Global.System.Data.DataColumn("EXSD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_AMOUNT)
            Me.columnEXSD_NOTE = New Global.System.Data.DataColumn("EXSD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_NOTE)
            Me.columnEXSD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXSD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXSD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXSD_EXSDKEY}, true))
            Me.columnEXSD_EXSDKEY.AutoIncrement = true
            Me.columnEXSD_EXSDKEY.AllowDBNull = false
            Me.columnEXSD_EXSDKEY.Unique = true
            Me.columnEXSD_DESC.MaxLength = 255
            Me.columnEXSD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXSD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXSD_NOTE.MaxLength = 3000
            Me.columnEXSD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_SALARY_DETAILRow() As EXPENSES_SALARY_DETAILRow
            Return CType(Me.NewRow,EXPENSES_SALARY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_SALARY_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_SALARY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_SALARY_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARY_DETAILRowChanged(Me, New EXPENSES_SALARY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_SALARY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_SALARY_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARY_DETAILRowChanging(Me, New EXPENSES_SALARY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_SALARY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_SALARY_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARY_DETAILRowDeleted(Me, New EXPENSES_SALARY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_SALARY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_SALARY_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_SALARY_DETAILRowDeleting(Me, New EXPENSES_SALARY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_SALARY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_SALARY_DETAILRow(ByVal row As EXPENSES_SALARY_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_SALARY_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_EMPLSTOCK_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_EMPLSTOCK_DETAILRow)
        
        Private columnEXESD_KEY As Global.System.Data.DataColumn
        
        Private columnEXESD_EXESKEY As Global.System.Data.DataColumn
        
        Private columnEXESD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXESD_EXESDKEY As Global.System.Data.DataColumn
        
        Private columnEXESD_DESC As Global.System.Data.DataColumn
        
        Private columnEXESD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXESD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXESD_NOTE As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnEXESD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_EMPLSTOCK_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_EXESKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_EXESKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_EXESDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_EXESDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXESD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXESD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_EMPLSTOCK_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_EMPLSTOCK_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPLSTOCK_DETAILRowChanging As EXPENSES_EMPLSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPLSTOCK_DETAILRowChanged As EXPENSES_EMPLSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPLSTOCK_DETAILRowDeleting As EXPENSES_EMPLSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPLSTOCK_DETAILRowDeleted As EXPENSES_EMPLSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_EMPLSTOCK_DETAILRow(ByVal row As EXPENSES_EMPLSTOCK_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_EMPLSTOCK_DETAILRow(ByVal EXESD_KEY As Integer, ByVal parentEXPENSES_EMPL_STOCKRowByFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL As EXPENSES_EMPL_STOCKRow, ByVal EXESD_SOURCENO As Integer, ByVal EXESD_DESC As String, ByVal EXESD_DEDUCTIBLE As Boolean, ByVal EXESD_AMOUNT As Decimal, ByVal EXESD_NOTE As String, ByVal RowIndex As Integer, ByVal EXESD_DEDUCTIBLE_ADD As Boolean) As EXPENSES_EMPLSTOCK_DETAILRow
            Dim rowEXPENSES_EMPLSTOCK_DETAILRow As EXPENSES_EMPLSTOCK_DETAILRow = CType(Me.NewRow,EXPENSES_EMPLSTOCK_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXESD_KEY, Nothing, EXESD_SOURCENO, Nothing, EXESD_DESC, EXESD_DEDUCTIBLE, EXESD_AMOUNT, EXESD_NOTE, RowIndex, EXESD_DEDUCTIBLE_ADD}
            If (Not (parentEXPENSES_EMPL_STOCKRowByFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_EMPL_STOCKRowByFK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL(1)
            End If
            rowEXPENSES_EMPLSTOCK_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_EMPLSTOCK_DETAILRow)
            Return rowEXPENSES_EMPLSTOCK_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXESD_EXESDKEY(ByVal EXESD_EXESDKEY As Integer) As EXPENSES_EMPLSTOCK_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXESD_EXESDKEY}),EXPENSES_EMPLSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_EMPLSTOCK_DETAILDataTable = CType(MyBase.Clone,EXPENSES_EMPLSTOCK_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_EMPLSTOCK_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXESD_KEY = MyBase.Columns("EXESD_KEY")
            Me.columnEXESD_EXESKEY = MyBase.Columns("EXESD_EXESKEY")
            Me.columnEXESD_SOURCENO = MyBase.Columns("EXESD_SOURCENO")
            Me.columnEXESD_EXESDKEY = MyBase.Columns("EXESD_EXESDKEY")
            Me.columnEXESD_DESC = MyBase.Columns("EXESD_DESC")
            Me.columnEXESD_DEDUCTIBLE = MyBase.Columns("EXESD_DEDUCTIBLE")
            Me.columnEXESD_AMOUNT = MyBase.Columns("EXESD_AMOUNT")
            Me.columnEXESD_NOTE = MyBase.Columns("EXESD_NOTE")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnEXESD_DEDUCTIBLE_ADD = MyBase.Columns("EXESD_DEDUCTIBLE_ADD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXESD_KEY = New Global.System.Data.DataColumn("EXESD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_KEY)
            Me.columnEXESD_EXESKEY = New Global.System.Data.DataColumn("EXESD_EXESKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_EXESKEY)
            Me.columnEXESD_SOURCENO = New Global.System.Data.DataColumn("EXESD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_SOURCENO)
            Me.columnEXESD_EXESDKEY = New Global.System.Data.DataColumn("EXESD_EXESDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_EXESDKEY)
            Me.columnEXESD_DESC = New Global.System.Data.DataColumn("EXESD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_DESC)
            Me.columnEXESD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXESD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_DEDUCTIBLE)
            Me.columnEXESD_AMOUNT = New Global.System.Data.DataColumn("EXESD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_AMOUNT)
            Me.columnEXESD_NOTE = New Global.System.Data.DataColumn("EXESD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_NOTE)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnEXESD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXESD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXESD_DEDUCTIBLE_ADD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXESD_EXESDKEY}, true))
            Me.columnEXESD_EXESDKEY.AutoIncrement = true
            Me.columnEXESD_EXESDKEY.AllowDBNull = false
            Me.columnEXESD_EXESDKEY.Unique = true
            Me.columnEXESD_DESC.MaxLength = 255
            Me.columnEXESD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXESD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXESD_NOTE.MaxLength = 3000
            Me.columnEXESD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_EMPLSTOCK_DETAILRow() As EXPENSES_EMPLSTOCK_DETAILRow
            Return CType(Me.NewRow,EXPENSES_EMPLSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_EMPLSTOCK_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_EMPLSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_EMPLSTOCK_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPLSTOCK_DETAILRowChanged(Me, New EXPENSES_EMPLSTOCK_DETAILRowChangeEvent(CType(e.Row,EXPENSES_EMPLSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_EMPLSTOCK_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPLSTOCK_DETAILRowChanging(Me, New EXPENSES_EMPLSTOCK_DETAILRowChangeEvent(CType(e.Row,EXPENSES_EMPLSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_EMPLSTOCK_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPLSTOCK_DETAILRowDeleted(Me, New EXPENSES_EMPLSTOCK_DETAILRowChangeEvent(CType(e.Row,EXPENSES_EMPLSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_EMPLSTOCK_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPLSTOCK_DETAILRowDeleting(Me, New EXPENSES_EMPLSTOCK_DETAILRowChangeEvent(CType(e.Row,EXPENSES_EMPLSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_EMPLSTOCK_DETAILRow(ByVal row As EXPENSES_EMPLSTOCK_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_EMPLSTOCK_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_EMPL_STOCKDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_EMPL_STOCKRow)
        
        Private columnEXES_KEY As Global.System.Data.DataColumn
        
        Private columnEXES_EXESKEY As Global.System.Data.DataColumn
        
        Private columnEXES_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXES_DESC As Global.System.Data.DataColumn
        
        Private columnEXES_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXES_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXES_NOTE As Global.System.Data.DataColumn
        
        Private columnEXES_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXES_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_EMPL_STOCK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_EXESKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_EXESKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXES_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXES_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_EMPL_STOCKRow
            Get
                Return CType(Me.Rows(index),EXPENSES_EMPL_STOCKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPL_STOCKRowChanging As EXPENSES_EMPL_STOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPL_STOCKRowChanged As EXPENSES_EMPL_STOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPL_STOCKRowDeleting As EXPENSES_EMPL_STOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_EMPL_STOCKRowDeleted As EXPENSES_EMPL_STOCKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_EMPL_STOCKRow(ByVal row As EXPENSES_EMPL_STOCKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_EMPL_STOCKRow(ByVal EXES_KEY As Integer, ByVal EXES_SOURCENO As Integer, ByVal EXES_DESC As String, ByVal EXES_AMOUNT As Decimal, ByVal EXES_DEDUCTIBLE As Boolean, ByVal EXES_NOTE As String, ByVal EXES_DETAIL As String, ByVal EXES_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_EMPL_STOCKRow
            Dim rowEXPENSES_EMPL_STOCKRow As EXPENSES_EMPL_STOCKRow = CType(Me.NewRow,EXPENSES_EMPL_STOCKRow)
            Dim columnValuesArray() As Object = New Object() {EXES_KEY, Nothing, EXES_SOURCENO, EXES_DESC, EXES_AMOUNT, EXES_DEDUCTIBLE, EXES_NOTE, EXES_DETAIL, EXES_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_EMPL_STOCKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_EMPL_STOCKRow)
            Return rowEXPENSES_EMPL_STOCKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXES_EXESKEY(ByVal EXES_EXESKEY As Integer) As EXPENSES_EMPL_STOCKRow
            Return CType(Me.Rows.Find(New Object() {EXES_EXESKEY}),EXPENSES_EMPL_STOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_EMPL_STOCKDataTable = CType(MyBase.Clone,EXPENSES_EMPL_STOCKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_EMPL_STOCKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXES_KEY = MyBase.Columns("EXES_KEY")
            Me.columnEXES_EXESKEY = MyBase.Columns("EXES_EXESKEY")
            Me.columnEXES_SOURCENO = MyBase.Columns("EXES_SOURCENO")
            Me.columnEXES_DESC = MyBase.Columns("EXES_DESC")
            Me.columnEXES_AMOUNT = MyBase.Columns("EXES_AMOUNT")
            Me.columnEXES_DEDUCTIBLE = MyBase.Columns("EXES_DEDUCTIBLE")
            Me.columnEXES_NOTE = MyBase.Columns("EXES_NOTE")
            Me.columnEXES_DETAIL = MyBase.Columns("EXES_DETAIL")
            Me.columnEXES_DEDUCTIBLE_ADD = MyBase.Columns("EXES_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXES_KEY = New Global.System.Data.DataColumn("EXES_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_KEY)
            Me.columnEXES_EXESKEY = New Global.System.Data.DataColumn("EXES_EXESKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_EXESKEY)
            Me.columnEXES_SOURCENO = New Global.System.Data.DataColumn("EXES_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_SOURCENO)
            Me.columnEXES_DESC = New Global.System.Data.DataColumn("EXES_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_DESC)
            Me.columnEXES_AMOUNT = New Global.System.Data.DataColumn("EXES_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_AMOUNT)
            Me.columnEXES_DEDUCTIBLE = New Global.System.Data.DataColumn("EXES_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_DEDUCTIBLE)
            Me.columnEXES_NOTE = New Global.System.Data.DataColumn("EXES_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_NOTE)
            Me.columnEXES_DETAIL = New Global.System.Data.DataColumn("EXES_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_DETAIL)
            Me.columnEXES_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXES_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXES_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXES_EXESKEY}, true))
            Me.columnEXES_EXESKEY.AutoIncrement = true
            Me.columnEXES_EXESKEY.AllowDBNull = false
            Me.columnEXES_EXESKEY.Unique = true
            Me.columnEXES_DESC.MaxLength = 255
            Me.columnEXES_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXES_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXES_NOTE.MaxLength = 3000
            Me.columnEXES_DETAIL.MaxLength = 30
            Me.columnEXES_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_EMPL_STOCKRow() As EXPENSES_EMPL_STOCKRow
            Return CType(Me.NewRow,EXPENSES_EMPL_STOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_EMPL_STOCKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_EMPL_STOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_EMPL_STOCKRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPL_STOCKRowChanged(Me, New EXPENSES_EMPL_STOCKRowChangeEvent(CType(e.Row,EXPENSES_EMPL_STOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_EMPL_STOCKRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPL_STOCKRowChanging(Me, New EXPENSES_EMPL_STOCKRowChangeEvent(CType(e.Row,EXPENSES_EMPL_STOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_EMPL_STOCKRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPL_STOCKRowDeleted(Me, New EXPENSES_EMPL_STOCKRowChangeEvent(CType(e.Row,EXPENSES_EMPL_STOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_EMPL_STOCKRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_EMPL_STOCKRowDeleting(Me, New EXPENSES_EMPL_STOCKRowChangeEvent(CType(e.Row,EXPENSES_EMPL_STOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_EMPL_STOCKRow(ByVal row As EXPENSES_EMPL_STOCKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_EMPL_STOCKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_ROYALTYDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_ROYALTYRow)
        
        Private columnEXRO_KEY As Global.System.Data.DataColumn
        
        Private columnEXRO_EXROKEY As Global.System.Data.DataColumn
        
        Private columnEXRO_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXRO_DESC As Global.System.Data.DataColumn
        
        Private columnEXRO_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXRO_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXRO_NOTE As Global.System.Data.DataColumn
        
        Private columnEXRO_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXRO_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_ROYALTY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_EXROKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_EXROKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRO_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRO_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_ROYALTYRow
            Get
                Return CType(Me.Rows(index),EXPENSES_ROYALTYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTYRowChanging As EXPENSES_ROYALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTYRowChanged As EXPENSES_ROYALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTYRowDeleting As EXPENSES_ROYALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTYRowDeleted As EXPENSES_ROYALTYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_ROYALTYRow(ByVal row As EXPENSES_ROYALTYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_ROYALTYRow(ByVal EXRO_KEY As Integer, ByVal EXRO_SOURCENO As Integer, ByVal EXRO_DESC As String, ByVal EXRO_AMOUNT As Decimal, ByVal EXRO_DEDUCTIBLE As Boolean, ByVal EXRO_NOTE As String, ByVal EXRO_DETAIL As String, ByVal EXRO_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_ROYALTYRow
            Dim rowEXPENSES_ROYALTYRow As EXPENSES_ROYALTYRow = CType(Me.NewRow,EXPENSES_ROYALTYRow)
            Dim columnValuesArray() As Object = New Object() {EXRO_KEY, Nothing, EXRO_SOURCENO, EXRO_DESC, EXRO_AMOUNT, EXRO_DEDUCTIBLE, EXRO_NOTE, EXRO_DETAIL, EXRO_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_ROYALTYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_ROYALTYRow)
            Return rowEXPENSES_ROYALTYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXRO_EXROKEY(ByVal EXRO_EXROKEY As Integer) As EXPENSES_ROYALTYRow
            Return CType(Me.Rows.Find(New Object() {EXRO_EXROKEY}),EXPENSES_ROYALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_ROYALTYDataTable = CType(MyBase.Clone,EXPENSES_ROYALTYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_ROYALTYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXRO_KEY = MyBase.Columns("EXRO_KEY")
            Me.columnEXRO_EXROKEY = MyBase.Columns("EXRO_EXROKEY")
            Me.columnEXRO_SOURCENO = MyBase.Columns("EXRO_SOURCENO")
            Me.columnEXRO_DESC = MyBase.Columns("EXRO_DESC")
            Me.columnEXRO_AMOUNT = MyBase.Columns("EXRO_AMOUNT")
            Me.columnEXRO_DEDUCTIBLE = MyBase.Columns("EXRO_DEDUCTIBLE")
            Me.columnEXRO_NOTE = MyBase.Columns("EXRO_NOTE")
            Me.columnEXRO_DETAIL = MyBase.Columns("EXRO_DETAIL")
            Me.columnEXRO_DEDUCTIBLE_ADD = MyBase.Columns("EXRO_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXRO_KEY = New Global.System.Data.DataColumn("EXRO_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_KEY)
            Me.columnEXRO_EXROKEY = New Global.System.Data.DataColumn("EXRO_EXROKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_EXROKEY)
            Me.columnEXRO_SOURCENO = New Global.System.Data.DataColumn("EXRO_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_SOURCENO)
            Me.columnEXRO_DESC = New Global.System.Data.DataColumn("EXRO_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_DESC)
            Me.columnEXRO_AMOUNT = New Global.System.Data.DataColumn("EXRO_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_AMOUNT)
            Me.columnEXRO_DEDUCTIBLE = New Global.System.Data.DataColumn("EXRO_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_DEDUCTIBLE)
            Me.columnEXRO_NOTE = New Global.System.Data.DataColumn("EXRO_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_NOTE)
            Me.columnEXRO_DETAIL = New Global.System.Data.DataColumn("EXRO_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_DETAIL)
            Me.columnEXRO_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXRO_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRO_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXRO_EXROKEY}, true))
            Me.columnEXRO_EXROKEY.AutoIncrement = true
            Me.columnEXRO_EXROKEY.AllowDBNull = false
            Me.columnEXRO_EXROKEY.Unique = true
            Me.columnEXRO_DESC.MaxLength = 255
            Me.columnEXRO_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXRO_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXRO_NOTE.MaxLength = 3000
            Me.columnEXRO_DETAIL.MaxLength = 30
            Me.columnEXRO_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_ROYALTYRow() As EXPENSES_ROYALTYRow
            Return CType(Me.NewRow,EXPENSES_ROYALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_ROYALTYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_ROYALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_ROYALTYRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTYRowChanged(Me, New EXPENSES_ROYALTYRowChangeEvent(CType(e.Row,EXPENSES_ROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_ROYALTYRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTYRowChanging(Me, New EXPENSES_ROYALTYRowChangeEvent(CType(e.Row,EXPENSES_ROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_ROYALTYRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTYRowDeleted(Me, New EXPENSES_ROYALTYRowChangeEvent(CType(e.Row,EXPENSES_ROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_ROYALTYRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTYRowDeleting(Me, New EXPENSES_ROYALTYRowChangeEvent(CType(e.Row,EXPENSES_ROYALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_ROYALTYRow(ByVal row As EXPENSES_ROYALTYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_ROYALTYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_ROYALTY_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_ROYALTY_DETAILRow)
        
        Private columnEXROD_KEY As Global.System.Data.DataColumn
        
        Private columnEXROD_EXROKEY As Global.System.Data.DataColumn
        
        Private columnEXROD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXROD_EXRODKEY As Global.System.Data.DataColumn
        
        Private columnEXROD_DESC As Global.System.Data.DataColumn
        
        Private columnEXROD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXROD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXROD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXROD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_ROYALTY_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_EXROKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_EXROKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_EXRODKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_EXRODKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXROD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXROD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_ROYALTY_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_ROYALTY_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTY_DETAILRowChanging As EXPENSES_ROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTY_DETAILRowChanged As EXPENSES_ROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTY_DETAILRowDeleting As EXPENSES_ROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_ROYALTY_DETAILRowDeleted As EXPENSES_ROYALTY_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_ROYALTY_DETAILRow(ByVal row As EXPENSES_ROYALTY_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_ROYALTY_DETAILRow(ByVal EXROD_KEY As Integer, ByVal parentEXPENSES_ROYALTYRowByFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL As EXPENSES_ROYALTYRow, ByVal EXROD_SOURCENO As Integer, ByVal EXROD_DESC As String, ByVal EXROD_DEDUCTIBLE As Boolean, ByVal EXROD_AMOUNT As Decimal, ByVal EXROD_NOTE As String, ByVal EXROD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_ROYALTY_DETAILRow
            Dim rowEXPENSES_ROYALTY_DETAILRow As EXPENSES_ROYALTY_DETAILRow = CType(Me.NewRow,EXPENSES_ROYALTY_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXROD_KEY, Nothing, EXROD_SOURCENO, Nothing, EXROD_DESC, EXROD_DEDUCTIBLE, EXROD_AMOUNT, EXROD_NOTE, EXROD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_ROYALTYRowByFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_ROYALTYRowByFK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL(1)
            End If
            rowEXPENSES_ROYALTY_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_ROYALTY_DETAILRow)
            Return rowEXPENSES_ROYALTY_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXROD_EXRODKEY(ByVal EXROD_EXRODKEY As Integer) As EXPENSES_ROYALTY_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXROD_EXRODKEY}),EXPENSES_ROYALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_ROYALTY_DETAILDataTable = CType(MyBase.Clone,EXPENSES_ROYALTY_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_ROYALTY_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXROD_KEY = MyBase.Columns("EXROD_KEY")
            Me.columnEXROD_EXROKEY = MyBase.Columns("EXROD_EXROKEY")
            Me.columnEXROD_SOURCENO = MyBase.Columns("EXROD_SOURCENO")
            Me.columnEXROD_EXRODKEY = MyBase.Columns("EXROD_EXRODKEY")
            Me.columnEXROD_DESC = MyBase.Columns("EXROD_DESC")
            Me.columnEXROD_DEDUCTIBLE = MyBase.Columns("EXROD_DEDUCTIBLE")
            Me.columnEXROD_AMOUNT = MyBase.Columns("EXROD_AMOUNT")
            Me.columnEXROD_NOTE = MyBase.Columns("EXROD_NOTE")
            Me.columnEXROD_DEDUCTIBLE_ADD = MyBase.Columns("EXROD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXROD_KEY = New Global.System.Data.DataColumn("EXROD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_KEY)
            Me.columnEXROD_EXROKEY = New Global.System.Data.DataColumn("EXROD_EXROKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_EXROKEY)
            Me.columnEXROD_SOURCENO = New Global.System.Data.DataColumn("EXROD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_SOURCENO)
            Me.columnEXROD_EXRODKEY = New Global.System.Data.DataColumn("EXROD_EXRODKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_EXRODKEY)
            Me.columnEXROD_DESC = New Global.System.Data.DataColumn("EXROD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_DESC)
            Me.columnEXROD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXROD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_DEDUCTIBLE)
            Me.columnEXROD_AMOUNT = New Global.System.Data.DataColumn("EXROD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_AMOUNT)
            Me.columnEXROD_NOTE = New Global.System.Data.DataColumn("EXROD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_NOTE)
            Me.columnEXROD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXROD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXROD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXROD_EXRODKEY}, true))
            Me.columnEXROD_EXRODKEY.AutoIncrement = true
            Me.columnEXROD_EXRODKEY.AllowDBNull = false
            Me.columnEXROD_EXRODKEY.Unique = true
            Me.columnEXROD_DESC.MaxLength = 255
            Me.columnEXROD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXROD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXROD_NOTE.MaxLength = 3000
            Me.columnEXROD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_ROYALTY_DETAILRow() As EXPENSES_ROYALTY_DETAILRow
            Return CType(Me.NewRow,EXPENSES_ROYALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_ROYALTY_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_ROYALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_ROYALTY_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTY_DETAILRowChanged(Me, New EXPENSES_ROYALTY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_ROYALTY_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTY_DETAILRowChanging(Me, New EXPENSES_ROYALTY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_ROYALTY_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTY_DETAILRowDeleted(Me, New EXPENSES_ROYALTY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_ROYALTY_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_ROYALTY_DETAILRowDeleting(Me, New EXPENSES_ROYALTY_DETAILRowChangeEvent(CType(e.Row,EXPENSES_ROYALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_ROYALTY_DETAILRow(ByVal row As EXPENSES_ROYALTY_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_ROYALTY_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_RENTALDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_RENTALRow)
        
        Private columnEXRENT_KEY As Global.System.Data.DataColumn
        
        Private columnEXRENT_EXRENTKEY As Global.System.Data.DataColumn
        
        Private columnEXRENT_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXRENT_DESC As Global.System.Data.DataColumn
        
        Private columnEXRENT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXRENT_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXRENT_NOTE As Global.System.Data.DataColumn
        
        Private columnEXRENT_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXRENT_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_RENTAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_EXRENTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_EXRENTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENT_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENT_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_RENTALRow
            Get
                Return CType(Me.Rows(index),EXPENSES_RENTALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTALRowChanging As EXPENSES_RENTALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTALRowChanged As EXPENSES_RENTALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTALRowDeleting As EXPENSES_RENTALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTALRowDeleted As EXPENSES_RENTALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_RENTALRow(ByVal row As EXPENSES_RENTALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_RENTALRow(ByVal EXRENT_KEY As Integer, ByVal EXRENT_SOURCENO As Integer, ByVal EXRENT_DESC As String, ByVal EXRENT_AMOUNT As Decimal, ByVal EXRENT_DEDUCTIBLE As Boolean, ByVal EXRENT_NOTE As String, ByVal EXRENT_DETAIL As String, ByVal EXRENT_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_RENTALRow
            Dim rowEXPENSES_RENTALRow As EXPENSES_RENTALRow = CType(Me.NewRow,EXPENSES_RENTALRow)
            Dim columnValuesArray() As Object = New Object() {EXRENT_KEY, Nothing, EXRENT_SOURCENO, EXRENT_DESC, EXRENT_AMOUNT, EXRENT_DEDUCTIBLE, EXRENT_NOTE, EXRENT_DETAIL, EXRENT_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_RENTALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_RENTALRow)
            Return rowEXPENSES_RENTALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXRENT_EXRENTKEY(ByVal EXRENT_EXRENTKEY As Integer) As EXPENSES_RENTALRow
            Return CType(Me.Rows.Find(New Object() {EXRENT_EXRENTKEY}),EXPENSES_RENTALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_RENTALDataTable = CType(MyBase.Clone,EXPENSES_RENTALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_RENTALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXRENT_KEY = MyBase.Columns("EXRENT_KEY")
            Me.columnEXRENT_EXRENTKEY = MyBase.Columns("EXRENT_EXRENTKEY")
            Me.columnEXRENT_SOURCENO = MyBase.Columns("EXRENT_SOURCENO")
            Me.columnEXRENT_DESC = MyBase.Columns("EXRENT_DESC")
            Me.columnEXRENT_AMOUNT = MyBase.Columns("EXRENT_AMOUNT")
            Me.columnEXRENT_DEDUCTIBLE = MyBase.Columns("EXRENT_DEDUCTIBLE")
            Me.columnEXRENT_NOTE = MyBase.Columns("EXRENT_NOTE")
            Me.columnEXRENT_DETAIL = MyBase.Columns("EXRENT_DETAIL")
            Me.columnEXRENT_DEDUCTIBLE_ADD = MyBase.Columns("EXRENT_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXRENT_KEY = New Global.System.Data.DataColumn("EXRENT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_KEY)
            Me.columnEXRENT_EXRENTKEY = New Global.System.Data.DataColumn("EXRENT_EXRENTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_EXRENTKEY)
            Me.columnEXRENT_SOURCENO = New Global.System.Data.DataColumn("EXRENT_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_SOURCENO)
            Me.columnEXRENT_DESC = New Global.System.Data.DataColumn("EXRENT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_DESC)
            Me.columnEXRENT_AMOUNT = New Global.System.Data.DataColumn("EXRENT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_AMOUNT)
            Me.columnEXRENT_DEDUCTIBLE = New Global.System.Data.DataColumn("EXRENT_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_DEDUCTIBLE)
            Me.columnEXRENT_NOTE = New Global.System.Data.DataColumn("EXRENT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_NOTE)
            Me.columnEXRENT_DETAIL = New Global.System.Data.DataColumn("EXRENT_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_DETAIL)
            Me.columnEXRENT_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXRENT_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENT_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXRENT_EXRENTKEY}, true))
            Me.columnEXRENT_EXRENTKEY.AutoIncrement = true
            Me.columnEXRENT_EXRENTKEY.AllowDBNull = false
            Me.columnEXRENT_EXRENTKEY.Unique = true
            Me.columnEXRENT_DESC.MaxLength = 255
            Me.columnEXRENT_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXRENT_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXRENT_NOTE.MaxLength = 3000
            Me.columnEXRENT_DETAIL.MaxLength = 30
            Me.columnEXRENT_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_RENTALRow() As EXPENSES_RENTALRow
            Return CType(Me.NewRow,EXPENSES_RENTALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_RENTALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_RENTALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_RENTALRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTALRowChanged(Me, New EXPENSES_RENTALRowChangeEvent(CType(e.Row,EXPENSES_RENTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_RENTALRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTALRowChanging(Me, New EXPENSES_RENTALRowChangeEvent(CType(e.Row,EXPENSES_RENTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_RENTALRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTALRowDeleted(Me, New EXPENSES_RENTALRowChangeEvent(CType(e.Row,EXPENSES_RENTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_RENTALRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTALRowDeleting(Me, New EXPENSES_RENTALRowChangeEvent(CType(e.Row,EXPENSES_RENTALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_RENTALRow(ByVal row As EXPENSES_RENTALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_RENTALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_RENTAL_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_RENTAL_DETAILRow)
        
        Private columnEXRENTD_KEY As Global.System.Data.DataColumn
        
        Private columnEXRENTD_EXRENTKEY As Global.System.Data.DataColumn
        
        Private columnEXRENTD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXRENTD_EXRENTDKEY As Global.System.Data.DataColumn
        
        Private columnEXRENTD_DESC As Global.System.Data.DataColumn
        
        Private columnEXRENTD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXRENTD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXRENTD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXRENTD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_RENTAL_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_EXRENTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_EXRENTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_EXRENTDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_EXRENTDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRENTD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRENTD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_RENTAL_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_RENTAL_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTAL_DETAILRowChanging As EXPENSES_RENTAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTAL_DETAILRowChanged As EXPENSES_RENTAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTAL_DETAILRowDeleting As EXPENSES_RENTAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RENTAL_DETAILRowDeleted As EXPENSES_RENTAL_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_RENTAL_DETAILRow(ByVal row As EXPENSES_RENTAL_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_RENTAL_DETAILRow(ByVal EXRENTD_KEY As Integer, ByVal EXRENTD_SOURCENO As Integer, ByVal EXRENTD_DESC As String, ByVal EXRENTD_DEDUCTIBLE As Boolean, ByVal EXRENTD_AMOUNT As Decimal, ByVal EXRENTD_NOTE As String, ByVal EXRENTD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_RENTAL_DETAILRow
            Dim rowEXPENSES_RENTAL_DETAILRow As EXPENSES_RENTAL_DETAILRow = CType(Me.NewRow,EXPENSES_RENTAL_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXRENTD_KEY, Nothing, EXRENTD_SOURCENO, Nothing, EXRENTD_DESC, EXRENTD_DEDUCTIBLE, EXRENTD_AMOUNT, EXRENTD_NOTE, EXRENTD_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_RENTAL_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_RENTAL_DETAILRow)
            Return rowEXPENSES_RENTAL_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXRENTD_EXRENTDKEY(ByVal EXRENTD_EXRENTDKEY As Integer) As EXPENSES_RENTAL_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXRENTD_EXRENTDKEY}),EXPENSES_RENTAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_RENTAL_DETAILDataTable = CType(MyBase.Clone,EXPENSES_RENTAL_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_RENTAL_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXRENTD_KEY = MyBase.Columns("EXRENTD_KEY")
            Me.columnEXRENTD_EXRENTKEY = MyBase.Columns("EXRENTD_EXRENTKEY")
            Me.columnEXRENTD_SOURCENO = MyBase.Columns("EXRENTD_SOURCENO")
            Me.columnEXRENTD_EXRENTDKEY = MyBase.Columns("EXRENTD_EXRENTDKEY")
            Me.columnEXRENTD_DESC = MyBase.Columns("EXRENTD_DESC")
            Me.columnEXRENTD_DEDUCTIBLE = MyBase.Columns("EXRENTD_DEDUCTIBLE")
            Me.columnEXRENTD_AMOUNT = MyBase.Columns("EXRENTD_AMOUNT")
            Me.columnEXRENTD_NOTE = MyBase.Columns("EXRENTD_NOTE")
            Me.columnEXRENTD_DEDUCTIBLE_ADD = MyBase.Columns("EXRENTD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXRENTD_KEY = New Global.System.Data.DataColumn("EXRENTD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_KEY)
            Me.columnEXRENTD_EXRENTKEY = New Global.System.Data.DataColumn("EXRENTD_EXRENTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_EXRENTKEY)
            Me.columnEXRENTD_SOURCENO = New Global.System.Data.DataColumn("EXRENTD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_SOURCENO)
            Me.columnEXRENTD_EXRENTDKEY = New Global.System.Data.DataColumn("EXRENTD_EXRENTDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_EXRENTDKEY)
            Me.columnEXRENTD_DESC = New Global.System.Data.DataColumn("EXRENTD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_DESC)
            Me.columnEXRENTD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXRENTD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_DEDUCTIBLE)
            Me.columnEXRENTD_AMOUNT = New Global.System.Data.DataColumn("EXRENTD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_AMOUNT)
            Me.columnEXRENTD_NOTE = New Global.System.Data.DataColumn("EXRENTD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_NOTE)
            Me.columnEXRENTD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXRENTD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRENTD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXRENTD_EXRENTDKEY}, true))
            Me.columnEXRENTD_EXRENTKEY.AutoIncrement = true
            Me.columnEXRENTD_EXRENTKEY.AllowDBNull = false
            Me.columnEXRENTD_EXRENTDKEY.AutoIncrement = true
            Me.columnEXRENTD_EXRENTDKEY.AllowDBNull = false
            Me.columnEXRENTD_EXRENTDKEY.Unique = true
            Me.columnEXRENTD_DESC.MaxLength = 255
            Me.columnEXRENTD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXRENTD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXRENTD_NOTE.MaxLength = 3000
            Me.columnEXRENTD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_RENTAL_DETAILRow() As EXPENSES_RENTAL_DETAILRow
            Return CType(Me.NewRow,EXPENSES_RENTAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_RENTAL_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_RENTAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_RENTAL_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTAL_DETAILRowChanged(Me, New EXPENSES_RENTAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RENTAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_RENTAL_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTAL_DETAILRowChanging(Me, New EXPENSES_RENTAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RENTAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_RENTAL_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTAL_DETAILRowDeleted(Me, New EXPENSES_RENTAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RENTAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_RENTAL_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RENTAL_DETAILRowDeleting(Me, New EXPENSES_RENTAL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RENTAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_RENTAL_DETAILRow(ByVal row As EXPENSES_RENTAL_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_RENTAL_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_REPAIRDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_REPAIRRow)
        
        Private columnEXREP_KEY As Global.System.Data.DataColumn
        
        Private columnEXREP_EXREPKEY As Global.System.Data.DataColumn
        
        Private columnEXREP_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXREP_DESC As Global.System.Data.DataColumn
        
        Private columnEXREP_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXREP_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXREP_NOTE As Global.System.Data.DataColumn
        
        Private columnEXREP_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXREP_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_REPAIR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_EXREPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_EXREPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREP_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREP_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_REPAIRRow
            Get
                Return CType(Me.Rows(index),EXPENSES_REPAIRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIRRowChanging As EXPENSES_REPAIRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIRRowChanged As EXPENSES_REPAIRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIRRowDeleting As EXPENSES_REPAIRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIRRowDeleted As EXPENSES_REPAIRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_REPAIRRow(ByVal row As EXPENSES_REPAIRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_REPAIRRow(ByVal EXREP_KEY As Integer, ByVal EXREP_SOURCENO As Integer, ByVal EXREP_DESC As String, ByVal EXREP_AMOUNT As Decimal, ByVal EXREP_DEDUCTIBLE As Boolean, ByVal EXREP_NOTE As String, ByVal EXREP_DETAIL As String, ByVal EXREP_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_REPAIRRow
            Dim rowEXPENSES_REPAIRRow As EXPENSES_REPAIRRow = CType(Me.NewRow,EXPENSES_REPAIRRow)
            Dim columnValuesArray() As Object = New Object() {EXREP_KEY, Nothing, EXREP_SOURCENO, EXREP_DESC, EXREP_AMOUNT, EXREP_DEDUCTIBLE, EXREP_NOTE, EXREP_DETAIL, EXREP_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_REPAIRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_REPAIRRow)
            Return rowEXPENSES_REPAIRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXREP_EXREPKEY(ByVal EXREP_EXREPKEY As Integer) As EXPENSES_REPAIRRow
            Return CType(Me.Rows.Find(New Object() {EXREP_EXREPKEY}),EXPENSES_REPAIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_REPAIRDataTable = CType(MyBase.Clone,EXPENSES_REPAIRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_REPAIRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXREP_KEY = MyBase.Columns("EXREP_KEY")
            Me.columnEXREP_EXREPKEY = MyBase.Columns("EXREP_EXREPKEY")
            Me.columnEXREP_SOURCENO = MyBase.Columns("EXREP_SOURCENO")
            Me.columnEXREP_DESC = MyBase.Columns("EXREP_DESC")
            Me.columnEXREP_AMOUNT = MyBase.Columns("EXREP_AMOUNT")
            Me.columnEXREP_DEDUCTIBLE = MyBase.Columns("EXREP_DEDUCTIBLE")
            Me.columnEXREP_NOTE = MyBase.Columns("EXREP_NOTE")
            Me.columnEXREP_DETAIL = MyBase.Columns("EXREP_DETAIL")
            Me.columnEXREP_DEDUCTIBLE_ADD = MyBase.Columns("EXREP_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXREP_KEY = New Global.System.Data.DataColumn("EXREP_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_KEY)
            Me.columnEXREP_EXREPKEY = New Global.System.Data.DataColumn("EXREP_EXREPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_EXREPKEY)
            Me.columnEXREP_SOURCENO = New Global.System.Data.DataColumn("EXREP_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_SOURCENO)
            Me.columnEXREP_DESC = New Global.System.Data.DataColumn("EXREP_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_DESC)
            Me.columnEXREP_AMOUNT = New Global.System.Data.DataColumn("EXREP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_AMOUNT)
            Me.columnEXREP_DEDUCTIBLE = New Global.System.Data.DataColumn("EXREP_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_DEDUCTIBLE)
            Me.columnEXREP_NOTE = New Global.System.Data.DataColumn("EXREP_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_NOTE)
            Me.columnEXREP_DETAIL = New Global.System.Data.DataColumn("EXREP_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_DETAIL)
            Me.columnEXREP_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXREP_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREP_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXREP_EXREPKEY}, true))
            Me.columnEXREP_EXREPKEY.AutoIncrement = true
            Me.columnEXREP_EXREPKEY.AllowDBNull = false
            Me.columnEXREP_EXREPKEY.Unique = true
            Me.columnEXREP_DESC.MaxLength = 255
            Me.columnEXREP_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXREP_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXREP_NOTE.MaxLength = 3000
            Me.columnEXREP_DETAIL.MaxLength = 30
            Me.columnEXREP_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_REPAIRRow() As EXPENSES_REPAIRRow
            Return CType(Me.NewRow,EXPENSES_REPAIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_REPAIRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_REPAIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_REPAIRRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIRRowChanged(Me, New EXPENSES_REPAIRRowChangeEvent(CType(e.Row,EXPENSES_REPAIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_REPAIRRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIRRowChanging(Me, New EXPENSES_REPAIRRowChangeEvent(CType(e.Row,EXPENSES_REPAIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_REPAIRRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIRRowDeleted(Me, New EXPENSES_REPAIRRowChangeEvent(CType(e.Row,EXPENSES_REPAIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_REPAIRRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIRRowDeleting(Me, New EXPENSES_REPAIRRowChangeEvent(CType(e.Row,EXPENSES_REPAIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_REPAIRRow(ByVal row As EXPENSES_REPAIRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_REPAIRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_REPAIR_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_REPAIR_DETAILRow)
        
        Private columnEXREPD_KEY As Global.System.Data.DataColumn
        
        Private columnEXREPD_EXREPKEY As Global.System.Data.DataColumn
        
        Private columnEXREPD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXREPD_EXREPDKEY As Global.System.Data.DataColumn
        
        Private columnEXREPD_DESC As Global.System.Data.DataColumn
        
        Private columnEXREPD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXREPD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXREPD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXREPD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_REPAIR_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_EXREPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_EXREPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_EXREPDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_EXREPDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXREPD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXREPD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_REPAIR_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_REPAIR_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIR_DETAILRowChanging As EXPENSES_REPAIR_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIR_DETAILRowChanged As EXPENSES_REPAIR_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIR_DETAILRowDeleting As EXPENSES_REPAIR_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_REPAIR_DETAILRowDeleted As EXPENSES_REPAIR_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_REPAIR_DETAILRow(ByVal row As EXPENSES_REPAIR_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_REPAIR_DETAILRow(ByVal EXREPD_KEY As Integer, ByVal parentEXPENSES_REPAIRRowByFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL As EXPENSES_REPAIRRow, ByVal EXREPD_SOURCENO As Integer, ByVal EXREPD_DESC As String, ByVal EXREPD_DEDUCTIBLE As Boolean, ByVal EXREPD_AMOUNT As Decimal, ByVal EXREPD_NOTE As String, ByVal EXREPD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_REPAIR_DETAILRow
            Dim rowEXPENSES_REPAIR_DETAILRow As EXPENSES_REPAIR_DETAILRow = CType(Me.NewRow,EXPENSES_REPAIR_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXREPD_KEY, Nothing, EXREPD_SOURCENO, Nothing, EXREPD_DESC, EXREPD_DEDUCTIBLE, EXREPD_AMOUNT, EXREPD_NOTE, EXREPD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_REPAIRRowByFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_REPAIRRowByFK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL(1)
            End If
            rowEXPENSES_REPAIR_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_REPAIR_DETAILRow)
            Return rowEXPENSES_REPAIR_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXREPD_EXREPDKEY(ByVal EXREPD_EXREPDKEY As Integer) As EXPENSES_REPAIR_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXREPD_EXREPDKEY}),EXPENSES_REPAIR_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_REPAIR_DETAILDataTable = CType(MyBase.Clone,EXPENSES_REPAIR_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_REPAIR_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXREPD_KEY = MyBase.Columns("EXREPD_KEY")
            Me.columnEXREPD_EXREPKEY = MyBase.Columns("EXREPD_EXREPKEY")
            Me.columnEXREPD_SOURCENO = MyBase.Columns("EXREPD_SOURCENO")
            Me.columnEXREPD_EXREPDKEY = MyBase.Columns("EXREPD_EXREPDKEY")
            Me.columnEXREPD_DESC = MyBase.Columns("EXREPD_DESC")
            Me.columnEXREPD_DEDUCTIBLE = MyBase.Columns("EXREPD_DEDUCTIBLE")
            Me.columnEXREPD_AMOUNT = MyBase.Columns("EXREPD_AMOUNT")
            Me.columnEXREPD_NOTE = MyBase.Columns("EXREPD_NOTE")
            Me.columnEXREPD_DEDUCTIBLE_ADD = MyBase.Columns("EXREPD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXREPD_KEY = New Global.System.Data.DataColumn("EXREPD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_KEY)
            Me.columnEXREPD_EXREPKEY = New Global.System.Data.DataColumn("EXREPD_EXREPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_EXREPKEY)
            Me.columnEXREPD_SOURCENO = New Global.System.Data.DataColumn("EXREPD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_SOURCENO)
            Me.columnEXREPD_EXREPDKEY = New Global.System.Data.DataColumn("EXREPD_EXREPDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_EXREPDKEY)
            Me.columnEXREPD_DESC = New Global.System.Data.DataColumn("EXREPD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_DESC)
            Me.columnEXREPD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXREPD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_DEDUCTIBLE)
            Me.columnEXREPD_AMOUNT = New Global.System.Data.DataColumn("EXREPD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_AMOUNT)
            Me.columnEXREPD_NOTE = New Global.System.Data.DataColumn("EXREPD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_NOTE)
            Me.columnEXREPD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXREPD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXREPD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXREPD_EXREPDKEY}, true))
            Me.columnEXREPD_EXREPDKEY.AutoIncrement = true
            Me.columnEXREPD_EXREPDKEY.AllowDBNull = false
            Me.columnEXREPD_EXREPDKEY.Unique = true
            Me.columnEXREPD_DESC.MaxLength = 255
            Me.columnEXREPD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXREPD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXREPD_NOTE.MaxLength = 3000
            Me.columnEXREPD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_REPAIR_DETAILRow() As EXPENSES_REPAIR_DETAILRow
            Return CType(Me.NewRow,EXPENSES_REPAIR_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_REPAIR_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_REPAIR_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_REPAIR_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIR_DETAILRowChanged(Me, New EXPENSES_REPAIR_DETAILRowChangeEvent(CType(e.Row,EXPENSES_REPAIR_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_REPAIR_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIR_DETAILRowChanging(Me, New EXPENSES_REPAIR_DETAILRowChangeEvent(CType(e.Row,EXPENSES_REPAIR_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_REPAIR_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIR_DETAILRowDeleted(Me, New EXPENSES_REPAIR_DETAILRowChangeEvent(CType(e.Row,EXPENSES_REPAIR_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_REPAIR_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_REPAIR_DETAILRowDeleting(Me, New EXPENSES_REPAIR_DETAILRowChangeEvent(CType(e.Row,EXPENSES_REPAIR_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_REPAIR_DETAILRow(ByVal row As EXPENSES_REPAIR_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_REPAIR_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_RESEARCHDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_RESEARCHRow)
        
        Private columnEXRES_KEY As Global.System.Data.DataColumn
        
        Private columnEXRES_EXRESKEY As Global.System.Data.DataColumn
        
        Private columnEXRES_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXRES_DESC As Global.System.Data.DataColumn
        
        Private columnEXRES_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXRES_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXRES_NOTE As Global.System.Data.DataColumn
        
        Private columnEXRES_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXRES_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_RESEARCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_EXRESKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_EXRESKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRES_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRES_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_RESEARCHRow
            Get
                Return CType(Me.Rows(index),EXPENSES_RESEARCHRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCHRowChanging As EXPENSES_RESEARCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCHRowChanged As EXPENSES_RESEARCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCHRowDeleting As EXPENSES_RESEARCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCHRowDeleted As EXPENSES_RESEARCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_RESEARCHRow(ByVal row As EXPENSES_RESEARCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_RESEARCHRow(ByVal EXRES_KEY As Integer, ByVal EXRES_SOURCENO As Integer, ByVal EXRES_DESC As String, ByVal EXRES_AMOUNT As Decimal, ByVal EXRES_DEDUCTIBLE As Boolean, ByVal EXRES_NOTE As String, ByVal EXRES_DETAIL As String, ByVal EXRES_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_RESEARCHRow
            Dim rowEXPENSES_RESEARCHRow As EXPENSES_RESEARCHRow = CType(Me.NewRow,EXPENSES_RESEARCHRow)
            Dim columnValuesArray() As Object = New Object() {EXRES_KEY, Nothing, EXRES_SOURCENO, EXRES_DESC, EXRES_AMOUNT, EXRES_DEDUCTIBLE, EXRES_NOTE, EXRES_DETAIL, EXRES_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_RESEARCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_RESEARCHRow)
            Return rowEXPENSES_RESEARCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXRES_EXRESKEY(ByVal EXRES_EXRESKEY As Integer) As EXPENSES_RESEARCHRow
            Return CType(Me.Rows.Find(New Object() {EXRES_EXRESKEY}),EXPENSES_RESEARCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_RESEARCHDataTable = CType(MyBase.Clone,EXPENSES_RESEARCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_RESEARCHDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXRES_KEY = MyBase.Columns("EXRES_KEY")
            Me.columnEXRES_EXRESKEY = MyBase.Columns("EXRES_EXRESKEY")
            Me.columnEXRES_SOURCENO = MyBase.Columns("EXRES_SOURCENO")
            Me.columnEXRES_DESC = MyBase.Columns("EXRES_DESC")
            Me.columnEXRES_AMOUNT = MyBase.Columns("EXRES_AMOUNT")
            Me.columnEXRES_DEDUCTIBLE = MyBase.Columns("EXRES_DEDUCTIBLE")
            Me.columnEXRES_NOTE = MyBase.Columns("EXRES_NOTE")
            Me.columnEXRES_DETAIL = MyBase.Columns("EXRES_DETAIL")
            Me.columnEXRES_DEDUCTIBLE_ADD = MyBase.Columns("EXRES_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXRES_KEY = New Global.System.Data.DataColumn("EXRES_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_KEY)
            Me.columnEXRES_EXRESKEY = New Global.System.Data.DataColumn("EXRES_EXRESKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_EXRESKEY)
            Me.columnEXRES_SOURCENO = New Global.System.Data.DataColumn("EXRES_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_SOURCENO)
            Me.columnEXRES_DESC = New Global.System.Data.DataColumn("EXRES_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_DESC)
            Me.columnEXRES_AMOUNT = New Global.System.Data.DataColumn("EXRES_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_AMOUNT)
            Me.columnEXRES_DEDUCTIBLE = New Global.System.Data.DataColumn("EXRES_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_DEDUCTIBLE)
            Me.columnEXRES_NOTE = New Global.System.Data.DataColumn("EXRES_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_NOTE)
            Me.columnEXRES_DETAIL = New Global.System.Data.DataColumn("EXRES_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_DETAIL)
            Me.columnEXRES_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXRES_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRES_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXRES_EXRESKEY}, true))
            Me.columnEXRES_EXRESKEY.AutoIncrement = true
            Me.columnEXRES_EXRESKEY.AllowDBNull = false
            Me.columnEXRES_EXRESKEY.Unique = true
            Me.columnEXRES_DESC.MaxLength = 255
            Me.columnEXRES_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXRES_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXRES_NOTE.MaxLength = 3000
            Me.columnEXRES_DETAIL.MaxLength = 30
            Me.columnEXRES_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_RESEARCHRow() As EXPENSES_RESEARCHRow
            Return CType(Me.NewRow,EXPENSES_RESEARCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_RESEARCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_RESEARCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_RESEARCHRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCHRowChanged(Me, New EXPENSES_RESEARCHRowChangeEvent(CType(e.Row,EXPENSES_RESEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_RESEARCHRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCHRowChanging(Me, New EXPENSES_RESEARCHRowChangeEvent(CType(e.Row,EXPENSES_RESEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_RESEARCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCHRowDeleted(Me, New EXPENSES_RESEARCHRowChangeEvent(CType(e.Row,EXPENSES_RESEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_RESEARCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCHRowDeleting(Me, New EXPENSES_RESEARCHRowChangeEvent(CType(e.Row,EXPENSES_RESEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_RESEARCHRow(ByVal row As EXPENSES_RESEARCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_RESEARCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_RESEARCH_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_RESEARCH_DETAILRow)
        
        Private columnEXRESD_KEY As Global.System.Data.DataColumn
        
        Private columnEXRESD_EXRESKEY As Global.System.Data.DataColumn
        
        Private columnEXRESD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXRESD_EXRESDKEY As Global.System.Data.DataColumn
        
        Private columnEXRESD_DESC As Global.System.Data.DataColumn
        
        Private columnEXRESD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXRESD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXRESD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXRESD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_RESEARCH_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_EXRESKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_EXRESKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_EXRESDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_EXRESDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXRESD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXRESD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_RESEARCH_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_RESEARCH_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCH_DETAILRowChanging As EXPENSES_RESEARCH_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCH_DETAILRowChanged As EXPENSES_RESEARCH_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCH_DETAILRowDeleting As EXPENSES_RESEARCH_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_RESEARCH_DETAILRowDeleted As EXPENSES_RESEARCH_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_RESEARCH_DETAILRow(ByVal row As EXPENSES_RESEARCH_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_RESEARCH_DETAILRow(ByVal EXRESD_KEY As Integer, ByVal parentEXPENSES_RESEARCHRowByFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL As EXPENSES_RESEARCHRow, ByVal EXRESD_SOURCENO As Integer, ByVal EXRESD_DESC As String, ByVal EXRESD_DEDUCTIBLE As Boolean, ByVal EXRESD_AMOUNT As Decimal, ByVal EXRESD_NOTE As String, ByVal EXRESD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_RESEARCH_DETAILRow
            Dim rowEXPENSES_RESEARCH_DETAILRow As EXPENSES_RESEARCH_DETAILRow = CType(Me.NewRow,EXPENSES_RESEARCH_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXRESD_KEY, Nothing, EXRESD_SOURCENO, Nothing, EXRESD_DESC, EXRESD_DEDUCTIBLE, EXRESD_AMOUNT, EXRESD_NOTE, EXRESD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_RESEARCHRowByFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_RESEARCHRowByFK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL(1)
            End If
            rowEXPENSES_RESEARCH_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_RESEARCH_DETAILRow)
            Return rowEXPENSES_RESEARCH_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXRESD_EXRESDKEY(ByVal EXRESD_EXRESDKEY As Integer) As EXPENSES_RESEARCH_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXRESD_EXRESDKEY}),EXPENSES_RESEARCH_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_RESEARCH_DETAILDataTable = CType(MyBase.Clone,EXPENSES_RESEARCH_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_RESEARCH_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXRESD_KEY = MyBase.Columns("EXRESD_KEY")
            Me.columnEXRESD_EXRESKEY = MyBase.Columns("EXRESD_EXRESKEY")
            Me.columnEXRESD_SOURCENO = MyBase.Columns("EXRESD_SOURCENO")
            Me.columnEXRESD_EXRESDKEY = MyBase.Columns("EXRESD_EXRESDKEY")
            Me.columnEXRESD_DESC = MyBase.Columns("EXRESD_DESC")
            Me.columnEXRESD_DEDUCTIBLE = MyBase.Columns("EXRESD_DEDUCTIBLE")
            Me.columnEXRESD_AMOUNT = MyBase.Columns("EXRESD_AMOUNT")
            Me.columnEXRESD_NOTE = MyBase.Columns("EXRESD_NOTE")
            Me.columnEXRESD_DEDUCTIBLE_ADD = MyBase.Columns("EXRESD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXRESD_KEY = New Global.System.Data.DataColumn("EXRESD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_KEY)
            Me.columnEXRESD_EXRESKEY = New Global.System.Data.DataColumn("EXRESD_EXRESKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_EXRESKEY)
            Me.columnEXRESD_SOURCENO = New Global.System.Data.DataColumn("EXRESD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_SOURCENO)
            Me.columnEXRESD_EXRESDKEY = New Global.System.Data.DataColumn("EXRESD_EXRESDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_EXRESDKEY)
            Me.columnEXRESD_DESC = New Global.System.Data.DataColumn("EXRESD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_DESC)
            Me.columnEXRESD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXRESD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_DEDUCTIBLE)
            Me.columnEXRESD_AMOUNT = New Global.System.Data.DataColumn("EXRESD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_AMOUNT)
            Me.columnEXRESD_NOTE = New Global.System.Data.DataColumn("EXRESD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_NOTE)
            Me.columnEXRESD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXRESD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXRESD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXRESD_EXRESDKEY}, true))
            Me.columnEXRESD_EXRESDKEY.AutoIncrement = true
            Me.columnEXRESD_EXRESDKEY.AllowDBNull = false
            Me.columnEXRESD_EXRESDKEY.Unique = true
            Me.columnEXRESD_DESC.MaxLength = 255
            Me.columnEXRESD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXRESD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXRESD_NOTE.MaxLength = 3000
            Me.columnEXRESD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_RESEARCH_DETAILRow() As EXPENSES_RESEARCH_DETAILRow
            Return CType(Me.NewRow,EXPENSES_RESEARCH_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_RESEARCH_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_RESEARCH_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_RESEARCH_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCH_DETAILRowChanged(Me, New EXPENSES_RESEARCH_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RESEARCH_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_RESEARCH_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCH_DETAILRowChanging(Me, New EXPENSES_RESEARCH_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RESEARCH_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_RESEARCH_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCH_DETAILRowDeleted(Me, New EXPENSES_RESEARCH_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RESEARCH_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_RESEARCH_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_RESEARCH_DETAILRowDeleting(Me, New EXPENSES_RESEARCH_DETAILRowChangeEvent(CType(e.Row,EXPENSES_RESEARCH_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_RESEARCH_DETAILRow(ByVal row As EXPENSES_RESEARCH_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_RESEARCH_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_PROMOTEDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_PROMOTERow)
        
        Private columnEXP_KEY As Global.System.Data.DataColumn
        
        Private columnEXP_EXPKEY As Global.System.Data.DataColumn
        
        Private columnEXP_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXP_DESC As Global.System.Data.DataColumn
        
        Private columnEXP_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXP_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXP_NOTE As Global.System.Data.DataColumn
        
        Private columnEXP_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXP_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_PROMOTE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_EXPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_EXPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXP_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXP_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_PROMOTERow
            Get
                Return CType(Me.Rows(index),EXPENSES_PROMOTERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTERowChanging As EXPENSES_PROMOTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTERowChanged As EXPENSES_PROMOTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTERowDeleting As EXPENSES_PROMOTERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTERowDeleted As EXPENSES_PROMOTERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_PROMOTERow(ByVal row As EXPENSES_PROMOTERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_PROMOTERow(ByVal EXP_KEY As Integer, ByVal EXP_SOURCENO As Integer, ByVal EXP_DESC As String, ByVal EXP_AMOUNT As Decimal, ByVal EXP_DEDUCTIBLE As Boolean, ByVal EXP_NOTE As String, ByVal EXP_DETAIL As String, ByVal EXP_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_PROMOTERow
            Dim rowEXPENSES_PROMOTERow As EXPENSES_PROMOTERow = CType(Me.NewRow,EXPENSES_PROMOTERow)
            Dim columnValuesArray() As Object = New Object() {EXP_KEY, Nothing, EXP_SOURCENO, EXP_DESC, EXP_AMOUNT, EXP_DEDUCTIBLE, EXP_NOTE, EXP_DETAIL, EXP_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_PROMOTERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_PROMOTERow)
            Return rowEXPENSES_PROMOTERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXP_EXPKEY(ByVal EXP_EXPKEY As Integer) As EXPENSES_PROMOTERow
            Return CType(Me.Rows.Find(New Object() {EXP_EXPKEY}),EXPENSES_PROMOTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_PROMOTEDataTable = CType(MyBase.Clone,EXPENSES_PROMOTEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_PROMOTEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXP_KEY = MyBase.Columns("EXP_KEY")
            Me.columnEXP_EXPKEY = MyBase.Columns("EXP_EXPKEY")
            Me.columnEXP_SOURCENO = MyBase.Columns("EXP_SOURCENO")
            Me.columnEXP_DESC = MyBase.Columns("EXP_DESC")
            Me.columnEXP_AMOUNT = MyBase.Columns("EXP_AMOUNT")
            Me.columnEXP_DEDUCTIBLE = MyBase.Columns("EXP_DEDUCTIBLE")
            Me.columnEXP_NOTE = MyBase.Columns("EXP_NOTE")
            Me.columnEXP_DETAIL = MyBase.Columns("EXP_DETAIL")
            Me.columnEXP_DEDUCTIBLE_ADD = MyBase.Columns("EXP_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXP_KEY = New Global.System.Data.DataColumn("EXP_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_KEY)
            Me.columnEXP_EXPKEY = New Global.System.Data.DataColumn("EXP_EXPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_EXPKEY)
            Me.columnEXP_SOURCENO = New Global.System.Data.DataColumn("EXP_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_SOURCENO)
            Me.columnEXP_DESC = New Global.System.Data.DataColumn("EXP_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_DESC)
            Me.columnEXP_AMOUNT = New Global.System.Data.DataColumn("EXP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_AMOUNT)
            Me.columnEXP_DEDUCTIBLE = New Global.System.Data.DataColumn("EXP_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_DEDUCTIBLE)
            Me.columnEXP_NOTE = New Global.System.Data.DataColumn("EXP_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_NOTE)
            Me.columnEXP_DETAIL = New Global.System.Data.DataColumn("EXP_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_DETAIL)
            Me.columnEXP_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXP_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXP_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXP_EXPKEY}, true))
            Me.columnEXP_EXPKEY.AutoIncrement = true
            Me.columnEXP_EXPKEY.AllowDBNull = false
            Me.columnEXP_EXPKEY.Unique = true
            Me.columnEXP_DESC.MaxLength = 255
            Me.columnEXP_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXP_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXP_NOTE.MaxLength = 3000
            Me.columnEXP_DETAIL.MaxLength = 30
            Me.columnEXP_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_PROMOTERow() As EXPENSES_PROMOTERow
            Return CType(Me.NewRow,EXPENSES_PROMOTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_PROMOTERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_PROMOTERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_PROMOTERowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTERowChanged(Me, New EXPENSES_PROMOTERowChangeEvent(CType(e.Row,EXPENSES_PROMOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_PROMOTERowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTERowChanging(Me, New EXPENSES_PROMOTERowChangeEvent(CType(e.Row,EXPENSES_PROMOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_PROMOTERowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTERowDeleted(Me, New EXPENSES_PROMOTERowChangeEvent(CType(e.Row,EXPENSES_PROMOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_PROMOTERowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTERowDeleting(Me, New EXPENSES_PROMOTERowChangeEvent(CType(e.Row,EXPENSES_PROMOTERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_PROMOTERow(ByVal row As EXPENSES_PROMOTERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_PROMOTEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_PROMOTE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_PROMOTE_DETAILRow)
        
        Private columnEXPD_KEY As Global.System.Data.DataColumn
        
        Private columnEXPD_EXPKEY As Global.System.Data.DataColumn
        
        Private columnEXPD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXPD_EXPDKEY As Global.System.Data.DataColumn
        
        Private columnEXPD_DESC As Global.System.Data.DataColumn
        
        Private columnEXPD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXPD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXPD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXPD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_PROMOTE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_EXPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_EXPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_EXPDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_EXPDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXPD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_PROMOTE_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_PROMOTE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTE_DETAILRowChanging As EXPENSES_PROMOTE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTE_DETAILRowChanged As EXPENSES_PROMOTE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTE_DETAILRowDeleting As EXPENSES_PROMOTE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_PROMOTE_DETAILRowDeleted As EXPENSES_PROMOTE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_PROMOTE_DETAILRow(ByVal row As EXPENSES_PROMOTE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_PROMOTE_DETAILRow(ByVal EXPD_KEY As Integer, ByVal parentEXPENSES_PROMOTERowByFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL As EXPENSES_PROMOTERow, ByVal EXPD_SOURCENO As Integer, ByVal EXPD_DESC As String, ByVal EXPD_DEDUCTIBLE As Boolean, ByVal EXPD_AMOUNT As Decimal, ByVal EXPD_NOTE As String, ByVal EXPD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_PROMOTE_DETAILRow
            Dim rowEXPENSES_PROMOTE_DETAILRow As EXPENSES_PROMOTE_DETAILRow = CType(Me.NewRow,EXPENSES_PROMOTE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXPD_KEY, Nothing, EXPD_SOURCENO, Nothing, EXPD_DESC, EXPD_DEDUCTIBLE, EXPD_AMOUNT, EXPD_NOTE, EXPD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_PROMOTERowByFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_PROMOTERowByFK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL(1)
            End If
            rowEXPENSES_PROMOTE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_PROMOTE_DETAILRow)
            Return rowEXPENSES_PROMOTE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXPD_EXPDKEY(ByVal EXPD_EXPDKEY As Integer) As EXPENSES_PROMOTE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXPD_EXPDKEY}),EXPENSES_PROMOTE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_PROMOTE_DETAILDataTable = CType(MyBase.Clone,EXPENSES_PROMOTE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_PROMOTE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXPD_KEY = MyBase.Columns("EXPD_KEY")
            Me.columnEXPD_EXPKEY = MyBase.Columns("EXPD_EXPKEY")
            Me.columnEXPD_SOURCENO = MyBase.Columns("EXPD_SOURCENO")
            Me.columnEXPD_EXPDKEY = MyBase.Columns("EXPD_EXPDKEY")
            Me.columnEXPD_DESC = MyBase.Columns("EXPD_DESC")
            Me.columnEXPD_DEDUCTIBLE = MyBase.Columns("EXPD_DEDUCTIBLE")
            Me.columnEXPD_AMOUNT = MyBase.Columns("EXPD_AMOUNT")
            Me.columnEXPD_NOTE = MyBase.Columns("EXPD_NOTE")
            Me.columnEXPD_DEDUCTIBLE_ADD = MyBase.Columns("EXPD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXPD_KEY = New Global.System.Data.DataColumn("EXPD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_KEY)
            Me.columnEXPD_EXPKEY = New Global.System.Data.DataColumn("EXPD_EXPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_EXPKEY)
            Me.columnEXPD_SOURCENO = New Global.System.Data.DataColumn("EXPD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_SOURCENO)
            Me.columnEXPD_EXPDKEY = New Global.System.Data.DataColumn("EXPD_EXPDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_EXPDKEY)
            Me.columnEXPD_DESC = New Global.System.Data.DataColumn("EXPD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_DESC)
            Me.columnEXPD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXPD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_DEDUCTIBLE)
            Me.columnEXPD_AMOUNT = New Global.System.Data.DataColumn("EXPD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_AMOUNT)
            Me.columnEXPD_NOTE = New Global.System.Data.DataColumn("EXPD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_NOTE)
            Me.columnEXPD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXPD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXPD_EXPDKEY}, true))
            Me.columnEXPD_EXPDKEY.AutoIncrement = true
            Me.columnEXPD_EXPDKEY.AllowDBNull = false
            Me.columnEXPD_EXPDKEY.Unique = true
            Me.columnEXPD_DESC.MaxLength = 255
            Me.columnEXPD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXPD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXPD_NOTE.MaxLength = 3000
            Me.columnEXPD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_PROMOTE_DETAILRow() As EXPENSES_PROMOTE_DETAILRow
            Return CType(Me.NewRow,EXPENSES_PROMOTE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_PROMOTE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_PROMOTE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_PROMOTE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTE_DETAILRowChanged(Me, New EXPENSES_PROMOTE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_PROMOTE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_PROMOTE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTE_DETAILRowChanging(Me, New EXPENSES_PROMOTE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_PROMOTE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_PROMOTE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTE_DETAILRowDeleted(Me, New EXPENSES_PROMOTE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_PROMOTE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_PROMOTE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_PROMOTE_DETAILRowDeleting(Me, New EXPENSES_PROMOTE_DETAILRowChangeEvent(CType(e.Row,EXPENSES_PROMOTE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_PROMOTE_DETAILRow(ByVal row As EXPENSES_PROMOTE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_PROMOTE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_TRAVELDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_TRAVELRow)
        
        Private columnEXT_KEY As Global.System.Data.DataColumn
        
        Private columnEXT_EXTKEY As Global.System.Data.DataColumn
        
        Private columnEXT_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXT_DESC As Global.System.Data.DataColumn
        
        Private columnEXT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXT_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXT_NOTE As Global.System.Data.DataColumn
        
        Private columnEXT_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXT_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_TRAVEL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_EXTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_EXTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXT_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXT_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_TRAVELRow
            Get
                Return CType(Me.Rows(index),EXPENSES_TRAVELRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVELRowChanging As EXPENSES_TRAVELRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVELRowChanged As EXPENSES_TRAVELRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVELRowDeleting As EXPENSES_TRAVELRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVELRowDeleted As EXPENSES_TRAVELRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_TRAVELRow(ByVal row As EXPENSES_TRAVELRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_TRAVELRow(ByVal EXT_KEY As Integer, ByVal EXT_SOURCENO As Integer, ByVal EXT_DESC As String, ByVal EXT_AMOUNT As Decimal, ByVal EXT_DEDUCTIBLE As Boolean, ByVal EXT_NOTE As String, ByVal EXT_DETAIL As String, ByVal EXT_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_TRAVELRow
            Dim rowEXPENSES_TRAVELRow As EXPENSES_TRAVELRow = CType(Me.NewRow,EXPENSES_TRAVELRow)
            Dim columnValuesArray() As Object = New Object() {EXT_KEY, Nothing, EXT_SOURCENO, EXT_DESC, EXT_AMOUNT, EXT_DEDUCTIBLE, EXT_NOTE, EXT_DETAIL, EXT_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_TRAVELRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_TRAVELRow)
            Return rowEXPENSES_TRAVELRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXT_EXTKEY(ByVal EXT_EXTKEY As Integer) As EXPENSES_TRAVELRow
            Return CType(Me.Rows.Find(New Object() {EXT_EXTKEY}),EXPENSES_TRAVELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_TRAVELDataTable = CType(MyBase.Clone,EXPENSES_TRAVELDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_TRAVELDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXT_KEY = MyBase.Columns("EXT_KEY")
            Me.columnEXT_EXTKEY = MyBase.Columns("EXT_EXTKEY")
            Me.columnEXT_SOURCENO = MyBase.Columns("EXT_SOURCENO")
            Me.columnEXT_DESC = MyBase.Columns("EXT_DESC")
            Me.columnEXT_AMOUNT = MyBase.Columns("EXT_AMOUNT")
            Me.columnEXT_DEDUCTIBLE = MyBase.Columns("EXT_DEDUCTIBLE")
            Me.columnEXT_NOTE = MyBase.Columns("EXT_NOTE")
            Me.columnEXT_DETAIL = MyBase.Columns("EXT_DETAIL")
            Me.columnEXT_DEDUCTIBLE_ADD = MyBase.Columns("EXT_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXT_KEY = New Global.System.Data.DataColumn("EXT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_KEY)
            Me.columnEXT_EXTKEY = New Global.System.Data.DataColumn("EXT_EXTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_EXTKEY)
            Me.columnEXT_SOURCENO = New Global.System.Data.DataColumn("EXT_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_SOURCENO)
            Me.columnEXT_DESC = New Global.System.Data.DataColumn("EXT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_DESC)
            Me.columnEXT_AMOUNT = New Global.System.Data.DataColumn("EXT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_AMOUNT)
            Me.columnEXT_DEDUCTIBLE = New Global.System.Data.DataColumn("EXT_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_DEDUCTIBLE)
            Me.columnEXT_NOTE = New Global.System.Data.DataColumn("EXT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_NOTE)
            Me.columnEXT_DETAIL = New Global.System.Data.DataColumn("EXT_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_DETAIL)
            Me.columnEXT_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXT_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXT_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXT_EXTKEY}, true))
            Me.columnEXT_EXTKEY.AutoIncrement = true
            Me.columnEXT_EXTKEY.AllowDBNull = false
            Me.columnEXT_EXTKEY.Unique = true
            Me.columnEXT_DESC.MaxLength = 255
            Me.columnEXT_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXT_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXT_NOTE.MaxLength = 3000
            Me.columnEXT_DETAIL.MaxLength = 30
            Me.columnEXT_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_TRAVELRow() As EXPENSES_TRAVELRow
            Return CType(Me.NewRow,EXPENSES_TRAVELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_TRAVELRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_TRAVELRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_TRAVELRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVELRowChanged(Me, New EXPENSES_TRAVELRowChangeEvent(CType(e.Row,EXPENSES_TRAVELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_TRAVELRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVELRowChanging(Me, New EXPENSES_TRAVELRowChangeEvent(CType(e.Row,EXPENSES_TRAVELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_TRAVELRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVELRowDeleted(Me, New EXPENSES_TRAVELRowChangeEvent(CType(e.Row,EXPENSES_TRAVELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_TRAVELRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVELRowDeleting(Me, New EXPENSES_TRAVELRowChangeEvent(CType(e.Row,EXPENSES_TRAVELRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_TRAVELRow(ByVal row As EXPENSES_TRAVELRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_TRAVELDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_TRAVEL_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_TRAVEL_DETAILRow)
        
        Private columnEXTD_KEY As Global.System.Data.DataColumn
        
        Private columnEXTD_EXTKEY As Global.System.Data.DataColumn
        
        Private columnEXTD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXTD_EXTDKEY As Global.System.Data.DataColumn
        
        Private columnEXTD_DESC As Global.System.Data.DataColumn
        
        Private columnEXTD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXTD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXTD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXTD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_TRAVEL_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_EXTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_EXTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_EXTDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_EXTDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_TRAVEL_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_TRAVEL_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVEL_DETAILRowChanging As EXPENSES_TRAVEL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVEL_DETAILRowChanged As EXPENSES_TRAVEL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVEL_DETAILRowDeleting As EXPENSES_TRAVEL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_TRAVEL_DETAILRowDeleted As EXPENSES_TRAVEL_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_TRAVEL_DETAILRow(ByVal row As EXPENSES_TRAVEL_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_TRAVEL_DETAILRow(ByVal EXTD_KEY As Integer, ByVal parentEXPENSES_TRAVELRowByFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL As EXPENSES_TRAVELRow, ByVal EXTD_SOURCENO As Integer, ByVal EXTD_DESC As String, ByVal EXTD_DEDUCTIBLE As Boolean, ByVal EXTD_AMOUNT As Decimal, ByVal EXTD_NOTE As String, ByVal EXTD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_TRAVEL_DETAILRow
            Dim rowEXPENSES_TRAVEL_DETAILRow As EXPENSES_TRAVEL_DETAILRow = CType(Me.NewRow,EXPENSES_TRAVEL_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXTD_KEY, Nothing, EXTD_SOURCENO, Nothing, EXTD_DESC, EXTD_DEDUCTIBLE, EXTD_AMOUNT, EXTD_NOTE, EXTD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_TRAVELRowByFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_TRAVELRowByFK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL(1)
            End If
            rowEXPENSES_TRAVEL_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_TRAVEL_DETAILRow)
            Return rowEXPENSES_TRAVEL_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXTD_EXTDKEY(ByVal EXTD_EXTDKEY As Integer) As EXPENSES_TRAVEL_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXTD_EXTDKEY}),EXPENSES_TRAVEL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_TRAVEL_DETAILDataTable = CType(MyBase.Clone,EXPENSES_TRAVEL_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_TRAVEL_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXTD_KEY = MyBase.Columns("EXTD_KEY")
            Me.columnEXTD_EXTKEY = MyBase.Columns("EXTD_EXTKEY")
            Me.columnEXTD_SOURCENO = MyBase.Columns("EXTD_SOURCENO")
            Me.columnEXTD_EXTDKEY = MyBase.Columns("EXTD_EXTDKEY")
            Me.columnEXTD_DESC = MyBase.Columns("EXTD_DESC")
            Me.columnEXTD_DEDUCTIBLE = MyBase.Columns("EXTD_DEDUCTIBLE")
            Me.columnEXTD_AMOUNT = MyBase.Columns("EXTD_AMOUNT")
            Me.columnEXTD_NOTE = MyBase.Columns("EXTD_NOTE")
            Me.columnEXTD_DEDUCTIBLE_ADD = MyBase.Columns("EXTD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXTD_KEY = New Global.System.Data.DataColumn("EXTD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_KEY)
            Me.columnEXTD_EXTKEY = New Global.System.Data.DataColumn("EXTD_EXTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_EXTKEY)
            Me.columnEXTD_SOURCENO = New Global.System.Data.DataColumn("EXTD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_SOURCENO)
            Me.columnEXTD_EXTDKEY = New Global.System.Data.DataColumn("EXTD_EXTDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_EXTDKEY)
            Me.columnEXTD_DESC = New Global.System.Data.DataColumn("EXTD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_DESC)
            Me.columnEXTD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXTD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_DEDUCTIBLE)
            Me.columnEXTD_AMOUNT = New Global.System.Data.DataColumn("EXTD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_AMOUNT)
            Me.columnEXTD_NOTE = New Global.System.Data.DataColumn("EXTD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_NOTE)
            Me.columnEXTD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXTD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXTD_EXTDKEY}, true))
            Me.columnEXTD_EXTDKEY.AutoIncrement = true
            Me.columnEXTD_EXTDKEY.AllowDBNull = false
            Me.columnEXTD_EXTDKEY.Unique = true
            Me.columnEXTD_DESC.MaxLength = 255
            Me.columnEXTD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXTD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXTD_NOTE.MaxLength = 3000
            Me.columnEXTD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_TRAVEL_DETAILRow() As EXPENSES_TRAVEL_DETAILRow
            Return CType(Me.NewRow,EXPENSES_TRAVEL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_TRAVEL_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_TRAVEL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_TRAVEL_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVEL_DETAILRowChanged(Me, New EXPENSES_TRAVEL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TRAVEL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_TRAVEL_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVEL_DETAILRowChanging(Me, New EXPENSES_TRAVEL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TRAVEL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_TRAVEL_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVEL_DETAILRowDeleted(Me, New EXPENSES_TRAVEL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TRAVEL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_TRAVEL_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_TRAVEL_DETAILRowDeleting(Me, New EXPENSES_TRAVEL_DETAILRowChangeEvent(CType(e.Row,EXPENSES_TRAVEL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_TRAVEL_DETAILRow(ByVal row As EXPENSES_TRAVEL_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_TRAVEL_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_JKDMDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_JKDMRow)
        
        Private columnEXJK_KEY As Global.System.Data.DataColumn
        
        Private columnEXJK_EXJKKEY As Global.System.Data.DataColumn
        
        Private columnEXJK_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXJK_DESC As Global.System.Data.DataColumn
        
        Private columnEXJK_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXJK_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXJK_NOTE As Global.System.Data.DataColumn
        
        Private columnEXJK_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXJK_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_JKDM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_EXJKKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_EXJKKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJK_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJK_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_JKDMRow
            Get
                Return CType(Me.Rows(index),EXPENSES_JKDMRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDMRowChanging As EXPENSES_JKDMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDMRowChanged As EXPENSES_JKDMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDMRowDeleting As EXPENSES_JKDMRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDMRowDeleted As EXPENSES_JKDMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_JKDMRow(ByVal row As EXPENSES_JKDMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_JKDMRow(ByVal EXJK_KEY As Integer, ByVal EXJK_SOURCENO As Integer, ByVal EXJK_DESC As String, ByVal EXJK_AMOUNT As Decimal, ByVal EXJK_DEDUCTIBLE As Boolean, ByVal EXJK_NOTE As String, ByVal EXJK_DETAIL As String, ByVal EXJK_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_JKDMRow
            Dim rowEXPENSES_JKDMRow As EXPENSES_JKDMRow = CType(Me.NewRow,EXPENSES_JKDMRow)
            Dim columnValuesArray() As Object = New Object() {EXJK_KEY, Nothing, EXJK_SOURCENO, EXJK_DESC, EXJK_AMOUNT, EXJK_DEDUCTIBLE, EXJK_NOTE, EXJK_DETAIL, EXJK_DEDUCTIBLE_ADD, RowIndex}
            rowEXPENSES_JKDMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_JKDMRow)
            Return rowEXPENSES_JKDMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXJK_EXJKKEY(ByVal EXJK_EXJKKEY As Integer) As EXPENSES_JKDMRow
            Return CType(Me.Rows.Find(New Object() {EXJK_EXJKKEY}),EXPENSES_JKDMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_JKDMDataTable = CType(MyBase.Clone,EXPENSES_JKDMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_JKDMDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXJK_KEY = MyBase.Columns("EXJK_KEY")
            Me.columnEXJK_EXJKKEY = MyBase.Columns("EXJK_EXJKKEY")
            Me.columnEXJK_SOURCENO = MyBase.Columns("EXJK_SOURCENO")
            Me.columnEXJK_DESC = MyBase.Columns("EXJK_DESC")
            Me.columnEXJK_AMOUNT = MyBase.Columns("EXJK_AMOUNT")
            Me.columnEXJK_DEDUCTIBLE = MyBase.Columns("EXJK_DEDUCTIBLE")
            Me.columnEXJK_NOTE = MyBase.Columns("EXJK_NOTE")
            Me.columnEXJK_DETAIL = MyBase.Columns("EXJK_DETAIL")
            Me.columnEXJK_DEDUCTIBLE_ADD = MyBase.Columns("EXJK_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXJK_KEY = New Global.System.Data.DataColumn("EXJK_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_KEY)
            Me.columnEXJK_EXJKKEY = New Global.System.Data.DataColumn("EXJK_EXJKKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_EXJKKEY)
            Me.columnEXJK_SOURCENO = New Global.System.Data.DataColumn("EXJK_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_SOURCENO)
            Me.columnEXJK_DESC = New Global.System.Data.DataColumn("EXJK_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_DESC)
            Me.columnEXJK_AMOUNT = New Global.System.Data.DataColumn("EXJK_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_AMOUNT)
            Me.columnEXJK_DEDUCTIBLE = New Global.System.Data.DataColumn("EXJK_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_DEDUCTIBLE)
            Me.columnEXJK_NOTE = New Global.System.Data.DataColumn("EXJK_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_NOTE)
            Me.columnEXJK_DETAIL = New Global.System.Data.DataColumn("EXJK_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_DETAIL)
            Me.columnEXJK_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXJK_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJK_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXJK_EXJKKEY}, true))
            Me.columnEXJK_EXJKKEY.AutoIncrement = true
            Me.columnEXJK_EXJKKEY.AllowDBNull = false
            Me.columnEXJK_EXJKKEY.Unique = true
            Me.columnEXJK_DESC.MaxLength = 255
            Me.columnEXJK_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXJK_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXJK_NOTE.MaxLength = 3000
            Me.columnEXJK_DETAIL.MaxLength = 30
            Me.columnEXJK_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_JKDMRow() As EXPENSES_JKDMRow
            Return CType(Me.NewRow,EXPENSES_JKDMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_JKDMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_JKDMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_JKDMRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDMRowChanged(Me, New EXPENSES_JKDMRowChangeEvent(CType(e.Row,EXPENSES_JKDMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_JKDMRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDMRowChanging(Me, New EXPENSES_JKDMRowChangeEvent(CType(e.Row,EXPENSES_JKDMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_JKDMRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDMRowDeleted(Me, New EXPENSES_JKDMRowChangeEvent(CType(e.Row,EXPENSES_JKDMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_JKDMRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDMRowDeleting(Me, New EXPENSES_JKDMRowChangeEvent(CType(e.Row,EXPENSES_JKDMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_JKDMRow(ByVal row As EXPENSES_JKDMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_JKDMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EXPENSES_JKDM_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of EXPENSES_JKDM_DETAILRow)
        
        Private columnEXJKD_KEY As Global.System.Data.DataColumn
        
        Private columnEXJKD_EXJKKEY As Global.System.Data.DataColumn
        
        Private columnEXJKD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXJKD_EXJKDKEY As Global.System.Data.DataColumn
        
        Private columnEXJKD_DESC As Global.System.Data.DataColumn
        
        Private columnEXJKD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXJKD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXJKD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXJKD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EXPENSES_JKDM_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_EXJKKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_EXJKKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_EXJKDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_EXJKDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXJKD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXJKD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EXPENSES_JKDM_DETAILRow
            Get
                Return CType(Me.Rows(index),EXPENSES_JKDM_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDM_DETAILRowChanging As EXPENSES_JKDM_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDM_DETAILRowChanged As EXPENSES_JKDM_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDM_DETAILRowDeleting As EXPENSES_JKDM_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EXPENSES_JKDM_DETAILRowDeleted As EXPENSES_JKDM_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEXPENSES_JKDM_DETAILRow(ByVal row As EXPENSES_JKDM_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEXPENSES_JKDM_DETAILRow(ByVal EXJKD_KEY As Integer, ByVal parentEXPENSES_JKDMRowByFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL As EXPENSES_JKDMRow, ByVal EXJKD_SOURCENO As Integer, ByVal EXJKD_DESC As String, ByVal EXJKD_DEDUCTIBLE As Boolean, ByVal EXJKD_AMOUNT As Decimal, ByVal EXJKD_NOTE As String, ByVal EXJKD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer) As EXPENSES_JKDM_DETAILRow
            Dim rowEXPENSES_JKDM_DETAILRow As EXPENSES_JKDM_DETAILRow = CType(Me.NewRow,EXPENSES_JKDM_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXJKD_KEY, Nothing, EXJKD_SOURCENO, Nothing, EXJKD_DESC, EXJKD_DEDUCTIBLE, EXJKD_AMOUNT, EXJKD_NOTE, EXJKD_DEDUCTIBLE_ADD, RowIndex}
            If (Not (parentEXPENSES_JKDMRowByFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentEXPENSES_JKDMRowByFK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL(1)
            End If
            rowEXPENSES_JKDM_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEXPENSES_JKDM_DETAILRow)
            Return rowEXPENSES_JKDM_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXJKD_EXJKDKEY(ByVal EXJKD_EXJKDKEY As Integer) As EXPENSES_JKDM_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXJKD_EXJKDKEY}),EXPENSES_JKDM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EXPENSES_JKDM_DETAILDataTable = CType(MyBase.Clone,EXPENSES_JKDM_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EXPENSES_JKDM_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXJKD_KEY = MyBase.Columns("EXJKD_KEY")
            Me.columnEXJKD_EXJKKEY = MyBase.Columns("EXJKD_EXJKKEY")
            Me.columnEXJKD_SOURCENO = MyBase.Columns("EXJKD_SOURCENO")
            Me.columnEXJKD_EXJKDKEY = MyBase.Columns("EXJKD_EXJKDKEY")
            Me.columnEXJKD_DESC = MyBase.Columns("EXJKD_DESC")
            Me.columnEXJKD_DEDUCTIBLE = MyBase.Columns("EXJKD_DEDUCTIBLE")
            Me.columnEXJKD_AMOUNT = MyBase.Columns("EXJKD_AMOUNT")
            Me.columnEXJKD_NOTE = MyBase.Columns("EXJKD_NOTE")
            Me.columnEXJKD_DEDUCTIBLE_ADD = MyBase.Columns("EXJKD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXJKD_KEY = New Global.System.Data.DataColumn("EXJKD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_KEY)
            Me.columnEXJKD_EXJKKEY = New Global.System.Data.DataColumn("EXJKD_EXJKKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_EXJKKEY)
            Me.columnEXJKD_SOURCENO = New Global.System.Data.DataColumn("EXJKD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_SOURCENO)
            Me.columnEXJKD_EXJKDKEY = New Global.System.Data.DataColumn("EXJKD_EXJKDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_EXJKDKEY)
            Me.columnEXJKD_DESC = New Global.System.Data.DataColumn("EXJKD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_DESC)
            Me.columnEXJKD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXJKD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_DEDUCTIBLE)
            Me.columnEXJKD_AMOUNT = New Global.System.Data.DataColumn("EXJKD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_AMOUNT)
            Me.columnEXJKD_NOTE = New Global.System.Data.DataColumn("EXJKD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_NOTE)
            Me.columnEXJKD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXJKD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXJKD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXJKD_EXJKDKEY}, true))
            Me.columnEXJKD_EXJKDKEY.AutoIncrement = true
            Me.columnEXJKD_EXJKDKEY.AllowDBNull = false
            Me.columnEXJKD_EXJKDKEY.Unique = true
            Me.columnEXJKD_DESC.MaxLength = 255
            Me.columnEXJKD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXJKD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXJKD_NOTE.MaxLength = 3000
            Me.columnEXJKD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEXPENSES_JKDM_DETAILRow() As EXPENSES_JKDM_DETAILRow
            Return CType(Me.NewRow,EXPENSES_JKDM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EXPENSES_JKDM_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EXPENSES_JKDM_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EXPENSES_JKDM_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDM_DETAILRowChanged(Me, New EXPENSES_JKDM_DETAILRowChangeEvent(CType(e.Row,EXPENSES_JKDM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EXPENSES_JKDM_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDM_DETAILRowChanging(Me, New EXPENSES_JKDM_DETAILRowChangeEvent(CType(e.Row,EXPENSES_JKDM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EXPENSES_JKDM_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDM_DETAILRowDeleted(Me, New EXPENSES_JKDM_DETAILRowChangeEvent(CType(e.Row,EXPENSES_JKDM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EXPENSES_JKDM_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent EXPENSES_JKDM_DETAILRowDeleting(Me, New EXPENSES_JKDM_DETAILRowChangeEvent(CType(e.Row,EXPENSES_JKDM_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEXPENSES_JKDM_DETAILRow(ByVal row As EXPENSES_JKDM_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EXPENSES_JKDM_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXDEPRECIATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXDEPRECIATIONRow)
        
        Private columnEXODEP_KEY As Global.System.Data.DataColumn
        
        Private columnEXODEP_EXODEPKEY As Global.System.Data.DataColumn
        
        Private columnEXODEP_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXODEP_DESC As Global.System.Data.DataColumn
        
        Private columnEXODEP_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXODEP_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXODEP_NOTE As Global.System.Data.DataColumn
        
        Private columnEXODEP_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXODEP_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXDEPRECIATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_EXODEPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_EXODEPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEP_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEP_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXDEPRECIATIONRow
            Get
                Return CType(Me.Rows(index),OTHER_EXDEPRECIATIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATIONRowChanging As OTHER_EXDEPRECIATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATIONRowChanged As OTHER_EXDEPRECIATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATIONRowDeleting As OTHER_EXDEPRECIATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATIONRowDeleted As OTHER_EXDEPRECIATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXDEPRECIATIONRow(ByVal row As OTHER_EXDEPRECIATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXDEPRECIATIONRow(ByVal EXODEP_KEY As Integer, ByVal EXODEP_SOURCENO As Integer, ByVal EXODEP_DESC As String, ByVal EXODEP_AMOUNT As Decimal, ByVal EXODEP_DEDUCTIBLE As Boolean, ByVal EXODEP_NOTE As String, ByVal EXODEP_DETAIL As String, ByVal EXODEP_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Long) As OTHER_EXDEPRECIATIONRow
            Dim rowOTHER_EXDEPRECIATIONRow As OTHER_EXDEPRECIATIONRow = CType(Me.NewRow,OTHER_EXDEPRECIATIONRow)
            Dim columnValuesArray() As Object = New Object() {EXODEP_KEY, Nothing, EXODEP_SOURCENO, EXODEP_DESC, EXODEP_AMOUNT, EXODEP_DEDUCTIBLE, EXODEP_NOTE, EXODEP_DETAIL, EXODEP_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXDEPRECIATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXDEPRECIATIONRow)
            Return rowOTHER_EXDEPRECIATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXODEP_EXODEPKEY(ByVal EXODEP_EXODEPKEY As Integer) As OTHER_EXDEPRECIATIONRow
            Return CType(Me.Rows.Find(New Object() {EXODEP_EXODEPKEY}),OTHER_EXDEPRECIATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXDEPRECIATIONDataTable = CType(MyBase.Clone,OTHER_EXDEPRECIATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXDEPRECIATIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXODEP_KEY = MyBase.Columns("EXODEP_KEY")
            Me.columnEXODEP_EXODEPKEY = MyBase.Columns("EXODEP_EXODEPKEY")
            Me.columnEXODEP_SOURCENO = MyBase.Columns("EXODEP_SOURCENO")
            Me.columnEXODEP_DESC = MyBase.Columns("EXODEP_DESC")
            Me.columnEXODEP_AMOUNT = MyBase.Columns("EXODEP_AMOUNT")
            Me.columnEXODEP_DEDUCTIBLE = MyBase.Columns("EXODEP_DEDUCTIBLE")
            Me.columnEXODEP_NOTE = MyBase.Columns("EXODEP_NOTE")
            Me.columnEXODEP_DETAIL = MyBase.Columns("EXODEP_DETAIL")
            Me.columnEXODEP_DEDUCTIBLE_ADD = MyBase.Columns("EXODEP_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXODEP_KEY = New Global.System.Data.DataColumn("EXODEP_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_KEY)
            Me.columnEXODEP_EXODEPKEY = New Global.System.Data.DataColumn("EXODEP_EXODEPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_EXODEPKEY)
            Me.columnEXODEP_SOURCENO = New Global.System.Data.DataColumn("EXODEP_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_SOURCENO)
            Me.columnEXODEP_DESC = New Global.System.Data.DataColumn("EXODEP_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_DESC)
            Me.columnEXODEP_AMOUNT = New Global.System.Data.DataColumn("EXODEP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_AMOUNT)
            Me.columnEXODEP_DEDUCTIBLE = New Global.System.Data.DataColumn("EXODEP_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_DEDUCTIBLE)
            Me.columnEXODEP_NOTE = New Global.System.Data.DataColumn("EXODEP_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_NOTE)
            Me.columnEXODEP_DETAIL = New Global.System.Data.DataColumn("EXODEP_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_DETAIL)
            Me.columnEXODEP_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXODEP_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEP_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXODEP_EXODEPKEY}, true))
            Me.columnEXODEP_EXODEPKEY.AutoIncrement = true
            Me.columnEXODEP_EXODEPKEY.AllowDBNull = false
            Me.columnEXODEP_EXODEPKEY.Unique = true
            Me.columnEXODEP_DESC.MaxLength = 255
            Me.columnEXODEP_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXODEP_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXODEP_NOTE.MaxLength = 3000
            Me.columnEXODEP_DETAIL.MaxLength = 30
            Me.columnEXODEP_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXDEPRECIATIONRow() As OTHER_EXDEPRECIATIONRow
            Return CType(Me.NewRow,OTHER_EXDEPRECIATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXDEPRECIATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXDEPRECIATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXDEPRECIATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATIONRowChanged(Me, New OTHER_EXDEPRECIATIONRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXDEPRECIATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATIONRowChanging(Me, New OTHER_EXDEPRECIATIONRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXDEPRECIATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATIONRowDeleted(Me, New OTHER_EXDEPRECIATIONRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXDEPRECIATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATIONRowDeleting(Me, New OTHER_EXDEPRECIATIONRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXDEPRECIATIONRow(ByVal row As OTHER_EXDEPRECIATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXDEPRECIATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXDEPRECIATION_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXDEPRECIATION_DETAILRow)
        
        Private columnEXODEPD_KEY As Global.System.Data.DataColumn
        
        Private columnEXODEPD_EXODEPKEY As Global.System.Data.DataColumn
        
        Private columnEXODEPD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXODEPD_EXODEPDKEY As Global.System.Data.DataColumn
        
        Private columnEXODEPD_DESC As Global.System.Data.DataColumn
        
        Private columnEXODEPD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXODEPD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXODEPD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXODEPD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXDEPRECIATION_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_EXODEPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_EXODEPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_EXODEPDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_EXODEPDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXODEPD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXODEPD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXDEPRECIATION_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXDEPRECIATION_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATION_DETAILRowChanging As OTHER_EXDEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATION_DETAILRowChanged As OTHER_EXDEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATION_DETAILRowDeleting As OTHER_EXDEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXDEPRECIATION_DETAILRowDeleted As OTHER_EXDEPRECIATION_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXDEPRECIATION_DETAILRow(ByVal row As OTHER_EXDEPRECIATION_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXDEPRECIATION_DETAILRow(ByVal EXODEPD_KEY As Integer, ByVal parentOTHER_EXDEPRECIATIONRowByFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL As OTHER_EXDEPRECIATIONRow, ByVal EXODEPD_SOURCENO As Integer, ByVal EXODEPD_DESC As String, ByVal EXODEPD_DEDUCTIBLE As Boolean, ByVal EXODEPD_AMOUNT As Decimal, ByVal EXODEPD_NOTE As String, ByVal EXODEPD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Long) As OTHER_EXDEPRECIATION_DETAILRow
            Dim rowOTHER_EXDEPRECIATION_DETAILRow As OTHER_EXDEPRECIATION_DETAILRow = CType(Me.NewRow,OTHER_EXDEPRECIATION_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXODEPD_KEY, Nothing, EXODEPD_SOURCENO, Nothing, EXODEPD_DESC, EXODEPD_DEDUCTIBLE, EXODEPD_AMOUNT, EXODEPD_NOTE, EXODEPD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXDEPRECIATIONRowByFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXDEPRECIATIONRowByFK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL(1)
            End If
            rowOTHER_EXDEPRECIATION_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXDEPRECIATION_DETAILRow)
            Return rowOTHER_EXDEPRECIATION_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXODEPD_EXODEPDKEY(ByVal EXODEPD_EXODEPDKEY As Integer) As OTHER_EXDEPRECIATION_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXODEPD_EXODEPDKEY}),OTHER_EXDEPRECIATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXDEPRECIATION_DETAILDataTable = CType(MyBase.Clone,OTHER_EXDEPRECIATION_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXDEPRECIATION_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXODEPD_KEY = MyBase.Columns("EXODEPD_KEY")
            Me.columnEXODEPD_EXODEPKEY = MyBase.Columns("EXODEPD_EXODEPKEY")
            Me.columnEXODEPD_SOURCENO = MyBase.Columns("EXODEPD_SOURCENO")
            Me.columnEXODEPD_EXODEPDKEY = MyBase.Columns("EXODEPD_EXODEPDKEY")
            Me.columnEXODEPD_DESC = MyBase.Columns("EXODEPD_DESC")
            Me.columnEXODEPD_DEDUCTIBLE = MyBase.Columns("EXODEPD_DEDUCTIBLE")
            Me.columnEXODEPD_AMOUNT = MyBase.Columns("EXODEPD_AMOUNT")
            Me.columnEXODEPD_NOTE = MyBase.Columns("EXODEPD_NOTE")
            Me.columnEXODEPD_DEDUCTIBLE_ADD = MyBase.Columns("EXODEPD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXODEPD_KEY = New Global.System.Data.DataColumn("EXODEPD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_KEY)
            Me.columnEXODEPD_EXODEPKEY = New Global.System.Data.DataColumn("EXODEPD_EXODEPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_EXODEPKEY)
            Me.columnEXODEPD_SOURCENO = New Global.System.Data.DataColumn("EXODEPD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_SOURCENO)
            Me.columnEXODEPD_EXODEPDKEY = New Global.System.Data.DataColumn("EXODEPD_EXODEPDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_EXODEPDKEY)
            Me.columnEXODEPD_DESC = New Global.System.Data.DataColumn("EXODEPD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_DESC)
            Me.columnEXODEPD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXODEPD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_DEDUCTIBLE)
            Me.columnEXODEPD_AMOUNT = New Global.System.Data.DataColumn("EXODEPD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_AMOUNT)
            Me.columnEXODEPD_NOTE = New Global.System.Data.DataColumn("EXODEPD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_NOTE)
            Me.columnEXODEPD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXODEPD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXODEPD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXODEPD_EXODEPDKEY}, true))
            Me.columnEXODEPD_EXODEPDKEY.AutoIncrement = true
            Me.columnEXODEPD_EXODEPDKEY.AllowDBNull = false
            Me.columnEXODEPD_EXODEPDKEY.Unique = true
            Me.columnEXODEPD_DESC.MaxLength = 255
            Me.columnEXODEPD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXODEPD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXODEPD_NOTE.MaxLength = 3000
            Me.columnEXODEPD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXDEPRECIATION_DETAILRow() As OTHER_EXDEPRECIATION_DETAILRow
            Return CType(Me.NewRow,OTHER_EXDEPRECIATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXDEPRECIATION_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXDEPRECIATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXDEPRECIATION_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATION_DETAILRowChanged(Me, New OTHER_EXDEPRECIATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXDEPRECIATION_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATION_DETAILRowChanging(Me, New OTHER_EXDEPRECIATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXDEPRECIATION_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATION_DETAILRowDeleted(Me, New OTHER_EXDEPRECIATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXDEPRECIATION_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXDEPRECIATION_DETAILRowDeleting(Me, New OTHER_EXDEPRECIATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXDEPRECIATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXDEPRECIATION_DETAILRow(ByVal row As OTHER_EXDEPRECIATION_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXDEPRECIATION_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXAPPRDONATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXAPPRDONATIONRow)
        
        Private columnEXOAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOAD_EXOADKEY As Global.System.Data.DataColumn
        
        Private columnEXOAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOAD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOAD_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOAD_TYPE As Global.System.Data.DataColumn
        
        Private columnEXOAD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXAPPRDONATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_EXOADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_EXOADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOAD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOAD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXAPPRDONATIONRow
            Get
                Return CType(Me.Rows(index),OTHER_EXAPPRDONATIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATIONRowChanging As OTHER_EXAPPRDONATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATIONRowChanged As OTHER_EXAPPRDONATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATIONRowDeleting As OTHER_EXAPPRDONATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATIONRowDeleted As OTHER_EXAPPRDONATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXAPPRDONATIONRow(ByVal row As OTHER_EXAPPRDONATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXAPPRDONATIONRow(ByVal EXOAD_KEY As Integer, ByVal EXOAD_SOURCENO As Integer, ByVal EXOAD_DESC As String, ByVal EXOAD_AMOUNT As Decimal, ByVal EXOAD_DEDUCTIBLE As Boolean, ByVal EXOAD_NOTE As String, ByVal EXOAD_DETAIL As String, ByVal EXOAD_TYPE As String, ByVal EXOAD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXAPPRDONATIONRow
            Dim rowOTHER_EXAPPRDONATIONRow As OTHER_EXAPPRDONATIONRow = CType(Me.NewRow,OTHER_EXAPPRDONATIONRow)
            Dim columnValuesArray() As Object = New Object() {EXOAD_KEY, Nothing, EXOAD_SOURCENO, EXOAD_DESC, EXOAD_AMOUNT, EXOAD_DEDUCTIBLE, EXOAD_NOTE, EXOAD_DETAIL, EXOAD_TYPE, EXOAD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXAPPRDONATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXAPPRDONATIONRow)
            Return rowOTHER_EXAPPRDONATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOAD_EXOADKEY(ByVal EXOAD_EXOADKEY As Integer) As OTHER_EXAPPRDONATIONRow
            Return CType(Me.Rows.Find(New Object() {EXOAD_EXOADKEY}),OTHER_EXAPPRDONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXAPPRDONATIONDataTable = CType(MyBase.Clone,OTHER_EXAPPRDONATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXAPPRDONATIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOAD_KEY = MyBase.Columns("EXOAD_KEY")
            Me.columnEXOAD_EXOADKEY = MyBase.Columns("EXOAD_EXOADKEY")
            Me.columnEXOAD_SOURCENO = MyBase.Columns("EXOAD_SOURCENO")
            Me.columnEXOAD_DESC = MyBase.Columns("EXOAD_DESC")
            Me.columnEXOAD_AMOUNT = MyBase.Columns("EXOAD_AMOUNT")
            Me.columnEXOAD_DEDUCTIBLE = MyBase.Columns("EXOAD_DEDUCTIBLE")
            Me.columnEXOAD_NOTE = MyBase.Columns("EXOAD_NOTE")
            Me.columnEXOAD_DETAIL = MyBase.Columns("EXOAD_DETAIL")
            Me.columnEXOAD_TYPE = MyBase.Columns("EXOAD_TYPE")
            Me.columnEXOAD_DEDUCTIBLE_ADD = MyBase.Columns("EXOAD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOAD_KEY = New Global.System.Data.DataColumn("EXOAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_KEY)
            Me.columnEXOAD_EXOADKEY = New Global.System.Data.DataColumn("EXOAD_EXOADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_EXOADKEY)
            Me.columnEXOAD_SOURCENO = New Global.System.Data.DataColumn("EXOAD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_SOURCENO)
            Me.columnEXOAD_DESC = New Global.System.Data.DataColumn("EXOAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_DESC)
            Me.columnEXOAD_AMOUNT = New Global.System.Data.DataColumn("EXOAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_AMOUNT)
            Me.columnEXOAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_DEDUCTIBLE)
            Me.columnEXOAD_NOTE = New Global.System.Data.DataColumn("EXOAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_NOTE)
            Me.columnEXOAD_DETAIL = New Global.System.Data.DataColumn("EXOAD_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_DETAIL)
            Me.columnEXOAD_TYPE = New Global.System.Data.DataColumn("EXOAD_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_TYPE)
            Me.columnEXOAD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOAD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOAD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOAD_EXOADKEY}, true))
            Me.columnEXOAD_EXOADKEY.AutoIncrement = true
            Me.columnEXOAD_EXOADKEY.AllowDBNull = false
            Me.columnEXOAD_EXOADKEY.Unique = true
            Me.columnEXOAD_DESC.MaxLength = 255
            Me.columnEXOAD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOAD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOAD_NOTE.MaxLength = 3000
            Me.columnEXOAD_DETAIL.MaxLength = 30
            Me.columnEXOAD_TYPE.MaxLength = 255
            Me.columnEXOAD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXAPPRDONATIONRow() As OTHER_EXAPPRDONATIONRow
            Return CType(Me.NewRow,OTHER_EXAPPRDONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXAPPRDONATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXAPPRDONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXAPPRDONATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATIONRowChanged(Me, New OTHER_EXAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXAPPRDONATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATIONRowChanging(Me, New OTHER_EXAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXAPPRDONATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATIONRowDeleted(Me, New OTHER_EXAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXAPPRDONATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATIONRowDeleting(Me, New OTHER_EXAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXAPPRDONATIONRow(ByVal row As OTHER_EXAPPRDONATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXAPPRDONATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXAPPRDONATION_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXAPPRDONATION_DETAILRow)
        
        Private columnEXOADD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOADD_EXOADKEY As Global.System.Data.DataColumn
        
        Private columnEXOADD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOADD_EXOADDKEY As Global.System.Data.DataColumn
        
        Private columnEXOADD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOADD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOADD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOADD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOADD_TYPE As Global.System.Data.DataColumn
        
        Private columnEXOADD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXAPPRDONATION_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_EXOADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_EXOADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_EXOADDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_EXOADDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOADD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOADD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXAPPRDONATION_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXAPPRDONATION_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATION_DETAILRowChanging As OTHER_EXAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATION_DETAILRowChanged As OTHER_EXAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATION_DETAILRowDeleting As OTHER_EXAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXAPPRDONATION_DETAILRowDeleted As OTHER_EXAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXAPPRDONATION_DETAILRow(ByVal row As OTHER_EXAPPRDONATION_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXAPPRDONATION_DETAILRow(ByVal EXOADD_KEY As Integer, ByVal parentOTHER_EXAPPRDONATIONRowByFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL As OTHER_EXAPPRDONATIONRow, ByVal EXOADD_SOURCENO As Integer, ByVal EXOADD_DESC As String, ByVal EXOADD_DEDUCTIBLE As Boolean, ByVal EXOADD_AMOUNT As Decimal, ByVal EXOADD_NOTE As String, ByVal EXOADD_TYPE As String, ByVal EXOADD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXAPPRDONATION_DETAILRow
            Dim rowOTHER_EXAPPRDONATION_DETAILRow As OTHER_EXAPPRDONATION_DETAILRow = CType(Me.NewRow,OTHER_EXAPPRDONATION_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOADD_KEY, Nothing, EXOADD_SOURCENO, Nothing, EXOADD_DESC, EXOADD_DEDUCTIBLE, EXOADD_AMOUNT, EXOADD_NOTE, EXOADD_TYPE, EXOADD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXAPPRDONATIONRowByFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXAPPRDONATIONRowByFK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL(1)
            End If
            rowOTHER_EXAPPRDONATION_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXAPPRDONATION_DETAILRow)
            Return rowOTHER_EXAPPRDONATION_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOADD_EXOADDKEY(ByVal EXOADD_EXOADDKEY As Integer) As OTHER_EXAPPRDONATION_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOADD_EXOADDKEY}),OTHER_EXAPPRDONATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXAPPRDONATION_DETAILDataTable = CType(MyBase.Clone,OTHER_EXAPPRDONATION_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXAPPRDONATION_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOADD_KEY = MyBase.Columns("EXOADD_KEY")
            Me.columnEXOADD_EXOADKEY = MyBase.Columns("EXOADD_EXOADKEY")
            Me.columnEXOADD_SOURCENO = MyBase.Columns("EXOADD_SOURCENO")
            Me.columnEXOADD_EXOADDKEY = MyBase.Columns("EXOADD_EXOADDKEY")
            Me.columnEXOADD_DESC = MyBase.Columns("EXOADD_DESC")
            Me.columnEXOADD_DEDUCTIBLE = MyBase.Columns("EXOADD_DEDUCTIBLE")
            Me.columnEXOADD_AMOUNT = MyBase.Columns("EXOADD_AMOUNT")
            Me.columnEXOADD_NOTE = MyBase.Columns("EXOADD_NOTE")
            Me.columnEXOADD_TYPE = MyBase.Columns("EXOADD_TYPE")
            Me.columnEXOADD_DEDUCTIBLE_ADD = MyBase.Columns("EXOADD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOADD_KEY = New Global.System.Data.DataColumn("EXOADD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_KEY)
            Me.columnEXOADD_EXOADKEY = New Global.System.Data.DataColumn("EXOADD_EXOADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_EXOADKEY)
            Me.columnEXOADD_SOURCENO = New Global.System.Data.DataColumn("EXOADD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_SOURCENO)
            Me.columnEXOADD_EXOADDKEY = New Global.System.Data.DataColumn("EXOADD_EXOADDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_EXOADDKEY)
            Me.columnEXOADD_DESC = New Global.System.Data.DataColumn("EXOADD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_DESC)
            Me.columnEXOADD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOADD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_DEDUCTIBLE)
            Me.columnEXOADD_AMOUNT = New Global.System.Data.DataColumn("EXOADD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_AMOUNT)
            Me.columnEXOADD_NOTE = New Global.System.Data.DataColumn("EXOADD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_NOTE)
            Me.columnEXOADD_TYPE = New Global.System.Data.DataColumn("EXOADD_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_TYPE)
            Me.columnEXOADD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOADD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOADD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOADD_EXOADDKEY}, true))
            Me.columnEXOADD_EXOADDKEY.AutoIncrement = true
            Me.columnEXOADD_EXOADDKEY.AllowDBNull = false
            Me.columnEXOADD_EXOADDKEY.Unique = true
            Me.columnEXOADD_DESC.MaxLength = 255
            Me.columnEXOADD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOADD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOADD_NOTE.MaxLength = 3000
            Me.columnEXOADD_TYPE.MaxLength = 255
            Me.columnEXOADD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXAPPRDONATION_DETAILRow() As OTHER_EXAPPRDONATION_DETAILRow
            Return CType(Me.NewRow,OTHER_EXAPPRDONATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXAPPRDONATION_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXAPPRDONATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXAPPRDONATION_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATION_DETAILRowChanged(Me, New OTHER_EXAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXAPPRDONATION_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATION_DETAILRowChanging(Me, New OTHER_EXAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXAPPRDONATION_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATION_DETAILRowDeleted(Me, New OTHER_EXAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXAPPRDONATION_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXAPPRDONATION_DETAILRowDeleting(Me, New OTHER_EXAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXAPPRDONATION_DETAILRow(ByVal row As OTHER_EXAPPRDONATION_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXAPPRDONATION_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXNAPPRDONATIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXNAPPRDONATIONRow)
        
        Private columnEXONAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXONAD_EXONADKEY As Global.System.Data.DataColumn
        
        Private columnEXONAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXONAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXONAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXONAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXONAD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXONAD_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXONAD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXNAPPRDONATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_EXONADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_EXONADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONAD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONAD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXNAPPRDONATIONRow
            Get
                Return CType(Me.Rows(index),OTHER_EXNAPPRDONATIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATIONRowChanging As OTHER_EXNAPPRDONATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATIONRowChanged As OTHER_EXNAPPRDONATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATIONRowDeleting As OTHER_EXNAPPRDONATIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATIONRowDeleted As OTHER_EXNAPPRDONATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXNAPPRDONATIONRow(ByVal row As OTHER_EXNAPPRDONATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXNAPPRDONATIONRow(ByVal EXONAD_KEY As Integer, ByVal EXONAD_SOURCENO As Integer, ByVal EXONAD_DESC As String, ByVal EXONAD_AMOUNT As Decimal, ByVal EXONAD_DEDUCTIBLE As Boolean, ByVal EXONAD_NOTE As String, ByVal EXONAD_DETAIL As String, ByVal EXONAD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXNAPPRDONATIONRow
            Dim rowOTHER_EXNAPPRDONATIONRow As OTHER_EXNAPPRDONATIONRow = CType(Me.NewRow,OTHER_EXNAPPRDONATIONRow)
            Dim columnValuesArray() As Object = New Object() {EXONAD_KEY, Nothing, EXONAD_SOURCENO, EXONAD_DESC, EXONAD_AMOUNT, EXONAD_DEDUCTIBLE, EXONAD_NOTE, EXONAD_DETAIL, EXONAD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXNAPPRDONATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXNAPPRDONATIONRow)
            Return rowOTHER_EXNAPPRDONATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXNAPPRDONATIONDataTable = CType(MyBase.Clone,OTHER_EXNAPPRDONATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXNAPPRDONATIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXONAD_KEY = MyBase.Columns("EXONAD_KEY")
            Me.columnEXONAD_EXONADKEY = MyBase.Columns("EXONAD_EXONADKEY")
            Me.columnEXONAD_SOURCENO = MyBase.Columns("EXONAD_SOURCENO")
            Me.columnEXONAD_DESC = MyBase.Columns("EXONAD_DESC")
            Me.columnEXONAD_AMOUNT = MyBase.Columns("EXONAD_AMOUNT")
            Me.columnEXONAD_DEDUCTIBLE = MyBase.Columns("EXONAD_DEDUCTIBLE")
            Me.columnEXONAD_NOTE = MyBase.Columns("EXONAD_NOTE")
            Me.columnEXONAD_DETAIL = MyBase.Columns("EXONAD_DETAIL")
            Me.columnEXONAD_DEDUCTIBLE_ADD = MyBase.Columns("EXONAD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXONAD_KEY = New Global.System.Data.DataColumn("EXONAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_KEY)
            Me.columnEXONAD_EXONADKEY = New Global.System.Data.DataColumn("EXONAD_EXONADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_EXONADKEY)
            Me.columnEXONAD_SOURCENO = New Global.System.Data.DataColumn("EXONAD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_SOURCENO)
            Me.columnEXONAD_DESC = New Global.System.Data.DataColumn("EXONAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_DESC)
            Me.columnEXONAD_AMOUNT = New Global.System.Data.DataColumn("EXONAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_AMOUNT)
            Me.columnEXONAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXONAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_DEDUCTIBLE)
            Me.columnEXONAD_NOTE = New Global.System.Data.DataColumn("EXONAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_NOTE)
            Me.columnEXONAD_DETAIL = New Global.System.Data.DataColumn("EXONAD_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_DETAIL)
            Me.columnEXONAD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXONAD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONAD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXONAD_EXONADKEY}, false))
            Me.columnEXONAD_EXONADKEY.AutoIncrement = true
            Me.columnEXONAD_EXONADKEY.Unique = true
            Me.columnEXONAD_DESC.MaxLength = 255
            Me.columnEXONAD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXONAD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXONAD_NOTE.MaxLength = 3000
            Me.columnEXONAD_DETAIL.MaxLength = 30
            Me.columnEXONAD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXNAPPRDONATIONRow() As OTHER_EXNAPPRDONATIONRow
            Return CType(Me.NewRow,OTHER_EXNAPPRDONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXNAPPRDONATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXNAPPRDONATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXNAPPRDONATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATIONRowChanged(Me, New OTHER_EXNAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXNAPPRDONATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATIONRowChanging(Me, New OTHER_EXNAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXNAPPRDONATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATIONRowDeleted(Me, New OTHER_EXNAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXNAPPRDONATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATIONRowDeleting(Me, New OTHER_EXNAPPRDONATIONRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXNAPPRDONATIONRow(ByVal row As OTHER_EXNAPPRDONATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXNAPPRDONATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXNAPPRDONATION_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXNAPPRDONATION_DETAILRow)
        
        Private columnEXONADD_KEY As Global.System.Data.DataColumn
        
        Private columnEXONADD_EXONADKEY As Global.System.Data.DataColumn
        
        Private columnEXONADD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXONADD_EXONADDKEY As Global.System.Data.DataColumn
        
        Private columnEXONADD_DESC As Global.System.Data.DataColumn
        
        Private columnEXONADD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXONADD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXONADD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXONADD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXNAPPRDONATION_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_EXONADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_EXONADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_EXONADDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_EXONADDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXONADD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXONADD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXNAPPRDONATION_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXNAPPRDONATION_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATION_DETAILRowChanging As OTHER_EXNAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATION_DETAILRowChanged As OTHER_EXNAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATION_DETAILRowDeleting As OTHER_EXNAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXNAPPRDONATION_DETAILRowDeleted As OTHER_EXNAPPRDONATION_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXNAPPRDONATION_DETAILRow(ByVal row As OTHER_EXNAPPRDONATION_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXNAPPRDONATION_DETAILRow(ByVal EXONADD_KEY As Integer, ByVal EXONADD_SOURCENO As Integer, ByVal EXONADD_EXONADDKEY As Integer, ByVal EXONADD_DESC As String, ByVal EXONADD_DEDUCTIBLE As Boolean, ByVal EXONADD_AMOUNT As Decimal, ByVal EXONADD_NOTE As String, ByVal EXONADD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXNAPPRDONATION_DETAILRow
            Dim rowOTHER_EXNAPPRDONATION_DETAILRow As OTHER_EXNAPPRDONATION_DETAILRow = CType(Me.NewRow,OTHER_EXNAPPRDONATION_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXONADD_KEY, Nothing, EXONADD_SOURCENO, EXONADD_EXONADDKEY, EXONADD_DESC, EXONADD_DEDUCTIBLE, EXONADD_AMOUNT, EXONADD_NOTE, EXONADD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXNAPPRDONATION_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXNAPPRDONATION_DETAILRow)
            Return rowOTHER_EXNAPPRDONATION_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXNAPPRDONATION_DETAILDataTable = CType(MyBase.Clone,OTHER_EXNAPPRDONATION_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXNAPPRDONATION_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXONADD_KEY = MyBase.Columns("EXONADD_KEY")
            Me.columnEXONADD_EXONADKEY = MyBase.Columns("EXONADD_EXONADKEY")
            Me.columnEXONADD_SOURCENO = MyBase.Columns("EXONADD_SOURCENO")
            Me.columnEXONADD_EXONADDKEY = MyBase.Columns("EXONADD_EXONADDKEY")
            Me.columnEXONADD_DESC = MyBase.Columns("EXONADD_DESC")
            Me.columnEXONADD_DEDUCTIBLE = MyBase.Columns("EXONADD_DEDUCTIBLE")
            Me.columnEXONADD_AMOUNT = MyBase.Columns("EXONADD_AMOUNT")
            Me.columnEXONADD_NOTE = MyBase.Columns("EXONADD_NOTE")
            Me.columnEXONADD_DEDUCTIBLE_ADD = MyBase.Columns("EXONADD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXONADD_KEY = New Global.System.Data.DataColumn("EXONADD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_KEY)
            Me.columnEXONADD_EXONADKEY = New Global.System.Data.DataColumn("EXONADD_EXONADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_EXONADKEY)
            Me.columnEXONADD_SOURCENO = New Global.System.Data.DataColumn("EXONADD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_SOURCENO)
            Me.columnEXONADD_EXONADDKEY = New Global.System.Data.DataColumn("EXONADD_EXONADDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_EXONADDKEY)
            Me.columnEXONADD_DESC = New Global.System.Data.DataColumn("EXONADD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_DESC)
            Me.columnEXONADD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXONADD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_DEDUCTIBLE)
            Me.columnEXONADD_AMOUNT = New Global.System.Data.DataColumn("EXONADD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_AMOUNT)
            Me.columnEXONADD_NOTE = New Global.System.Data.DataColumn("EXONADD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_NOTE)
            Me.columnEXONADD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXONADD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXONADD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.columnEXONADD_EXONADKEY.AutoIncrement = true
            Me.columnEXONADD_DESC.MaxLength = 255
            Me.columnEXONADD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXONADD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXONADD_NOTE.MaxLength = 3000
            Me.columnEXONADD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXNAPPRDONATION_DETAILRow() As OTHER_EXNAPPRDONATION_DETAILRow
            Return CType(Me.NewRow,OTHER_EXNAPPRDONATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXNAPPRDONATION_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXNAPPRDONATION_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXNAPPRDONATION_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATION_DETAILRowChanged(Me, New OTHER_EXNAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXNAPPRDONATION_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATION_DETAILRowChanging(Me, New OTHER_EXNAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXNAPPRDONATION_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATION_DETAILRowDeleted(Me, New OTHER_EXNAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXNAPPRDONATION_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXNAPPRDONATION_DETAILRowDeleting(Me, New OTHER_EXNAPPRDONATION_DETAILRowChangeEvent(CType(e.Row,OTHER_EXNAPPRDONATION_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXNAPPRDONATION_DETAILRow(ByVal row As OTHER_EXNAPPRDONATION_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXNAPPRDONATION_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXZAKATDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXZAKATRow)
        
        Private columnEXOZ_KEY As Global.System.Data.DataColumn
        
        Private columnEXOZ_EXOZKEY As Global.System.Data.DataColumn
        
        Private columnEXOZ_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOZ_DESC As Global.System.Data.DataColumn
        
        Private columnEXOZ_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOZ_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOZ_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOZ_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOZ_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXZAKAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_EXOZKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_EXOZKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZ_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZ_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXZAKATRow
            Get
                Return CType(Me.Rows(index),OTHER_EXZAKATRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKATRowChanging As OTHER_EXZAKATRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKATRowChanged As OTHER_EXZAKATRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKATRowDeleting As OTHER_EXZAKATRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKATRowDeleted As OTHER_EXZAKATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXZAKATRow(ByVal row As OTHER_EXZAKATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXZAKATRow(ByVal EXOZ_KEY As Integer, ByVal EXOZ_SOURCENO As Integer, ByVal EXOZ_DESC As String, ByVal EXOZ_AMOUNT As Decimal, ByVal EXOZ_DEDUCTIBLE As Boolean, ByVal EXOZ_NOTE As String, ByVal EXOZ_DETAIL As String, ByVal EXOZ_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXZAKATRow
            Dim rowOTHER_EXZAKATRow As OTHER_EXZAKATRow = CType(Me.NewRow,OTHER_EXZAKATRow)
            Dim columnValuesArray() As Object = New Object() {EXOZ_KEY, Nothing, EXOZ_SOURCENO, EXOZ_DESC, EXOZ_AMOUNT, EXOZ_DEDUCTIBLE, EXOZ_NOTE, EXOZ_DETAIL, EXOZ_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXZAKATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXZAKATRow)
            Return rowOTHER_EXZAKATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOZ_EXOZKEY(ByVal EXOZ_EXOZKEY As Integer) As OTHER_EXZAKATRow
            Return CType(Me.Rows.Find(New Object() {EXOZ_EXOZKEY}),OTHER_EXZAKATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXZAKATDataTable = CType(MyBase.Clone,OTHER_EXZAKATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXZAKATDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOZ_KEY = MyBase.Columns("EXOZ_KEY")
            Me.columnEXOZ_EXOZKEY = MyBase.Columns("EXOZ_EXOZKEY")
            Me.columnEXOZ_SOURCENO = MyBase.Columns("EXOZ_SOURCENO")
            Me.columnEXOZ_DESC = MyBase.Columns("EXOZ_DESC")
            Me.columnEXOZ_AMOUNT = MyBase.Columns("EXOZ_AMOUNT")
            Me.columnEXOZ_DEDUCTIBLE = MyBase.Columns("EXOZ_DEDUCTIBLE")
            Me.columnEXOZ_NOTE = MyBase.Columns("EXOZ_NOTE")
            Me.columnEXOZ_DETAIL = MyBase.Columns("EXOZ_DETAIL")
            Me.columnEXOZ_DEDUCTIBLE_ADD = MyBase.Columns("EXOZ_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOZ_KEY = New Global.System.Data.DataColumn("EXOZ_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_KEY)
            Me.columnEXOZ_EXOZKEY = New Global.System.Data.DataColumn("EXOZ_EXOZKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_EXOZKEY)
            Me.columnEXOZ_SOURCENO = New Global.System.Data.DataColumn("EXOZ_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_SOURCENO)
            Me.columnEXOZ_DESC = New Global.System.Data.DataColumn("EXOZ_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_DESC)
            Me.columnEXOZ_AMOUNT = New Global.System.Data.DataColumn("EXOZ_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_AMOUNT)
            Me.columnEXOZ_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOZ_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_DEDUCTIBLE)
            Me.columnEXOZ_NOTE = New Global.System.Data.DataColumn("EXOZ_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_NOTE)
            Me.columnEXOZ_DETAIL = New Global.System.Data.DataColumn("EXOZ_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_DETAIL)
            Me.columnEXOZ_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOZ_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZ_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOZ_EXOZKEY}, true))
            Me.columnEXOZ_EXOZKEY.AutoIncrement = true
            Me.columnEXOZ_EXOZKEY.AllowDBNull = false
            Me.columnEXOZ_EXOZKEY.Unique = true
            Me.columnEXOZ_DESC.MaxLength = 255
            Me.columnEXOZ_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOZ_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOZ_NOTE.MaxLength = 3000
            Me.columnEXOZ_DETAIL.MaxLength = 30
            Me.columnEXOZ_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXZAKATRow() As OTHER_EXZAKATRow
            Return CType(Me.NewRow,OTHER_EXZAKATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXZAKATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXZAKATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXZAKATRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKATRowChanged(Me, New OTHER_EXZAKATRowChangeEvent(CType(e.Row,OTHER_EXZAKATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXZAKATRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKATRowChanging(Me, New OTHER_EXZAKATRowChangeEvent(CType(e.Row,OTHER_EXZAKATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXZAKATRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKATRowDeleted(Me, New OTHER_EXZAKATRowChangeEvent(CType(e.Row,OTHER_EXZAKATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXZAKATRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKATRowDeleting(Me, New OTHER_EXZAKATRowChangeEvent(CType(e.Row,OTHER_EXZAKATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXZAKATRow(ByVal row As OTHER_EXZAKATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXZAKATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXZAKAT_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXZAKAT_DETAILRow)
        
        Private columnEXOZD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOZD_EXOZKEY As Global.System.Data.DataColumn
        
        Private columnEXOZD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOZD_EXOZDKEY As Global.System.Data.DataColumn
        
        Private columnEXOZD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOZD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOZD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOZD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOZD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXZAKAT_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_EXOZKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_EXOZKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_EXOZDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_EXOZDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOZD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOZD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXZAKAT_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXZAKAT_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKAT_DETAILRowChanging As OTHER_EXZAKAT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKAT_DETAILRowChanged As OTHER_EXZAKAT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKAT_DETAILRowDeleting As OTHER_EXZAKAT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXZAKAT_DETAILRowDeleted As OTHER_EXZAKAT_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXZAKAT_DETAILRow(ByVal row As OTHER_EXZAKAT_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXZAKAT_DETAILRow(ByVal EXOZD_KEY As Integer, ByVal parentOTHER_EXZAKATRowByFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL As OTHER_EXZAKATRow, ByVal EXOZD_SOURCENO As Integer, ByVal EXOZD_DESC As String, ByVal EXOZD_DEDUCTIBLE As Boolean, ByVal EXOZD_AMOUNT As Decimal, ByVal EXOZD_NOTE As String, ByVal EXOZD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXZAKAT_DETAILRow
            Dim rowOTHER_EXZAKAT_DETAILRow As OTHER_EXZAKAT_DETAILRow = CType(Me.NewRow,OTHER_EXZAKAT_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOZD_KEY, Nothing, EXOZD_SOURCENO, Nothing, EXOZD_DESC, EXOZD_DEDUCTIBLE, EXOZD_AMOUNT, EXOZD_NOTE, EXOZD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXZAKATRowByFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXZAKATRowByFK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL(1)
            End If
            rowOTHER_EXZAKAT_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXZAKAT_DETAILRow)
            Return rowOTHER_EXZAKAT_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOZD_EXOZDKEY(ByVal EXOZD_EXOZDKEY As Integer) As OTHER_EXZAKAT_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOZD_EXOZDKEY}),OTHER_EXZAKAT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXZAKAT_DETAILDataTable = CType(MyBase.Clone,OTHER_EXZAKAT_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXZAKAT_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOZD_KEY = MyBase.Columns("EXOZD_KEY")
            Me.columnEXOZD_EXOZKEY = MyBase.Columns("EXOZD_EXOZKEY")
            Me.columnEXOZD_SOURCENO = MyBase.Columns("EXOZD_SOURCENO")
            Me.columnEXOZD_EXOZDKEY = MyBase.Columns("EXOZD_EXOZDKEY")
            Me.columnEXOZD_DESC = MyBase.Columns("EXOZD_DESC")
            Me.columnEXOZD_DEDUCTIBLE = MyBase.Columns("EXOZD_DEDUCTIBLE")
            Me.columnEXOZD_AMOUNT = MyBase.Columns("EXOZD_AMOUNT")
            Me.columnEXOZD_NOTE = MyBase.Columns("EXOZD_NOTE")
            Me.columnEXOZD_DEDUCTIBLE_ADD = MyBase.Columns("EXOZD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOZD_KEY = New Global.System.Data.DataColumn("EXOZD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_KEY)
            Me.columnEXOZD_EXOZKEY = New Global.System.Data.DataColumn("EXOZD_EXOZKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_EXOZKEY)
            Me.columnEXOZD_SOURCENO = New Global.System.Data.DataColumn("EXOZD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_SOURCENO)
            Me.columnEXOZD_EXOZDKEY = New Global.System.Data.DataColumn("EXOZD_EXOZDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_EXOZDKEY)
            Me.columnEXOZD_DESC = New Global.System.Data.DataColumn("EXOZD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_DESC)
            Me.columnEXOZD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOZD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_DEDUCTIBLE)
            Me.columnEXOZD_AMOUNT = New Global.System.Data.DataColumn("EXOZD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_AMOUNT)
            Me.columnEXOZD_NOTE = New Global.System.Data.DataColumn("EXOZD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_NOTE)
            Me.columnEXOZD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOZD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOZD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOZD_EXOZDKEY}, true))
            Me.columnEXOZD_EXOZDKEY.AutoIncrement = true
            Me.columnEXOZD_EXOZDKEY.AllowDBNull = false
            Me.columnEXOZD_EXOZDKEY.Unique = true
            Me.columnEXOZD_DESC.MaxLength = 255
            Me.columnEXOZD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOZD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOZD_NOTE.MaxLength = 3000
            Me.columnEXOZD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXZAKAT_DETAILRow() As OTHER_EXZAKAT_DETAILRow
            Return CType(Me.NewRow,OTHER_EXZAKAT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXZAKAT_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXZAKAT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXZAKAT_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKAT_DETAILRowChanged(Me, New OTHER_EXZAKAT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXZAKAT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXZAKAT_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKAT_DETAILRowChanging(Me, New OTHER_EXZAKAT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXZAKAT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXZAKAT_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKAT_DETAILRowDeleted(Me, New OTHER_EXZAKAT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXZAKAT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXZAKAT_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXZAKAT_DETAILRowDeleting(Me, New OTHER_EXZAKAT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXZAKAT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXZAKAT_DETAILRow(ByVal row As OTHER_EXZAKAT_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXZAKAT_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXLOSSDISPOSALFADataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXLOSSDISPOSALFARow)
        
        Private columnEXOLD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOLD_EXOLDKEY As Global.System.Data.DataColumn
        
        Private columnEXOLD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOLD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOLD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOLD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOLD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOLD_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOLD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXLOSSDISPOSALFA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_EXOLDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_EXOLDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXLOSSDISPOSALFARow
            Get
                Return CType(Me.Rows(index),OTHER_EXLOSSDISPOSALFARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFARowChanging As OTHER_EXLOSSDISPOSALFARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFARowChanged As OTHER_EXLOSSDISPOSALFARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFARowDeleting As OTHER_EXLOSSDISPOSALFARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFARowDeleted As OTHER_EXLOSSDISPOSALFARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXLOSSDISPOSALFARow(ByVal row As OTHER_EXLOSSDISPOSALFARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXLOSSDISPOSALFARow(ByVal EXOLD_KEY As Integer, ByVal EXOLD_SOURCENO As Integer, ByVal EXOLD_DESC As String, ByVal EXOLD_AMOUNT As Decimal, ByVal EXOLD_DEDUCTIBLE As Boolean, ByVal EXOLD_NOTE As String, ByVal EXOLD_DETAIL As String, ByVal EXOLD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXLOSSDISPOSALFARow
            Dim rowOTHER_EXLOSSDISPOSALFARow As OTHER_EXLOSSDISPOSALFARow = CType(Me.NewRow,OTHER_EXLOSSDISPOSALFARow)
            Dim columnValuesArray() As Object = New Object() {EXOLD_KEY, Nothing, EXOLD_SOURCENO, EXOLD_DESC, EXOLD_AMOUNT, EXOLD_DEDUCTIBLE, EXOLD_NOTE, EXOLD_DETAIL, EXOLD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXLOSSDISPOSALFARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXLOSSDISPOSALFARow)
            Return rowOTHER_EXLOSSDISPOSALFARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOLD_EXOLDKEY(ByVal EXOLD_EXOLDKEY As Integer) As OTHER_EXLOSSDISPOSALFARow
            Return CType(Me.Rows.Find(New Object() {EXOLD_EXOLDKEY}),OTHER_EXLOSSDISPOSALFARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXLOSSDISPOSALFADataTable = CType(MyBase.Clone,OTHER_EXLOSSDISPOSALFADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXLOSSDISPOSALFADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOLD_KEY = MyBase.Columns("EXOLD_KEY")
            Me.columnEXOLD_EXOLDKEY = MyBase.Columns("EXOLD_EXOLDKEY")
            Me.columnEXOLD_SOURCENO = MyBase.Columns("EXOLD_SOURCENO")
            Me.columnEXOLD_DESC = MyBase.Columns("EXOLD_DESC")
            Me.columnEXOLD_AMOUNT = MyBase.Columns("EXOLD_AMOUNT")
            Me.columnEXOLD_DEDUCTIBLE = MyBase.Columns("EXOLD_DEDUCTIBLE")
            Me.columnEXOLD_NOTE = MyBase.Columns("EXOLD_NOTE")
            Me.columnEXOLD_DETAIL = MyBase.Columns("EXOLD_DETAIL")
            Me.columnEXOLD_DEDUCTIBLE_ADD = MyBase.Columns("EXOLD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOLD_KEY = New Global.System.Data.DataColumn("EXOLD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_KEY)
            Me.columnEXOLD_EXOLDKEY = New Global.System.Data.DataColumn("EXOLD_EXOLDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_EXOLDKEY)
            Me.columnEXOLD_SOURCENO = New Global.System.Data.DataColumn("EXOLD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_SOURCENO)
            Me.columnEXOLD_DESC = New Global.System.Data.DataColumn("EXOLD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_DESC)
            Me.columnEXOLD_AMOUNT = New Global.System.Data.DataColumn("EXOLD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_AMOUNT)
            Me.columnEXOLD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOLD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_DEDUCTIBLE)
            Me.columnEXOLD_NOTE = New Global.System.Data.DataColumn("EXOLD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_NOTE)
            Me.columnEXOLD_DETAIL = New Global.System.Data.DataColumn("EXOLD_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_DETAIL)
            Me.columnEXOLD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOLD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOLD_EXOLDKEY}, true))
            Me.columnEXOLD_EXOLDKEY.AutoIncrement = true
            Me.columnEXOLD_EXOLDKEY.AllowDBNull = false
            Me.columnEXOLD_EXOLDKEY.Unique = true
            Me.columnEXOLD_DESC.MaxLength = 255
            Me.columnEXOLD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOLD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOLD_NOTE.MaxLength = 3000
            Me.columnEXOLD_DETAIL.MaxLength = 30
            Me.columnEXOLD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXLOSSDISPOSALFARow() As OTHER_EXLOSSDISPOSALFARow
            Return CType(Me.NewRow,OTHER_EXLOSSDISPOSALFARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXLOSSDISPOSALFARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXLOSSDISPOSALFARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFARowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFARowChanged(Me, New OTHER_EXLOSSDISPOSALFARowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFARowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFARowChanging(Me, New OTHER_EXLOSSDISPOSALFARowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFARowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFARowDeleted(Me, New OTHER_EXLOSSDISPOSALFARowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFARowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFARowDeleting(Me, New OTHER_EXLOSSDISPOSALFARowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXLOSSDISPOSALFARow(ByVal row As OTHER_EXLOSSDISPOSALFARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXLOSSDISPOSALFADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXLOSSDISPOSALFA_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXLOSSDISPOSALFA_DETAILRow)
        
        Private columnEXOLDD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOLDD_EXOLDKEY As Global.System.Data.DataColumn
        
        Private columnEXOLDD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOLDD_EXOLDDKEY As Global.System.Data.DataColumn
        
        Private columnEXOLDD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOLDD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOLDD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOLDD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOLDD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXLOSSDISPOSALFA_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_EXOLDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_EXOLDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_EXOLDDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_EXOLDDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLDD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLDD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXLOSSDISPOSALFA_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXLOSSDISPOSALFA_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFA_DETAILRowChanging As OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFA_DETAILRowChanged As OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFA_DETAILRowDeleting As OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLOSSDISPOSALFA_DETAILRowDeleted As OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXLOSSDISPOSALFA_DETAILRow(ByVal row As OTHER_EXLOSSDISPOSALFA_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXLOSSDISPOSALFA_DETAILRow(ByVal EXOLDD_KEY As Integer, ByVal parentOTHER_EXLOSSDISPOSALFARowByFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL As OTHER_EXLOSSDISPOSALFARow, ByVal EXOLDD_SOURCENO As Integer, ByVal EXOLDD_DESC As String, ByVal EXOLDD_DEDUCTIBLE As Boolean, ByVal EXOLDD_AMOUNT As Decimal, ByVal EXOLDD_NOTE As String, ByVal EXOLDD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXLOSSDISPOSALFA_DETAILRow
            Dim rowOTHER_EXLOSSDISPOSALFA_DETAILRow As OTHER_EXLOSSDISPOSALFA_DETAILRow = CType(Me.NewRow,OTHER_EXLOSSDISPOSALFA_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOLDD_KEY, Nothing, EXOLDD_SOURCENO, Nothing, EXOLDD_DESC, EXOLDD_DEDUCTIBLE, EXOLDD_AMOUNT, EXOLDD_NOTE, EXOLDD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXLOSSDISPOSALFARowByFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXLOSSDISPOSALFARowByFK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL(1)
            End If
            rowOTHER_EXLOSSDISPOSALFA_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXLOSSDISPOSALFA_DETAILRow)
            Return rowOTHER_EXLOSSDISPOSALFA_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOLDD_EXOLDDKEY(ByVal EXOLDD_EXOLDDKEY As Integer) As OTHER_EXLOSSDISPOSALFA_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOLDD_EXOLDDKEY}),OTHER_EXLOSSDISPOSALFA_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXLOSSDISPOSALFA_DETAILDataTable = CType(MyBase.Clone,OTHER_EXLOSSDISPOSALFA_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXLOSSDISPOSALFA_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOLDD_KEY = MyBase.Columns("EXOLDD_KEY")
            Me.columnEXOLDD_EXOLDKEY = MyBase.Columns("EXOLDD_EXOLDKEY")
            Me.columnEXOLDD_SOURCENO = MyBase.Columns("EXOLDD_SOURCENO")
            Me.columnEXOLDD_EXOLDDKEY = MyBase.Columns("EXOLDD_EXOLDDKEY")
            Me.columnEXOLDD_DESC = MyBase.Columns("EXOLDD_DESC")
            Me.columnEXOLDD_DEDUCTIBLE = MyBase.Columns("EXOLDD_DEDUCTIBLE")
            Me.columnEXOLDD_AMOUNT = MyBase.Columns("EXOLDD_AMOUNT")
            Me.columnEXOLDD_NOTE = MyBase.Columns("EXOLDD_NOTE")
            Me.columnEXOLDD_DEDUCTIBLE_ADD = MyBase.Columns("EXOLDD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOLDD_KEY = New Global.System.Data.DataColumn("EXOLDD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_KEY)
            Me.columnEXOLDD_EXOLDKEY = New Global.System.Data.DataColumn("EXOLDD_EXOLDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_EXOLDKEY)
            Me.columnEXOLDD_SOURCENO = New Global.System.Data.DataColumn("EXOLDD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_SOURCENO)
            Me.columnEXOLDD_EXOLDDKEY = New Global.System.Data.DataColumn("EXOLDD_EXOLDDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_EXOLDDKEY)
            Me.columnEXOLDD_DESC = New Global.System.Data.DataColumn("EXOLDD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_DESC)
            Me.columnEXOLDD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOLDD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_DEDUCTIBLE)
            Me.columnEXOLDD_AMOUNT = New Global.System.Data.DataColumn("EXOLDD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_AMOUNT)
            Me.columnEXOLDD_NOTE = New Global.System.Data.DataColumn("EXOLDD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_NOTE)
            Me.columnEXOLDD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOLDD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLDD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOLDD_EXOLDDKEY}, true))
            Me.columnEXOLDD_EXOLDDKEY.AutoIncrement = true
            Me.columnEXOLDD_EXOLDDKEY.AllowDBNull = false
            Me.columnEXOLDD_EXOLDDKEY.Unique = true
            Me.columnEXOLDD_DESC.MaxLength = 255
            Me.columnEXOLDD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOLDD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOLDD_NOTE.MaxLength = 3000
            Me.columnEXOLDD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXLOSSDISPOSALFA_DETAILRow() As OTHER_EXLOSSDISPOSALFA_DETAILRow
            Return CType(Me.NewRow,OTHER_EXLOSSDISPOSALFA_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXLOSSDISPOSALFA_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXLOSSDISPOSALFA_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFA_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFA_DETAILRowChanged(Me, New OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFA_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFA_DETAILRowChanging(Me, New OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFA_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFA_DETAILRowDeleted(Me, New OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXLOSSDISPOSALFA_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLOSSDISPOSALFA_DETAILRowDeleting(Me, New OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLOSSDISPOSALFA_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXLOSSDISPOSALFA_DETAILRow(ByVal row As OTHER_EXLOSSDISPOSALFA_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXLOSSDISPOSALFA_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_ENTERTAINNSTAFFDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_ENTERTAINNSTAFFRow)
        
        Private columnEXOENS_KEY As Global.System.Data.DataColumn
        
        Private columnEXOENS_EXOENSKEY As Global.System.Data.DataColumn
        
        Private columnEXOENS_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOENS_DESC As Global.System.Data.DataColumn
        
        Private columnEXOENS_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOENS_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOENS_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOENS_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOENS_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_ENTERTAINNSTAFF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_EXOENSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_EXOENSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENS_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENS_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_ENTERTAINNSTAFFRow
            Get
                Return CType(Me.Rows(index),OTHER_ENTERTAINNSTAFFRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFFRowChanging As OTHER_ENTERTAINNSTAFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFFRowChanged As OTHER_ENTERTAINNSTAFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFFRowDeleting As OTHER_ENTERTAINNSTAFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFFRowDeleted As OTHER_ENTERTAINNSTAFFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_ENTERTAINNSTAFFRow(ByVal row As OTHER_ENTERTAINNSTAFFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_ENTERTAINNSTAFFRow(ByVal EXOENS_KEY As Integer, ByVal EXOENS_SOURCENO As Integer, ByVal EXOENS_DESC As String, ByVal EXOENS_AMOUNT As Decimal, ByVal EXOENS_DEDUCTIBLE As Boolean, ByVal EXOENS_NOTE As String, ByVal EXOENS_DETAIL As String, ByVal EXOENS_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_ENTERTAINNSTAFFRow
            Dim rowOTHER_ENTERTAINNSTAFFRow As OTHER_ENTERTAINNSTAFFRow = CType(Me.NewRow,OTHER_ENTERTAINNSTAFFRow)
            Dim columnValuesArray() As Object = New Object() {EXOENS_KEY, Nothing, EXOENS_SOURCENO, EXOENS_DESC, EXOENS_AMOUNT, EXOENS_DEDUCTIBLE, EXOENS_NOTE, EXOENS_DETAIL, EXOENS_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_ENTERTAINNSTAFFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_ENTERTAINNSTAFFRow)
            Return rowOTHER_ENTERTAINNSTAFFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOENS_EXOENSKEY(ByVal EXOENS_EXOENSKEY As Integer) As OTHER_ENTERTAINNSTAFFRow
            Return CType(Me.Rows.Find(New Object() {EXOENS_EXOENSKEY}),OTHER_ENTERTAINNSTAFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_ENTERTAINNSTAFFDataTable = CType(MyBase.Clone,OTHER_ENTERTAINNSTAFFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_ENTERTAINNSTAFFDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOENS_KEY = MyBase.Columns("EXOENS_KEY")
            Me.columnEXOENS_EXOENSKEY = MyBase.Columns("EXOENS_EXOENSKEY")
            Me.columnEXOENS_SOURCENO = MyBase.Columns("EXOENS_SOURCENO")
            Me.columnEXOENS_DESC = MyBase.Columns("EXOENS_DESC")
            Me.columnEXOENS_AMOUNT = MyBase.Columns("EXOENS_AMOUNT")
            Me.columnEXOENS_DEDUCTIBLE = MyBase.Columns("EXOENS_DEDUCTIBLE")
            Me.columnEXOENS_NOTE = MyBase.Columns("EXOENS_NOTE")
            Me.columnEXOENS_DETAIL = MyBase.Columns("EXOENS_DETAIL")
            Me.columnEXOENS_DEDUCTIBLE_ADD = MyBase.Columns("EXOENS_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOENS_KEY = New Global.System.Data.DataColumn("EXOENS_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_KEY)
            Me.columnEXOENS_EXOENSKEY = New Global.System.Data.DataColumn("EXOENS_EXOENSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_EXOENSKEY)
            Me.columnEXOENS_SOURCENO = New Global.System.Data.DataColumn("EXOENS_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_SOURCENO)
            Me.columnEXOENS_DESC = New Global.System.Data.DataColumn("EXOENS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_DESC)
            Me.columnEXOENS_AMOUNT = New Global.System.Data.DataColumn("EXOENS_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_AMOUNT)
            Me.columnEXOENS_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOENS_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_DEDUCTIBLE)
            Me.columnEXOENS_NOTE = New Global.System.Data.DataColumn("EXOENS_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_NOTE)
            Me.columnEXOENS_DETAIL = New Global.System.Data.DataColumn("EXOENS_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_DETAIL)
            Me.columnEXOENS_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOENS_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENS_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOENS_EXOENSKEY}, true))
            Me.columnEXOENS_EXOENSKEY.AutoIncrement = true
            Me.columnEXOENS_EXOENSKEY.AllowDBNull = false
            Me.columnEXOENS_EXOENSKEY.Unique = true
            Me.columnEXOENS_DESC.MaxLength = 255
            Me.columnEXOENS_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOENS_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOENS_NOTE.MaxLength = 3000
            Me.columnEXOENS_DETAIL.MaxLength = 30
            Me.columnEXOENS_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_ENTERTAINNSTAFFRow() As OTHER_ENTERTAINNSTAFFRow
            Return CType(Me.NewRow,OTHER_ENTERTAINNSTAFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_ENTERTAINNSTAFFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_ENTERTAINNSTAFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFFRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFFRowChanged(Me, New OTHER_ENTERTAINNSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFFRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFFRowChanging(Me, New OTHER_ENTERTAINNSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFFRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFFRowDeleted(Me, New OTHER_ENTERTAINNSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFFRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFFRowDeleting(Me, New OTHER_ENTERTAINNSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_ENTERTAINNSTAFFRow(ByVal row As OTHER_ENTERTAINNSTAFFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_ENTERTAINNSTAFFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_ENTERTAINNSTAFF_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_ENTERTAINNSTAFF_DETAILRow)
        
        Private columnEXOENSD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOENSD_EXOENSKEY As Global.System.Data.DataColumn
        
        Private columnEXOENSD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOENSD_EXOENSDKEY As Global.System.Data.DataColumn
        
        Private columnEXOENSD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOENSD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOENSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOENSD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOENSD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_ENTERTAINNSTAFF_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_EXOENSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_EXOENSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_EXOENSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_EXOENSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOENSD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOENSD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_ENTERTAINNSTAFF_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_ENTERTAINNSTAFF_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFF_DETAILRowChanging As OTHER_ENTERTAINNSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFF_DETAILRowChanged As OTHER_ENTERTAINNSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFF_DETAILRowDeleting As OTHER_ENTERTAINNSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINNSTAFF_DETAILRowDeleted As OTHER_ENTERTAINNSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_ENTERTAINNSTAFF_DETAILRow(ByVal row As OTHER_ENTERTAINNSTAFF_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_ENTERTAINNSTAFF_DETAILRow(ByVal EXOENSD_KEY As Integer, ByVal parentOTHER_ENTERTAINNSTAFFRowByFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL As OTHER_ENTERTAINNSTAFFRow, ByVal EXOENSD_SOURCENO As Integer, ByVal EXOENSD_DESC As String, ByVal EXOENSD_DEDUCTIBLE As Boolean, ByVal EXOENSD_AMOUNT As Decimal, ByVal EXOENSD_NOTE As String, ByVal EXOENSD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_ENTERTAINNSTAFF_DETAILRow
            Dim rowOTHER_ENTERTAINNSTAFF_DETAILRow As OTHER_ENTERTAINNSTAFF_DETAILRow = CType(Me.NewRow,OTHER_ENTERTAINNSTAFF_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOENSD_KEY, Nothing, EXOENSD_SOURCENO, Nothing, EXOENSD_DESC, EXOENSD_DEDUCTIBLE, EXOENSD_AMOUNT, EXOENSD_NOTE, EXOENSD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_ENTERTAINNSTAFFRowByFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_ENTERTAINNSTAFFRowByFK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL(1)
            End If
            rowOTHER_ENTERTAINNSTAFF_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_ENTERTAINNSTAFF_DETAILRow)
            Return rowOTHER_ENTERTAINNSTAFF_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOENSD_EXOENSDKEY(ByVal EXOENSD_EXOENSDKEY As Integer) As OTHER_ENTERTAINNSTAFF_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOENSD_EXOENSDKEY}),OTHER_ENTERTAINNSTAFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_ENTERTAINNSTAFF_DETAILDataTable = CType(MyBase.Clone,OTHER_ENTERTAINNSTAFF_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_ENTERTAINNSTAFF_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOENSD_KEY = MyBase.Columns("EXOENSD_KEY")
            Me.columnEXOENSD_EXOENSKEY = MyBase.Columns("EXOENSD_EXOENSKEY")
            Me.columnEXOENSD_SOURCENO = MyBase.Columns("EXOENSD_SOURCENO")
            Me.columnEXOENSD_EXOENSDKEY = MyBase.Columns("EXOENSD_EXOENSDKEY")
            Me.columnEXOENSD_DESC = MyBase.Columns("EXOENSD_DESC")
            Me.columnEXOENSD_DEDUCTIBLE = MyBase.Columns("EXOENSD_DEDUCTIBLE")
            Me.columnEXOENSD_AMOUNT = MyBase.Columns("EXOENSD_AMOUNT")
            Me.columnEXOENSD_NOTE = MyBase.Columns("EXOENSD_NOTE")
            Me.columnEXOENSD_DEDUCTIBLE_ADD = MyBase.Columns("EXOENSD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOENSD_KEY = New Global.System.Data.DataColumn("EXOENSD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_KEY)
            Me.columnEXOENSD_EXOENSKEY = New Global.System.Data.DataColumn("EXOENSD_EXOENSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_EXOENSKEY)
            Me.columnEXOENSD_SOURCENO = New Global.System.Data.DataColumn("EXOENSD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_SOURCENO)
            Me.columnEXOENSD_EXOENSDKEY = New Global.System.Data.DataColumn("EXOENSD_EXOENSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_EXOENSDKEY)
            Me.columnEXOENSD_DESC = New Global.System.Data.DataColumn("EXOENSD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_DESC)
            Me.columnEXOENSD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOENSD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_DEDUCTIBLE)
            Me.columnEXOENSD_AMOUNT = New Global.System.Data.DataColumn("EXOENSD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_AMOUNT)
            Me.columnEXOENSD_NOTE = New Global.System.Data.DataColumn("EXOENSD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_NOTE)
            Me.columnEXOENSD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOENSD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOENSD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOENSD_EXOENSDKEY}, true))
            Me.columnEXOENSD_EXOENSDKEY.AutoIncrement = true
            Me.columnEXOENSD_EXOENSDKEY.AllowDBNull = false
            Me.columnEXOENSD_EXOENSDKEY.Unique = true
            Me.columnEXOENSD_DESC.MaxLength = 255
            Me.columnEXOENSD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOENSD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOENSD_NOTE.MaxLength = 3000
            Me.columnEXOENSD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_ENTERTAINNSTAFF_DETAILRow() As OTHER_ENTERTAINNSTAFF_DETAILRow
            Return CType(Me.NewRow,OTHER_ENTERTAINNSTAFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_ENTERTAINNSTAFF_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_ENTERTAINNSTAFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFF_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFF_DETAILRowChanged(Me, New OTHER_ENTERTAINNSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFF_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFF_DETAILRowChanging(Me, New OTHER_ENTERTAINNSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFF_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFF_DETAILRowDeleted(Me, New OTHER_ENTERTAINNSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_ENTERTAINNSTAFF_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINNSTAFF_DETAILRowDeleting(Me, New OTHER_ENTERTAINNSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINNSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_ENTERTAINNSTAFF_DETAILRow(ByVal row As OTHER_ENTERTAINNSTAFF_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_ENTERTAINNSTAFF_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_ENTERTAINSTAFFDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_ENTERTAINSTAFFRow)
        
        Private columnEXOES_KEY As Global.System.Data.DataColumn
        
        Private columnEXOES_EXOESKEY As Global.System.Data.DataColumn
        
        Private columnEXOES_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOES_DESC As Global.System.Data.DataColumn
        
        Private columnEXOES_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOES_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOES_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOES_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOES_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_ENTERTAINSTAFF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_EXOESKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_EXOESKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOES_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOES_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_ENTERTAINSTAFFRow
            Get
                Return CType(Me.Rows(index),OTHER_ENTERTAINSTAFFRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFFRowChanging As OTHER_ENTERTAINSTAFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFFRowChanged As OTHER_ENTERTAINSTAFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFFRowDeleting As OTHER_ENTERTAINSTAFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFFRowDeleted As OTHER_ENTERTAINSTAFFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_ENTERTAINSTAFFRow(ByVal row As OTHER_ENTERTAINSTAFFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_ENTERTAINSTAFFRow(ByVal EXOES_KEY As Integer, ByVal EXOES_SOURCENO As Integer, ByVal EXOES_DESC As String, ByVal EXOES_AMOUNT As Decimal, ByVal EXOES_DEDUCTIBLE As Boolean, ByVal EXOES_NOTE As String, ByVal EXOES_DETAIL As String, ByVal EXOES_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_ENTERTAINSTAFFRow
            Dim rowOTHER_ENTERTAINSTAFFRow As OTHER_ENTERTAINSTAFFRow = CType(Me.NewRow,OTHER_ENTERTAINSTAFFRow)
            Dim columnValuesArray() As Object = New Object() {EXOES_KEY, Nothing, EXOES_SOURCENO, EXOES_DESC, EXOES_AMOUNT, EXOES_DEDUCTIBLE, EXOES_NOTE, EXOES_DETAIL, EXOES_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_ENTERTAINSTAFFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_ENTERTAINSTAFFRow)
            Return rowOTHER_ENTERTAINSTAFFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOES_EXOESKEY(ByVal EXOES_EXOESKEY As Integer) As OTHER_ENTERTAINSTAFFRow
            Return CType(Me.Rows.Find(New Object() {EXOES_EXOESKEY}),OTHER_ENTERTAINSTAFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_ENTERTAINSTAFFDataTable = CType(MyBase.Clone,OTHER_ENTERTAINSTAFFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_ENTERTAINSTAFFDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOES_KEY = MyBase.Columns("EXOES_KEY")
            Me.columnEXOES_EXOESKEY = MyBase.Columns("EXOES_EXOESKEY")
            Me.columnEXOES_SOURCENO = MyBase.Columns("EXOES_SOURCENO")
            Me.columnEXOES_DESC = MyBase.Columns("EXOES_DESC")
            Me.columnEXOES_AMOUNT = MyBase.Columns("EXOES_AMOUNT")
            Me.columnEXOES_DEDUCTIBLE = MyBase.Columns("EXOES_DEDUCTIBLE")
            Me.columnEXOES_NOTE = MyBase.Columns("EXOES_NOTE")
            Me.columnEXOES_DETAIL = MyBase.Columns("EXOES_DETAIL")
            Me.columnEXOES_DEDUCTIBLE_ADD = MyBase.Columns("EXOES_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOES_KEY = New Global.System.Data.DataColumn("EXOES_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_KEY)
            Me.columnEXOES_EXOESKEY = New Global.System.Data.DataColumn("EXOES_EXOESKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_EXOESKEY)
            Me.columnEXOES_SOURCENO = New Global.System.Data.DataColumn("EXOES_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_SOURCENO)
            Me.columnEXOES_DESC = New Global.System.Data.DataColumn("EXOES_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_DESC)
            Me.columnEXOES_AMOUNT = New Global.System.Data.DataColumn("EXOES_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_AMOUNT)
            Me.columnEXOES_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOES_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_DEDUCTIBLE)
            Me.columnEXOES_NOTE = New Global.System.Data.DataColumn("EXOES_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_NOTE)
            Me.columnEXOES_DETAIL = New Global.System.Data.DataColumn("EXOES_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_DETAIL)
            Me.columnEXOES_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOES_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOES_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOES_EXOESKEY}, true))
            Me.columnEXOES_EXOESKEY.AutoIncrement = true
            Me.columnEXOES_EXOESKEY.AllowDBNull = false
            Me.columnEXOES_EXOESKEY.Unique = true
            Me.columnEXOES_DESC.MaxLength = 255
            Me.columnEXOES_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOES_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOES_NOTE.MaxLength = 3000
            Me.columnEXOES_DETAIL.MaxLength = 30
            Me.columnEXOES_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_ENTERTAINSTAFFRow() As OTHER_ENTERTAINSTAFFRow
            Return CType(Me.NewRow,OTHER_ENTERTAINSTAFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_ENTERTAINSTAFFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_ENTERTAINSTAFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_ENTERTAINSTAFFRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFFRowChanged(Me, New OTHER_ENTERTAINSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_ENTERTAINSTAFFRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFFRowChanging(Me, New OTHER_ENTERTAINSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_ENTERTAINSTAFFRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFFRowDeleted(Me, New OTHER_ENTERTAINSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_ENTERTAINSTAFFRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFFRowDeleting(Me, New OTHER_ENTERTAINSTAFFRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_ENTERTAINSTAFFRow(ByVal row As OTHER_ENTERTAINSTAFFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_ENTERTAINSTAFFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_ENTERTAINSTAFF_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_ENTERTAINSTAFF_DETAILRow)
        
        Private columnEXOESD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOESD_EXOESKEY As Global.System.Data.DataColumn
        
        Private columnEXOESD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOESD_EXOESDKEY As Global.System.Data.DataColumn
        
        Private columnEXOESD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOESD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOESD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOESD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOESD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_ENTERTAINSTAFF_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_EXOESKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_EXOESKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_EXOESDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_EXOESDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOESD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOESD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_ENTERTAINSTAFF_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_ENTERTAINSTAFF_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFF_DETAILRowChanging As OTHER_ENTERTAINSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFF_DETAILRowChanged As OTHER_ENTERTAINSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFF_DETAILRowDeleting As OTHER_ENTERTAINSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_ENTERTAINSTAFF_DETAILRowDeleted As OTHER_ENTERTAINSTAFF_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_ENTERTAINSTAFF_DETAILRow(ByVal row As OTHER_ENTERTAINSTAFF_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_ENTERTAINSTAFF_DETAILRow(ByVal EXOESD_KEY As Integer, ByVal parentOTHER_ENTERTAINSTAFFRowByFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL As OTHER_ENTERTAINSTAFFRow, ByVal EXOESD_SOURCENO As Integer, ByVal EXOESD_DESC As String, ByVal EXOESD_DEDUCTIBLE As Boolean, ByVal EXOESD_AMOUNT As Decimal, ByVal EXOESD_NOTE As String, ByVal EXOESD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_ENTERTAINSTAFF_DETAILRow
            Dim rowOTHER_ENTERTAINSTAFF_DETAILRow As OTHER_ENTERTAINSTAFF_DETAILRow = CType(Me.NewRow,OTHER_ENTERTAINSTAFF_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOESD_KEY, Nothing, EXOESD_SOURCENO, Nothing, EXOESD_DESC, EXOESD_DEDUCTIBLE, EXOESD_AMOUNT, EXOESD_NOTE, EXOESD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_ENTERTAINSTAFFRowByFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_ENTERTAINSTAFFRowByFK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL(1)
            End If
            rowOTHER_ENTERTAINSTAFF_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_ENTERTAINSTAFF_DETAILRow)
            Return rowOTHER_ENTERTAINSTAFF_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOESD_EXOESDKEY(ByVal EXOESD_EXOESDKEY As Integer) As OTHER_ENTERTAINSTAFF_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOESD_EXOESDKEY}),OTHER_ENTERTAINSTAFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_ENTERTAINSTAFF_DETAILDataTable = CType(MyBase.Clone,OTHER_ENTERTAINSTAFF_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_ENTERTAINSTAFF_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOESD_KEY = MyBase.Columns("EXOESD_KEY")
            Me.columnEXOESD_EXOESKEY = MyBase.Columns("EXOESD_EXOESKEY")
            Me.columnEXOESD_SOURCENO = MyBase.Columns("EXOESD_SOURCENO")
            Me.columnEXOESD_EXOESDKEY = MyBase.Columns("EXOESD_EXOESDKEY")
            Me.columnEXOESD_DESC = MyBase.Columns("EXOESD_DESC")
            Me.columnEXOESD_DEDUCTIBLE = MyBase.Columns("EXOESD_DEDUCTIBLE")
            Me.columnEXOESD_AMOUNT = MyBase.Columns("EXOESD_AMOUNT")
            Me.columnEXOESD_NOTE = MyBase.Columns("EXOESD_NOTE")
            Me.columnEXOESD_DEDUCTIBLE_ADD = MyBase.Columns("EXOESD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOESD_KEY = New Global.System.Data.DataColumn("EXOESD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_KEY)
            Me.columnEXOESD_EXOESKEY = New Global.System.Data.DataColumn("EXOESD_EXOESKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_EXOESKEY)
            Me.columnEXOESD_SOURCENO = New Global.System.Data.DataColumn("EXOESD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_SOURCENO)
            Me.columnEXOESD_EXOESDKEY = New Global.System.Data.DataColumn("EXOESD_EXOESDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_EXOESDKEY)
            Me.columnEXOESD_DESC = New Global.System.Data.DataColumn("EXOESD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_DESC)
            Me.columnEXOESD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOESD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_DEDUCTIBLE)
            Me.columnEXOESD_AMOUNT = New Global.System.Data.DataColumn("EXOESD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_AMOUNT)
            Me.columnEXOESD_NOTE = New Global.System.Data.DataColumn("EXOESD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_NOTE)
            Me.columnEXOESD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOESD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOESD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOESD_EXOESDKEY}, true))
            Me.columnEXOESD_EXOESDKEY.AutoIncrement = true
            Me.columnEXOESD_EXOESDKEY.AllowDBNull = false
            Me.columnEXOESD_EXOESDKEY.Unique = true
            Me.columnEXOESD_DESC.MaxLength = 255
            Me.columnEXOESD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOESD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOESD_NOTE.MaxLength = 3000
            Me.columnEXOESD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_ENTERTAINSTAFF_DETAILRow() As OTHER_ENTERTAINSTAFF_DETAILRow
            Return CType(Me.NewRow,OTHER_ENTERTAINSTAFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_ENTERTAINSTAFF_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_ENTERTAINSTAFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_ENTERTAINSTAFF_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFF_DETAILRowChanged(Me, New OTHER_ENTERTAINSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_ENTERTAINSTAFF_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFF_DETAILRowChanging(Me, New OTHER_ENTERTAINSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_ENTERTAINSTAFF_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFF_DETAILRowDeleted(Me, New OTHER_ENTERTAINSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_ENTERTAINSTAFF_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_ENTERTAINSTAFF_DETAILRowDeleting(Me, New OTHER_ENTERTAINSTAFF_DETAILRowChangeEvent(CType(e.Row,OTHER_ENTERTAINSTAFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_ENTERTAINSTAFF_DETAILRow(ByVal row As OTHER_ENTERTAINSTAFF_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_ENTERTAINSTAFF_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXPENALTYDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXPENALTYRow)
        
        Private columnEXOP_KEY As Global.System.Data.DataColumn
        
        Private columnEXOP_EXOPKEY As Global.System.Data.DataColumn
        
        Private columnEXOP_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOP_DESC As Global.System.Data.DataColumn
        
        Private columnEXOP_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOP_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOP_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOP_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOP_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXPENALTY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_EXOPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_EXOPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOP_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOP_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXPENALTYRow
            Get
                Return CType(Me.Rows(index),OTHER_EXPENALTYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTYRowChanging As OTHER_EXPENALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTYRowChanged As OTHER_EXPENALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTYRowDeleting As OTHER_EXPENALTYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTYRowDeleted As OTHER_EXPENALTYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXPENALTYRow(ByVal row As OTHER_EXPENALTYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXPENALTYRow(ByVal EXOP_KEY As Integer, ByVal EXOP_SOURCENO As Integer, ByVal EXOP_DESC As String, ByVal EXOP_AMOUNT As Decimal, ByVal EXOP_DEDUCTIBLE As Boolean, ByVal EXOP_NOTE As String, ByVal EXOP_DETAIL As String, ByVal EXOP_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXPENALTYRow
            Dim rowOTHER_EXPENALTYRow As OTHER_EXPENALTYRow = CType(Me.NewRow,OTHER_EXPENALTYRow)
            Dim columnValuesArray() As Object = New Object() {EXOP_KEY, Nothing, EXOP_SOURCENO, EXOP_DESC, EXOP_AMOUNT, EXOP_DEDUCTIBLE, EXOP_NOTE, EXOP_DETAIL, EXOP_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXPENALTYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXPENALTYRow)
            Return rowOTHER_EXPENALTYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOP_EXOPKEY(ByVal EXOP_EXOPKEY As Integer) As OTHER_EXPENALTYRow
            Return CType(Me.Rows.Find(New Object() {EXOP_EXOPKEY}),OTHER_EXPENALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXPENALTYDataTable = CType(MyBase.Clone,OTHER_EXPENALTYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXPENALTYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOP_KEY = MyBase.Columns("EXOP_KEY")
            Me.columnEXOP_EXOPKEY = MyBase.Columns("EXOP_EXOPKEY")
            Me.columnEXOP_SOURCENO = MyBase.Columns("EXOP_SOURCENO")
            Me.columnEXOP_DESC = MyBase.Columns("EXOP_DESC")
            Me.columnEXOP_AMOUNT = MyBase.Columns("EXOP_AMOUNT")
            Me.columnEXOP_DEDUCTIBLE = MyBase.Columns("EXOP_DEDUCTIBLE")
            Me.columnEXOP_NOTE = MyBase.Columns("EXOP_NOTE")
            Me.columnEXOP_DETAIL = MyBase.Columns("EXOP_DETAIL")
            Me.columnEXOP_DEDUCTIBLE_ADD = MyBase.Columns("EXOP_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOP_KEY = New Global.System.Data.DataColumn("EXOP_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_KEY)
            Me.columnEXOP_EXOPKEY = New Global.System.Data.DataColumn("EXOP_EXOPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_EXOPKEY)
            Me.columnEXOP_SOURCENO = New Global.System.Data.DataColumn("EXOP_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_SOURCENO)
            Me.columnEXOP_DESC = New Global.System.Data.DataColumn("EXOP_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_DESC)
            Me.columnEXOP_AMOUNT = New Global.System.Data.DataColumn("EXOP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_AMOUNT)
            Me.columnEXOP_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOP_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_DEDUCTIBLE)
            Me.columnEXOP_NOTE = New Global.System.Data.DataColumn("EXOP_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_NOTE)
            Me.columnEXOP_DETAIL = New Global.System.Data.DataColumn("EXOP_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_DETAIL)
            Me.columnEXOP_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOP_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOP_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOP_EXOPKEY}, true))
            Me.columnEXOP_EXOPKEY.AutoIncrement = true
            Me.columnEXOP_EXOPKEY.AllowDBNull = false
            Me.columnEXOP_EXOPKEY.Unique = true
            Me.columnEXOP_DESC.MaxLength = 255
            Me.columnEXOP_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOP_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOP_NOTE.MaxLength = 3000
            Me.columnEXOP_DETAIL.MaxLength = 30
            Me.columnEXOP_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXPENALTYRow() As OTHER_EXPENALTYRow
            Return CType(Me.NewRow,OTHER_EXPENALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXPENALTYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXPENALTYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXPENALTYRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTYRowChanged(Me, New OTHER_EXPENALTYRowChangeEvent(CType(e.Row,OTHER_EXPENALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXPENALTYRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTYRowChanging(Me, New OTHER_EXPENALTYRowChangeEvent(CType(e.Row,OTHER_EXPENALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXPENALTYRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTYRowDeleted(Me, New OTHER_EXPENALTYRowChangeEvent(CType(e.Row,OTHER_EXPENALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXPENALTYRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTYRowDeleting(Me, New OTHER_EXPENALTYRowChangeEvent(CType(e.Row,OTHER_EXPENALTYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXPENALTYRow(ByVal row As OTHER_EXPENALTYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXPENALTYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXPENALTY_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXPENALTY_DETAILRow)
        
        Private columnEXOPD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOPD_EXOPKEY As Global.System.Data.DataColumn
        
        Private columnEXOPD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOPD_EXOPDKEY As Global.System.Data.DataColumn
        
        Private columnEXOPD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOPD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOPD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOPD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOPD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXPENALTY_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_EXOPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_EXOPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_EXOPDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_EXOPDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXPENALTY_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXPENALTY_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTY_DETAILRowChanging As OTHER_EXPENALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTY_DETAILRowChanged As OTHER_EXPENALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTY_DETAILRowDeleting As OTHER_EXPENALTY_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENALTY_DETAILRowDeleted As OTHER_EXPENALTY_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXPENALTY_DETAILRow(ByVal row As OTHER_EXPENALTY_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXPENALTY_DETAILRow(ByVal EXOPD_KEY As Integer, ByVal parentOTHER_EXPENALTYRowByFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL As OTHER_EXPENALTYRow, ByVal EXOPD_SOURCENO As Integer, ByVal EXOPD_DESC As String, ByVal EXOPD_DEDUCTIBLE As Boolean, ByVal EXOPD_AMOUNT As Decimal, ByVal EXOPD_NOTE As String, ByVal EXOPD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXPENALTY_DETAILRow
            Dim rowOTHER_EXPENALTY_DETAILRow As OTHER_EXPENALTY_DETAILRow = CType(Me.NewRow,OTHER_EXPENALTY_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOPD_KEY, Nothing, EXOPD_SOURCENO, Nothing, EXOPD_DESC, EXOPD_DEDUCTIBLE, EXOPD_AMOUNT, EXOPD_NOTE, EXOPD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXPENALTYRowByFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXPENALTYRowByFK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL(1)
            End If
            rowOTHER_EXPENALTY_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXPENALTY_DETAILRow)
            Return rowOTHER_EXPENALTY_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOPD_EXOPDKEY(ByVal EXOPD_EXOPDKEY As Integer) As OTHER_EXPENALTY_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOPD_EXOPDKEY}),OTHER_EXPENALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXPENALTY_DETAILDataTable = CType(MyBase.Clone,OTHER_EXPENALTY_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXPENALTY_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOPD_KEY = MyBase.Columns("EXOPD_KEY")
            Me.columnEXOPD_EXOPKEY = MyBase.Columns("EXOPD_EXOPKEY")
            Me.columnEXOPD_SOURCENO = MyBase.Columns("EXOPD_SOURCENO")
            Me.columnEXOPD_EXOPDKEY = MyBase.Columns("EXOPD_EXOPDKEY")
            Me.columnEXOPD_DESC = MyBase.Columns("EXOPD_DESC")
            Me.columnEXOPD_DEDUCTIBLE = MyBase.Columns("EXOPD_DEDUCTIBLE")
            Me.columnEXOPD_AMOUNT = MyBase.Columns("EXOPD_AMOUNT")
            Me.columnEXOPD_NOTE = MyBase.Columns("EXOPD_NOTE")
            Me.columnEXOPD_DEDUCTIBLE_ADD = MyBase.Columns("EXOPD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOPD_KEY = New Global.System.Data.DataColumn("EXOPD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_KEY)
            Me.columnEXOPD_EXOPKEY = New Global.System.Data.DataColumn("EXOPD_EXOPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_EXOPKEY)
            Me.columnEXOPD_SOURCENO = New Global.System.Data.DataColumn("EXOPD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_SOURCENO)
            Me.columnEXOPD_EXOPDKEY = New Global.System.Data.DataColumn("EXOPD_EXOPDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_EXOPDKEY)
            Me.columnEXOPD_DESC = New Global.System.Data.DataColumn("EXOPD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_DESC)
            Me.columnEXOPD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOPD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_DEDUCTIBLE)
            Me.columnEXOPD_AMOUNT = New Global.System.Data.DataColumn("EXOPD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_AMOUNT)
            Me.columnEXOPD_NOTE = New Global.System.Data.DataColumn("EXOPD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_NOTE)
            Me.columnEXOPD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOPD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOPD_EXOPDKEY}, true))
            Me.columnEXOPD_EXOPDKEY.AutoIncrement = true
            Me.columnEXOPD_EXOPDKEY.AllowDBNull = false
            Me.columnEXOPD_EXOPDKEY.Unique = true
            Me.columnEXOPD_DESC.MaxLength = 255
            Me.columnEXOPD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOPD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOPD_NOTE.MaxLength = 3000
            Me.columnEXOPD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXPENALTY_DETAILRow() As OTHER_EXPENALTY_DETAILRow
            Return CType(Me.NewRow,OTHER_EXPENALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXPENALTY_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXPENALTY_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXPENALTY_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTY_DETAILRowChanged(Me, New OTHER_EXPENALTY_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXPENALTY_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTY_DETAILRowChanging(Me, New OTHER_EXPENALTY_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXPENALTY_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTY_DETAILRowDeleted(Me, New OTHER_EXPENALTY_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXPENALTY_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENALTY_DETAILRowDeleting(Me, New OTHER_EXPENALTY_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENALTY_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXPENALTY_DETAILRow(ByVal row As OTHER_EXPENALTY_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXPENALTY_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXPROVISIONACCDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXPROVISIONACCRow)
        
        Private columnEXOPA_KEY As Global.System.Data.DataColumn
        
        Private columnEXOPA_EXOPAKEY As Global.System.Data.DataColumn
        
        Private columnEXOPA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOPA_DESC As Global.System.Data.DataColumn
        
        Private columnEXOPA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOPA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOPA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOPA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOPA_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXPROVISIONACC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_EXOPAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_EXOPAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPA_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPA_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXPROVISIONACCRow
            Get
                Return CType(Me.Rows(index),OTHER_EXPROVISIONACCRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACCRowChanging As OTHER_EXPROVISIONACCRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACCRowChanged As OTHER_EXPROVISIONACCRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACCRowDeleting As OTHER_EXPROVISIONACCRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACCRowDeleted As OTHER_EXPROVISIONACCRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXPROVISIONACCRow(ByVal row As OTHER_EXPROVISIONACCRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXPROVISIONACCRow(ByVal EXOPA_KEY As Integer, ByVal EXOPA_SOURCENO As Integer, ByVal EXOPA_DESC As String, ByVal EXOPA_AMOUNT As Decimal, ByVal EXOPA_DEDUCTIBLE As Boolean, ByVal EXOPA_NOTE As String, ByVal EXOPA_DETAIL As String, ByVal EXOPA_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXPROVISIONACCRow
            Dim rowOTHER_EXPROVISIONACCRow As OTHER_EXPROVISIONACCRow = CType(Me.NewRow,OTHER_EXPROVISIONACCRow)
            Dim columnValuesArray() As Object = New Object() {EXOPA_KEY, Nothing, EXOPA_SOURCENO, EXOPA_DESC, EXOPA_AMOUNT, EXOPA_DEDUCTIBLE, EXOPA_NOTE, EXOPA_DETAIL, EXOPA_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXPROVISIONACCRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXPROVISIONACCRow)
            Return rowOTHER_EXPROVISIONACCRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOPA_EXOPAKEY(ByVal EXOPA_EXOPAKEY As Integer) As OTHER_EXPROVISIONACCRow
            Return CType(Me.Rows.Find(New Object() {EXOPA_EXOPAKEY}),OTHER_EXPROVISIONACCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXPROVISIONACCDataTable = CType(MyBase.Clone,OTHER_EXPROVISIONACCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXPROVISIONACCDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOPA_KEY = MyBase.Columns("EXOPA_KEY")
            Me.columnEXOPA_EXOPAKEY = MyBase.Columns("EXOPA_EXOPAKEY")
            Me.columnEXOPA_SOURCENO = MyBase.Columns("EXOPA_SOURCENO")
            Me.columnEXOPA_DESC = MyBase.Columns("EXOPA_DESC")
            Me.columnEXOPA_AMOUNT = MyBase.Columns("EXOPA_AMOUNT")
            Me.columnEXOPA_DEDUCTIBLE = MyBase.Columns("EXOPA_DEDUCTIBLE")
            Me.columnEXOPA_NOTE = MyBase.Columns("EXOPA_NOTE")
            Me.columnEXOPA_DETAIL = MyBase.Columns("EXOPA_DETAIL")
            Me.columnEXOPA_DEDUCTIBLE_ADD = MyBase.Columns("EXOPA_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOPA_KEY = New Global.System.Data.DataColumn("EXOPA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_KEY)
            Me.columnEXOPA_EXOPAKEY = New Global.System.Data.DataColumn("EXOPA_EXOPAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_EXOPAKEY)
            Me.columnEXOPA_SOURCENO = New Global.System.Data.DataColumn("EXOPA_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_SOURCENO)
            Me.columnEXOPA_DESC = New Global.System.Data.DataColumn("EXOPA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_DESC)
            Me.columnEXOPA_AMOUNT = New Global.System.Data.DataColumn("EXOPA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_AMOUNT)
            Me.columnEXOPA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOPA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_DEDUCTIBLE)
            Me.columnEXOPA_NOTE = New Global.System.Data.DataColumn("EXOPA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_NOTE)
            Me.columnEXOPA_DETAIL = New Global.System.Data.DataColumn("EXOPA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_DETAIL)
            Me.columnEXOPA_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOPA_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPA_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOPA_EXOPAKEY}, true))
            Me.columnEXOPA_EXOPAKEY.AutoIncrement = true
            Me.columnEXOPA_EXOPAKEY.AllowDBNull = false
            Me.columnEXOPA_EXOPAKEY.Unique = true
            Me.columnEXOPA_DESC.MaxLength = 255
            Me.columnEXOPA_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOPA_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOPA_NOTE.MaxLength = 3000
            Me.columnEXOPA_DETAIL.MaxLength = 30
            Me.columnEXOPA_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXPROVISIONACCRow() As OTHER_EXPROVISIONACCRow
            Return CType(Me.NewRow,OTHER_EXPROVISIONACCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXPROVISIONACCRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXPROVISIONACCRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXPROVISIONACCRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACCRowChanged(Me, New OTHER_EXPROVISIONACCRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXPROVISIONACCRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACCRowChanging(Me, New OTHER_EXPROVISIONACCRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXPROVISIONACCRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACCRowDeleted(Me, New OTHER_EXPROVISIONACCRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXPROVISIONACCRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACCRowDeleting(Me, New OTHER_EXPROVISIONACCRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACCRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXPROVISIONACCRow(ByVal row As OTHER_EXPROVISIONACCRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXPROVISIONACCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXPROVISIONACC_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXPROVISIONACC_DETAILRow)
        
        Private columnEXOPAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOPAD_EXOPAKEY As Global.System.Data.DataColumn
        
        Private columnEXOPAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOPAD_EXOPADKEY As Global.System.Data.DataColumn
        
        Private columnEXOPAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOPAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOPAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOPAD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOPAD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXPROVISIONACC_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_EXOPAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_EXOPAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_EXOPADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_EXOPADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOPAD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOPAD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXPROVISIONACC_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXPROVISIONACC_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACC_DETAILRowChanging As OTHER_EXPROVISIONACC_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACC_DETAILRowChanged As OTHER_EXPROVISIONACC_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACC_DETAILRowDeleting As OTHER_EXPROVISIONACC_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPROVISIONACC_DETAILRowDeleted As OTHER_EXPROVISIONACC_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXPROVISIONACC_DETAILRow(ByVal row As OTHER_EXPROVISIONACC_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXPROVISIONACC_DETAILRow(ByVal EXOPAD_KEY As Integer, ByVal parentOTHER_EXPROVISIONACCRowByFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL As OTHER_EXPROVISIONACCRow, ByVal EXOPAD_SOURCENO As Integer, ByVal EXOPAD_DESC As String, ByVal EXOPAD_DEDUCTIBLE As Boolean, ByVal EXOPAD_AMOUNT As Decimal, ByVal EXOPAD_NOTE As String, ByVal EXOPAD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXPROVISIONACC_DETAILRow
            Dim rowOTHER_EXPROVISIONACC_DETAILRow As OTHER_EXPROVISIONACC_DETAILRow = CType(Me.NewRow,OTHER_EXPROVISIONACC_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOPAD_KEY, Nothing, EXOPAD_SOURCENO, Nothing, EXOPAD_DESC, EXOPAD_DEDUCTIBLE, EXOPAD_AMOUNT, EXOPAD_NOTE, EXOPAD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXPROVISIONACCRowByFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXPROVISIONACCRowByFK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL(1)
            End If
            rowOTHER_EXPROVISIONACC_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXPROVISIONACC_DETAILRow)
            Return rowOTHER_EXPROVISIONACC_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOPAD_EXOPADKEY(ByVal EXOPAD_EXOPADKEY As Integer) As OTHER_EXPROVISIONACC_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOPAD_EXOPADKEY}),OTHER_EXPROVISIONACC_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXPROVISIONACC_DETAILDataTable = CType(MyBase.Clone,OTHER_EXPROVISIONACC_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXPROVISIONACC_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOPAD_KEY = MyBase.Columns("EXOPAD_KEY")
            Me.columnEXOPAD_EXOPAKEY = MyBase.Columns("EXOPAD_EXOPAKEY")
            Me.columnEXOPAD_SOURCENO = MyBase.Columns("EXOPAD_SOURCENO")
            Me.columnEXOPAD_EXOPADKEY = MyBase.Columns("EXOPAD_EXOPADKEY")
            Me.columnEXOPAD_DESC = MyBase.Columns("EXOPAD_DESC")
            Me.columnEXOPAD_DEDUCTIBLE = MyBase.Columns("EXOPAD_DEDUCTIBLE")
            Me.columnEXOPAD_AMOUNT = MyBase.Columns("EXOPAD_AMOUNT")
            Me.columnEXOPAD_NOTE = MyBase.Columns("EXOPAD_NOTE")
            Me.columnEXOPAD_DEDUCTIBLE_ADD = MyBase.Columns("EXOPAD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOPAD_KEY = New Global.System.Data.DataColumn("EXOPAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_KEY)
            Me.columnEXOPAD_EXOPAKEY = New Global.System.Data.DataColumn("EXOPAD_EXOPAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_EXOPAKEY)
            Me.columnEXOPAD_SOURCENO = New Global.System.Data.DataColumn("EXOPAD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_SOURCENO)
            Me.columnEXOPAD_EXOPADKEY = New Global.System.Data.DataColumn("EXOPAD_EXOPADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_EXOPADKEY)
            Me.columnEXOPAD_DESC = New Global.System.Data.DataColumn("EXOPAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_DESC)
            Me.columnEXOPAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOPAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_DEDUCTIBLE)
            Me.columnEXOPAD_AMOUNT = New Global.System.Data.DataColumn("EXOPAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_AMOUNT)
            Me.columnEXOPAD_NOTE = New Global.System.Data.DataColumn("EXOPAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_NOTE)
            Me.columnEXOPAD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOPAD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOPAD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOPAD_EXOPADKEY}, true))
            Me.columnEXOPAD_EXOPADKEY.AutoIncrement = true
            Me.columnEXOPAD_EXOPADKEY.AllowDBNull = false
            Me.columnEXOPAD_EXOPADKEY.Unique = true
            Me.columnEXOPAD_DESC.MaxLength = 255
            Me.columnEXOPAD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOPAD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOPAD_NOTE.MaxLength = 3000
            Me.columnEXOPAD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXPROVISIONACC_DETAILRow() As OTHER_EXPROVISIONACC_DETAILRow
            Return CType(Me.NewRow,OTHER_EXPROVISIONACC_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXPROVISIONACC_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXPROVISIONACC_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXPROVISIONACC_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACC_DETAILRowChanged(Me, New OTHER_EXPROVISIONACC_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACC_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXPROVISIONACC_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACC_DETAILRowChanging(Me, New OTHER_EXPROVISIONACC_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACC_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXPROVISIONACC_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACC_DETAILRowDeleted(Me, New OTHER_EXPROVISIONACC_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACC_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXPROVISIONACC_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPROVISIONACC_DETAILRowDeleting(Me, New OTHER_EXPROVISIONACC_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPROVISIONACC_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXPROVISIONACC_DETAILRow(ByVal row As OTHER_EXPROVISIONACC_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXPROVISIONACC_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXLEAVEPASSAGEDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXLEAVEPASSAGERow)
        
        Private columnEXOLP_KEY As Global.System.Data.DataColumn
        
        Private columnEXOLP_EXOLPKEY As Global.System.Data.DataColumn
        
        Private columnEXOLP_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOLP_DESC As Global.System.Data.DataColumn
        
        Private columnEXOLP_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOLP_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOLP_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOLP_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOLP_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXLEAVEPASSAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_EXOLPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_EXOLPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLP_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLP_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXLEAVEPASSAGERow
            Get
                Return CType(Me.Rows(index),OTHER_EXLEAVEPASSAGERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGERowChanging As OTHER_EXLEAVEPASSAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGERowChanged As OTHER_EXLEAVEPASSAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGERowDeleting As OTHER_EXLEAVEPASSAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGERowDeleted As OTHER_EXLEAVEPASSAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXLEAVEPASSAGERow(ByVal row As OTHER_EXLEAVEPASSAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXLEAVEPASSAGERow(ByVal EXOLP_KEY As Integer, ByVal EXOLP_SOURCENO As Integer, ByVal EXOLP_DESC As String, ByVal EXOLP_AMOUNT As Decimal, ByVal EXOLP_DEDUCTIBLE As Boolean, ByVal EXOLP_NOTE As String, ByVal EXOLP_DETAIL As String, ByVal EXOLP_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXLEAVEPASSAGERow
            Dim rowOTHER_EXLEAVEPASSAGERow As OTHER_EXLEAVEPASSAGERow = CType(Me.NewRow,OTHER_EXLEAVEPASSAGERow)
            Dim columnValuesArray() As Object = New Object() {EXOLP_KEY, Nothing, EXOLP_SOURCENO, EXOLP_DESC, EXOLP_AMOUNT, EXOLP_DEDUCTIBLE, EXOLP_NOTE, EXOLP_DETAIL, EXOLP_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXLEAVEPASSAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXLEAVEPASSAGERow)
            Return rowOTHER_EXLEAVEPASSAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOLP_EXOLPKEY(ByVal EXOLP_EXOLPKEY As Integer) As OTHER_EXLEAVEPASSAGERow
            Return CType(Me.Rows.Find(New Object() {EXOLP_EXOLPKEY}),OTHER_EXLEAVEPASSAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXLEAVEPASSAGEDataTable = CType(MyBase.Clone,OTHER_EXLEAVEPASSAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXLEAVEPASSAGEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOLP_KEY = MyBase.Columns("EXOLP_KEY")
            Me.columnEXOLP_EXOLPKEY = MyBase.Columns("EXOLP_EXOLPKEY")
            Me.columnEXOLP_SOURCENO = MyBase.Columns("EXOLP_SOURCENO")
            Me.columnEXOLP_DESC = MyBase.Columns("EXOLP_DESC")
            Me.columnEXOLP_AMOUNT = MyBase.Columns("EXOLP_AMOUNT")
            Me.columnEXOLP_DEDUCTIBLE = MyBase.Columns("EXOLP_DEDUCTIBLE")
            Me.columnEXOLP_NOTE = MyBase.Columns("EXOLP_NOTE")
            Me.columnEXOLP_DETAIL = MyBase.Columns("EXOLP_DETAIL")
            Me.columnEXOLP_DEDUCTIBLE_ADD = MyBase.Columns("EXOLP_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOLP_KEY = New Global.System.Data.DataColumn("EXOLP_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_KEY)
            Me.columnEXOLP_EXOLPKEY = New Global.System.Data.DataColumn("EXOLP_EXOLPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_EXOLPKEY)
            Me.columnEXOLP_SOURCENO = New Global.System.Data.DataColumn("EXOLP_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_SOURCENO)
            Me.columnEXOLP_DESC = New Global.System.Data.DataColumn("EXOLP_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_DESC)
            Me.columnEXOLP_AMOUNT = New Global.System.Data.DataColumn("EXOLP_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_AMOUNT)
            Me.columnEXOLP_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOLP_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_DEDUCTIBLE)
            Me.columnEXOLP_NOTE = New Global.System.Data.DataColumn("EXOLP_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_NOTE)
            Me.columnEXOLP_DETAIL = New Global.System.Data.DataColumn("EXOLP_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_DETAIL)
            Me.columnEXOLP_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOLP_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLP_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOLP_EXOLPKEY}, true))
            Me.columnEXOLP_EXOLPKEY.AutoIncrement = true
            Me.columnEXOLP_EXOLPKEY.AllowDBNull = false
            Me.columnEXOLP_EXOLPKEY.Unique = true
            Me.columnEXOLP_DESC.MaxLength = 255
            Me.columnEXOLP_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOLP_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOLP_NOTE.MaxLength = 3000
            Me.columnEXOLP_DETAIL.MaxLength = 30
            Me.columnEXOLP_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXLEAVEPASSAGERow() As OTHER_EXLEAVEPASSAGERow
            Return CType(Me.NewRow,OTHER_EXLEAVEPASSAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXLEAVEPASSAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXLEAVEPASSAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGERowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGERowChanged(Me, New OTHER_EXLEAVEPASSAGERowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGERowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGERowChanging(Me, New OTHER_EXLEAVEPASSAGERowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGERowDeleted(Me, New OTHER_EXLEAVEPASSAGERowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGERowDeleting(Me, New OTHER_EXLEAVEPASSAGERowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXLEAVEPASSAGERow(ByVal row As OTHER_EXLEAVEPASSAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXLEAVEPASSAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXLEAVEPASSAGE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXLEAVEPASSAGE_DETAILRow)
        
        Private columnEXOLPD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOLPD_EXOLPKEY As Global.System.Data.DataColumn
        
        Private columnEXOLPD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOLPD_EXOLPDKEY As Global.System.Data.DataColumn
        
        Private columnEXOLPD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOLPD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOLPD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOLPD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOLPD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXLEAVEPASSAGE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_EXOLPKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_EXOLPKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_EXOLPDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_EXOLPDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOLPD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOLPD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXLEAVEPASSAGE_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXLEAVEPASSAGE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGE_DETAILRowChanging As OTHER_EXLEAVEPASSAGE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGE_DETAILRowChanged As OTHER_EXLEAVEPASSAGE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGE_DETAILRowDeleting As OTHER_EXLEAVEPASSAGE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXLEAVEPASSAGE_DETAILRowDeleted As OTHER_EXLEAVEPASSAGE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXLEAVEPASSAGE_DETAILRow(ByVal row As OTHER_EXLEAVEPASSAGE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXLEAVEPASSAGE_DETAILRow(ByVal EXOLPD_KEY As Integer, ByVal parentOTHER_EXLEAVEPASSAGERowByFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL As OTHER_EXLEAVEPASSAGERow, ByVal EXOLPD_SOURCENO As Integer, ByVal EXOLPD_DESC As String, ByVal EXOLPD_DEDUCTIBLE As Boolean, ByVal EXOLPD_AMOUNT As Decimal, ByVal EXOLPD_NOTE As String, ByVal EXOLPD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXLEAVEPASSAGE_DETAILRow
            Dim rowOTHER_EXLEAVEPASSAGE_DETAILRow As OTHER_EXLEAVEPASSAGE_DETAILRow = CType(Me.NewRow,OTHER_EXLEAVEPASSAGE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOLPD_KEY, Nothing, EXOLPD_SOURCENO, Nothing, EXOLPD_DESC, EXOLPD_DEDUCTIBLE, EXOLPD_AMOUNT, EXOLPD_NOTE, EXOLPD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXLEAVEPASSAGERowByFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXLEAVEPASSAGERowByFK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL(1)
            End If
            rowOTHER_EXLEAVEPASSAGE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXLEAVEPASSAGE_DETAILRow)
            Return rowOTHER_EXLEAVEPASSAGE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOLPD_EXOLPDKEY(ByVal EXOLPD_EXOLPDKEY As Integer) As OTHER_EXLEAVEPASSAGE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOLPD_EXOLPDKEY}),OTHER_EXLEAVEPASSAGE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXLEAVEPASSAGE_DETAILDataTable = CType(MyBase.Clone,OTHER_EXLEAVEPASSAGE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXLEAVEPASSAGE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOLPD_KEY = MyBase.Columns("EXOLPD_KEY")
            Me.columnEXOLPD_EXOLPKEY = MyBase.Columns("EXOLPD_EXOLPKEY")
            Me.columnEXOLPD_SOURCENO = MyBase.Columns("EXOLPD_SOURCENO")
            Me.columnEXOLPD_EXOLPDKEY = MyBase.Columns("EXOLPD_EXOLPDKEY")
            Me.columnEXOLPD_DESC = MyBase.Columns("EXOLPD_DESC")
            Me.columnEXOLPD_DEDUCTIBLE = MyBase.Columns("EXOLPD_DEDUCTIBLE")
            Me.columnEXOLPD_AMOUNT = MyBase.Columns("EXOLPD_AMOUNT")
            Me.columnEXOLPD_NOTE = MyBase.Columns("EXOLPD_NOTE")
            Me.columnEXOLPD_DEDUCTIBLE_ADD = MyBase.Columns("EXOLPD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOLPD_KEY = New Global.System.Data.DataColumn("EXOLPD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_KEY)
            Me.columnEXOLPD_EXOLPKEY = New Global.System.Data.DataColumn("EXOLPD_EXOLPKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_EXOLPKEY)
            Me.columnEXOLPD_SOURCENO = New Global.System.Data.DataColumn("EXOLPD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_SOURCENO)
            Me.columnEXOLPD_EXOLPDKEY = New Global.System.Data.DataColumn("EXOLPD_EXOLPDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_EXOLPDKEY)
            Me.columnEXOLPD_DESC = New Global.System.Data.DataColumn("EXOLPD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_DESC)
            Me.columnEXOLPD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOLPD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_DEDUCTIBLE)
            Me.columnEXOLPD_AMOUNT = New Global.System.Data.DataColumn("EXOLPD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_AMOUNT)
            Me.columnEXOLPD_NOTE = New Global.System.Data.DataColumn("EXOLPD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_NOTE)
            Me.columnEXOLPD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOLPD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOLPD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOLPD_EXOLPDKEY}, true))
            Me.columnEXOLPD_EXOLPDKEY.AutoIncrement = true
            Me.columnEXOLPD_EXOLPDKEY.AllowDBNull = false
            Me.columnEXOLPD_EXOLPDKEY.Unique = true
            Me.columnEXOLPD_DESC.MaxLength = 255
            Me.columnEXOLPD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOLPD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOLPD_NOTE.MaxLength = 3000
            Me.columnEXOLPD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXLEAVEPASSAGE_DETAILRow() As OTHER_EXLEAVEPASSAGE_DETAILRow
            Return CType(Me.NewRow,OTHER_EXLEAVEPASSAGE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXLEAVEPASSAGE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXLEAVEPASSAGE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGE_DETAILRowChanged(Me, New OTHER_EXLEAVEPASSAGE_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGE_DETAILRowChanging(Me, New OTHER_EXLEAVEPASSAGE_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGE_DETAILRowDeleted(Me, New OTHER_EXLEAVEPASSAGE_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXLEAVEPASSAGE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXLEAVEPASSAGE_DETAILRowDeleting(Me, New OTHER_EXLEAVEPASSAGE_DETAILRowChangeEvent(CType(e.Row,OTHER_EXLEAVEPASSAGE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXLEAVEPASSAGE_DETAILRow(ByVal row As OTHER_EXLEAVEPASSAGE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXLEAVEPASSAGE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXFAWRITTENOFFDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXFAWRITTENOFFRow)
        
        Private columnEXOWO_KEY As Global.System.Data.DataColumn
        
        Private columnEXOWO_EXOWOKEY As Global.System.Data.DataColumn
        
        Private columnEXOWO_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOWO_DESC As Global.System.Data.DataColumn
        
        Private columnEXOWO_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOWO_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOWO_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOWO_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOWO_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXFAWRITTENOFF"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_EXOWOKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_EXOWOKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWO_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWO_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXFAWRITTENOFFRow
            Get
                Return CType(Me.Rows(index),OTHER_EXFAWRITTENOFFRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFFRowChanging As OTHER_EXFAWRITTENOFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFFRowChanged As OTHER_EXFAWRITTENOFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFFRowDeleting As OTHER_EXFAWRITTENOFFRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFFRowDeleted As OTHER_EXFAWRITTENOFFRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXFAWRITTENOFFRow(ByVal row As OTHER_EXFAWRITTENOFFRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXFAWRITTENOFFRow(ByVal EXOWO_KEY As Integer, ByVal EXOWO_SOURCENO As Integer, ByVal EXOWO_DESC As String, ByVal EXOWO_AMOUNT As Decimal, ByVal EXOWO_DEDUCTIBLE As Boolean, ByVal EXOWO_NOTE As String, ByVal EXOWO_DETAIL As String, ByVal EXOWO_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXFAWRITTENOFFRow
            Dim rowOTHER_EXFAWRITTENOFFRow As OTHER_EXFAWRITTENOFFRow = CType(Me.NewRow,OTHER_EXFAWRITTENOFFRow)
            Dim columnValuesArray() As Object = New Object() {EXOWO_KEY, Nothing, EXOWO_SOURCENO, EXOWO_DESC, EXOWO_AMOUNT, EXOWO_DEDUCTIBLE, EXOWO_NOTE, EXOWO_DETAIL, EXOWO_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXFAWRITTENOFFRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXFAWRITTENOFFRow)
            Return rowOTHER_EXFAWRITTENOFFRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOWO_EXOWOKEY(ByVal EXOWO_EXOWOKEY As Integer) As OTHER_EXFAWRITTENOFFRow
            Return CType(Me.Rows.Find(New Object() {EXOWO_EXOWOKEY}),OTHER_EXFAWRITTENOFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXFAWRITTENOFFDataTable = CType(MyBase.Clone,OTHER_EXFAWRITTENOFFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXFAWRITTENOFFDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOWO_KEY = MyBase.Columns("EXOWO_KEY")
            Me.columnEXOWO_EXOWOKEY = MyBase.Columns("EXOWO_EXOWOKEY")
            Me.columnEXOWO_SOURCENO = MyBase.Columns("EXOWO_SOURCENO")
            Me.columnEXOWO_DESC = MyBase.Columns("EXOWO_DESC")
            Me.columnEXOWO_AMOUNT = MyBase.Columns("EXOWO_AMOUNT")
            Me.columnEXOWO_DEDUCTIBLE = MyBase.Columns("EXOWO_DEDUCTIBLE")
            Me.columnEXOWO_NOTE = MyBase.Columns("EXOWO_NOTE")
            Me.columnEXOWO_DETAIL = MyBase.Columns("EXOWO_DETAIL")
            Me.columnEXOWO_DEDUCTIBLE_ADD = MyBase.Columns("EXOWO_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOWO_KEY = New Global.System.Data.DataColumn("EXOWO_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_KEY)
            Me.columnEXOWO_EXOWOKEY = New Global.System.Data.DataColumn("EXOWO_EXOWOKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_EXOWOKEY)
            Me.columnEXOWO_SOURCENO = New Global.System.Data.DataColumn("EXOWO_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_SOURCENO)
            Me.columnEXOWO_DESC = New Global.System.Data.DataColumn("EXOWO_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_DESC)
            Me.columnEXOWO_AMOUNT = New Global.System.Data.DataColumn("EXOWO_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_AMOUNT)
            Me.columnEXOWO_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOWO_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_DEDUCTIBLE)
            Me.columnEXOWO_NOTE = New Global.System.Data.DataColumn("EXOWO_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_NOTE)
            Me.columnEXOWO_DETAIL = New Global.System.Data.DataColumn("EXOWO_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_DETAIL)
            Me.columnEXOWO_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOWO_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWO_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOWO_EXOWOKEY}, true))
            Me.columnEXOWO_EXOWOKEY.AutoIncrement = true
            Me.columnEXOWO_EXOWOKEY.AllowDBNull = false
            Me.columnEXOWO_EXOWOKEY.Unique = true
            Me.columnEXOWO_DESC.MaxLength = 255
            Me.columnEXOWO_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOWO_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOWO_NOTE.MaxLength = 3000
            Me.columnEXOWO_DETAIL.MaxLength = 30
            Me.columnEXOWO_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXFAWRITTENOFFRow() As OTHER_EXFAWRITTENOFFRow
            Return CType(Me.NewRow,OTHER_EXFAWRITTENOFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXFAWRITTENOFFRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXFAWRITTENOFFRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXFAWRITTENOFFRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFFRowChanged(Me, New OTHER_EXFAWRITTENOFFRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXFAWRITTENOFFRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFFRowChanging(Me, New OTHER_EXFAWRITTENOFFRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXFAWRITTENOFFRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFFRowDeleted(Me, New OTHER_EXFAWRITTENOFFRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXFAWRITTENOFFRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFFRowDeleting(Me, New OTHER_EXFAWRITTENOFFRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFFRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXFAWRITTENOFFRow(ByVal row As OTHER_EXFAWRITTENOFFRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXFAWRITTENOFFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXFAWRITTENOFF_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXFAWRITTENOFF_DETAILRow)
        
        Private columnEXOWOD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOWOD_EXOWOKEY As Global.System.Data.DataColumn
        
        Private columnEXOWOD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOWOD_EXOWODKEY As Global.System.Data.DataColumn
        
        Private columnEXOWOD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOWOD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOWOD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOWOD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOWOD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXFAWRITTENOFF_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_EXOWOKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_EXOWOKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_EXOWODKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_EXOWODKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOWOD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOWOD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXFAWRITTENOFF_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXFAWRITTENOFF_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFF_DETAILRowChanging As OTHER_EXFAWRITTENOFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFF_DETAILRowChanged As OTHER_EXFAWRITTENOFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFF_DETAILRowDeleting As OTHER_EXFAWRITTENOFF_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXFAWRITTENOFF_DETAILRowDeleted As OTHER_EXFAWRITTENOFF_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXFAWRITTENOFF_DETAILRow(ByVal row As OTHER_EXFAWRITTENOFF_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXFAWRITTENOFF_DETAILRow(ByVal EXOWOD_KEY As Integer, ByVal parentOTHER_EXFAWRITTENOFFRowByFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL As OTHER_EXFAWRITTENOFFRow, ByVal EXOWOD_SOURCENO As Integer, ByVal EXOWOD_DESC As String, ByVal EXOWOD_DEDUCTIBLE As Boolean, ByVal EXOWOD_AMOUNT As Decimal, ByVal EXOWOD_NOTE As String, ByVal EXOWOD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXFAWRITTENOFF_DETAILRow
            Dim rowOTHER_EXFAWRITTENOFF_DETAILRow As OTHER_EXFAWRITTENOFF_DETAILRow = CType(Me.NewRow,OTHER_EXFAWRITTENOFF_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOWOD_KEY, Nothing, EXOWOD_SOURCENO, Nothing, EXOWOD_DESC, EXOWOD_DEDUCTIBLE, EXOWOD_AMOUNT, EXOWOD_NOTE, EXOWOD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXFAWRITTENOFFRowByFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXFAWRITTENOFFRowByFK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL(1)
            End If
            rowOTHER_EXFAWRITTENOFF_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXFAWRITTENOFF_DETAILRow)
            Return rowOTHER_EXFAWRITTENOFF_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOWOD_EXOWODKEY(ByVal EXOWOD_EXOWODKEY As Integer) As OTHER_EXFAWRITTENOFF_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOWOD_EXOWODKEY}),OTHER_EXFAWRITTENOFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXFAWRITTENOFF_DETAILDataTable = CType(MyBase.Clone,OTHER_EXFAWRITTENOFF_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXFAWRITTENOFF_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOWOD_KEY = MyBase.Columns("EXOWOD_KEY")
            Me.columnEXOWOD_EXOWOKEY = MyBase.Columns("EXOWOD_EXOWOKEY")
            Me.columnEXOWOD_SOURCENO = MyBase.Columns("EXOWOD_SOURCENO")
            Me.columnEXOWOD_EXOWODKEY = MyBase.Columns("EXOWOD_EXOWODKEY")
            Me.columnEXOWOD_DESC = MyBase.Columns("EXOWOD_DESC")
            Me.columnEXOWOD_DEDUCTIBLE = MyBase.Columns("EXOWOD_DEDUCTIBLE")
            Me.columnEXOWOD_AMOUNT = MyBase.Columns("EXOWOD_AMOUNT")
            Me.columnEXOWOD_NOTE = MyBase.Columns("EXOWOD_NOTE")
            Me.columnEXOWOD_DEDUCTIBLE_ADD = MyBase.Columns("EXOWOD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOWOD_KEY = New Global.System.Data.DataColumn("EXOWOD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_KEY)
            Me.columnEXOWOD_EXOWOKEY = New Global.System.Data.DataColumn("EXOWOD_EXOWOKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_EXOWOKEY)
            Me.columnEXOWOD_SOURCENO = New Global.System.Data.DataColumn("EXOWOD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_SOURCENO)
            Me.columnEXOWOD_EXOWODKEY = New Global.System.Data.DataColumn("EXOWOD_EXOWODKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_EXOWODKEY)
            Me.columnEXOWOD_DESC = New Global.System.Data.DataColumn("EXOWOD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_DESC)
            Me.columnEXOWOD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOWOD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_DEDUCTIBLE)
            Me.columnEXOWOD_AMOUNT = New Global.System.Data.DataColumn("EXOWOD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_AMOUNT)
            Me.columnEXOWOD_NOTE = New Global.System.Data.DataColumn("EXOWOD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_NOTE)
            Me.columnEXOWOD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOWOD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOWOD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOWOD_EXOWODKEY}, true))
            Me.columnEXOWOD_EXOWODKEY.AutoIncrement = true
            Me.columnEXOWOD_EXOWODKEY.AllowDBNull = false
            Me.columnEXOWOD_EXOWODKEY.Unique = true
            Me.columnEXOWOD_DESC.MaxLength = 255
            Me.columnEXOWOD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOWOD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOWOD_NOTE.MaxLength = 3000
            Me.columnEXOWOD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXFAWRITTENOFF_DETAILRow() As OTHER_EXFAWRITTENOFF_DETAILRow
            Return CType(Me.NewRow,OTHER_EXFAWRITTENOFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXFAWRITTENOFF_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXFAWRITTENOFF_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXFAWRITTENOFF_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFF_DETAILRowChanged(Me, New OTHER_EXFAWRITTENOFF_DETAILRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXFAWRITTENOFF_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFF_DETAILRowChanging(Me, New OTHER_EXFAWRITTENOFF_DETAILRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXFAWRITTENOFF_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFF_DETAILRowDeleted(Me, New OTHER_EXFAWRITTENOFF_DETAILRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXFAWRITTENOFF_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXFAWRITTENOFF_DETAILRowDeleting(Me, New OTHER_EXFAWRITTENOFF_DETAILRowChangeEvent(CType(e.Row,OTHER_EXFAWRITTENOFF_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXFAWRITTENOFF_DETAILRow(ByVal row As OTHER_EXFAWRITTENOFF_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXFAWRITTENOFF_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXURLOSSFOREIGNDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXURLOSSFOREIGNRow)
        
        Private columnEXOUR_KEY As Global.System.Data.DataColumn
        
        Private columnEXOUR_EXOURKEY As Global.System.Data.DataColumn
        
        Private columnEXOUR_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOUR_DESC As Global.System.Data.DataColumn
        
        Private columnEXOUR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOUR_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOUR_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOUR_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOUR_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXURLOSSFOREIGN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_EXOURKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_EXOURKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOUR_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOUR_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXURLOSSFOREIGNRow
            Get
                Return CType(Me.Rows(index),OTHER_EXURLOSSFOREIGNRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGNRowChanging As OTHER_EXURLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGNRowChanged As OTHER_EXURLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGNRowDeleting As OTHER_EXURLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGNRowDeleted As OTHER_EXURLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXURLOSSFOREIGNRow(ByVal row As OTHER_EXURLOSSFOREIGNRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXURLOSSFOREIGNRow(ByVal EXOUR_KEY As Integer, ByVal EXOUR_SOURCENO As Integer, ByVal EXOUR_DESC As String, ByVal EXOUR_AMOUNT As Decimal, ByVal EXOUR_DEDUCTIBLE As Boolean, ByVal EXOUR_NOTE As String, ByVal EXOUR_DETAIL As String, ByVal EXOUR_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXURLOSSFOREIGNRow
            Dim rowOTHER_EXURLOSSFOREIGNRow As OTHER_EXURLOSSFOREIGNRow = CType(Me.NewRow,OTHER_EXURLOSSFOREIGNRow)
            Dim columnValuesArray() As Object = New Object() {EXOUR_KEY, Nothing, EXOUR_SOURCENO, EXOUR_DESC, EXOUR_AMOUNT, EXOUR_DEDUCTIBLE, EXOUR_NOTE, EXOUR_DETAIL, EXOUR_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXURLOSSFOREIGNRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXURLOSSFOREIGNRow)
            Return rowOTHER_EXURLOSSFOREIGNRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOUR_EXOURKEY(ByVal EXOUR_EXOURKEY As Integer) As OTHER_EXURLOSSFOREIGNRow
            Return CType(Me.Rows.Find(New Object() {EXOUR_EXOURKEY}),OTHER_EXURLOSSFOREIGNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXURLOSSFOREIGNDataTable = CType(MyBase.Clone,OTHER_EXURLOSSFOREIGNDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXURLOSSFOREIGNDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOUR_KEY = MyBase.Columns("EXOUR_KEY")
            Me.columnEXOUR_EXOURKEY = MyBase.Columns("EXOUR_EXOURKEY")
            Me.columnEXOUR_SOURCENO = MyBase.Columns("EXOUR_SOURCENO")
            Me.columnEXOUR_DESC = MyBase.Columns("EXOUR_DESC")
            Me.columnEXOUR_AMOUNT = MyBase.Columns("EXOUR_AMOUNT")
            Me.columnEXOUR_DEDUCTIBLE = MyBase.Columns("EXOUR_DEDUCTIBLE")
            Me.columnEXOUR_NOTE = MyBase.Columns("EXOUR_NOTE")
            Me.columnEXOUR_DETAIL = MyBase.Columns("EXOUR_DETAIL")
            Me.columnEXOUR_DEDUCTIBLE_ADD = MyBase.Columns("EXOUR_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOUR_KEY = New Global.System.Data.DataColumn("EXOUR_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_KEY)
            Me.columnEXOUR_EXOURKEY = New Global.System.Data.DataColumn("EXOUR_EXOURKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_EXOURKEY)
            Me.columnEXOUR_SOURCENO = New Global.System.Data.DataColumn("EXOUR_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_SOURCENO)
            Me.columnEXOUR_DESC = New Global.System.Data.DataColumn("EXOUR_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_DESC)
            Me.columnEXOUR_AMOUNT = New Global.System.Data.DataColumn("EXOUR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_AMOUNT)
            Me.columnEXOUR_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOUR_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_DEDUCTIBLE)
            Me.columnEXOUR_NOTE = New Global.System.Data.DataColumn("EXOUR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_NOTE)
            Me.columnEXOUR_DETAIL = New Global.System.Data.DataColumn("EXOUR_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_DETAIL)
            Me.columnEXOUR_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOUR_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOUR_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOUR_EXOURKEY}, true))
            Me.columnEXOUR_EXOURKEY.AutoIncrement = true
            Me.columnEXOUR_EXOURKEY.AllowDBNull = false
            Me.columnEXOUR_EXOURKEY.Unique = true
            Me.columnEXOUR_DESC.MaxLength = 255
            Me.columnEXOUR_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOUR_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOUR_NOTE.MaxLength = 3000
            Me.columnEXOUR_DETAIL.MaxLength = 30
            Me.columnEXOUR_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXURLOSSFOREIGNRow() As OTHER_EXURLOSSFOREIGNRow
            Return CType(Me.NewRow,OTHER_EXURLOSSFOREIGNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXURLOSSFOREIGNRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXURLOSSFOREIGNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGNRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGNRowChanged(Me, New OTHER_EXURLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGNRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGNRowChanging(Me, New OTHER_EXURLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGNRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGNRowDeleted(Me, New OTHER_EXURLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGNRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGNRowDeleting(Me, New OTHER_EXURLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXURLOSSFOREIGNRow(ByVal row As OTHER_EXURLOSSFOREIGNRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXURLOSSFOREIGNDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXURLOSSFOREIGN_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXURLOSSFOREIGN_DETAILRow)
        
        Private columnEXOURD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOURD_EXOURKEY As Global.System.Data.DataColumn
        
        Private columnEXOURD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOURD_EXOURDKEY As Global.System.Data.DataColumn
        
        Private columnEXOURD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOURD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOURD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOURD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOURD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnEXORD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXURLOSSFOREIGN_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_EXOURKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_EXOURKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_EXOURDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_EXOURDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOURD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOURD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXURLOSSFOREIGN_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXURLOSSFOREIGN_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGN_DETAILRowChanging As OTHER_EXURLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGN_DETAILRowChanged As OTHER_EXURLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGN_DETAILRowDeleting As OTHER_EXURLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXURLOSSFOREIGN_DETAILRowDeleted As OTHER_EXURLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXURLOSSFOREIGN_DETAILRow(ByVal row As OTHER_EXURLOSSFOREIGN_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXURLOSSFOREIGN_DETAILRow(ByVal EXOURD_KEY As Integer, ByVal parentOTHER_EXURLOSSFOREIGNRowByFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL As OTHER_EXURLOSSFOREIGNRow, ByVal EXOURD_SOURCENO As Integer, ByVal EXOURD_DESC As String, ByVal EXOURD_DEDUCTIBLE As Boolean, ByVal EXOURD_AMOUNT As Decimal, ByVal EXOURD_NOTE As String, ByVal EXOURD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal EXORD_DEDUCTIBLE_ADD As Boolean, ByVal Pecentage As Integer) As OTHER_EXURLOSSFOREIGN_DETAILRow
            Dim rowOTHER_EXURLOSSFOREIGN_DETAILRow As OTHER_EXURLOSSFOREIGN_DETAILRow = CType(Me.NewRow,OTHER_EXURLOSSFOREIGN_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOURD_KEY, Nothing, EXOURD_SOURCENO, Nothing, EXOURD_DESC, EXOURD_DEDUCTIBLE, EXOURD_AMOUNT, EXOURD_NOTE, EXOURD_DEDUCTIBLE_ADD, RowIndex, EXORD_DEDUCTIBLE_ADD, Pecentage}
            If (Not (parentOTHER_EXURLOSSFOREIGNRowByFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXURLOSSFOREIGNRowByFK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL(1)
            End If
            rowOTHER_EXURLOSSFOREIGN_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXURLOSSFOREIGN_DETAILRow)
            Return rowOTHER_EXURLOSSFOREIGN_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOURD_EXOURDKEY(ByVal EXOURD_EXOURDKEY As Integer) As OTHER_EXURLOSSFOREIGN_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOURD_EXOURDKEY}),OTHER_EXURLOSSFOREIGN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXURLOSSFOREIGN_DETAILDataTable = CType(MyBase.Clone,OTHER_EXURLOSSFOREIGN_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXURLOSSFOREIGN_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOURD_KEY = MyBase.Columns("EXOURD_KEY")
            Me.columnEXOURD_EXOURKEY = MyBase.Columns("EXOURD_EXOURKEY")
            Me.columnEXOURD_SOURCENO = MyBase.Columns("EXOURD_SOURCENO")
            Me.columnEXOURD_EXOURDKEY = MyBase.Columns("EXOURD_EXOURDKEY")
            Me.columnEXOURD_DESC = MyBase.Columns("EXOURD_DESC")
            Me.columnEXOURD_DEDUCTIBLE = MyBase.Columns("EXOURD_DEDUCTIBLE")
            Me.columnEXOURD_AMOUNT = MyBase.Columns("EXOURD_AMOUNT")
            Me.columnEXOURD_NOTE = MyBase.Columns("EXOURD_NOTE")
            Me.columnEXOURD_DEDUCTIBLE_ADD = MyBase.Columns("EXOURD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnEXORD_DEDUCTIBLE_ADD = MyBase.Columns("EXORD_DEDUCTIBLE_ADD")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOURD_KEY = New Global.System.Data.DataColumn("EXOURD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_KEY)
            Me.columnEXOURD_EXOURKEY = New Global.System.Data.DataColumn("EXOURD_EXOURKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_EXOURKEY)
            Me.columnEXOURD_SOURCENO = New Global.System.Data.DataColumn("EXOURD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_SOURCENO)
            Me.columnEXOURD_EXOURDKEY = New Global.System.Data.DataColumn("EXOURD_EXOURDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_EXOURDKEY)
            Me.columnEXOURD_DESC = New Global.System.Data.DataColumn("EXOURD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_DESC)
            Me.columnEXOURD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOURD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_DEDUCTIBLE)
            Me.columnEXOURD_AMOUNT = New Global.System.Data.DataColumn("EXOURD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_AMOUNT)
            Me.columnEXOURD_NOTE = New Global.System.Data.DataColumn("EXOURD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_NOTE)
            Me.columnEXOURD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOURD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOURD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnEXORD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXORD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_DEDUCTIBLE_ADD)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOURD_EXOURDKEY}, true))
            Me.columnEXOURD_EXOURDKEY.AutoIncrement = true
            Me.columnEXOURD_EXOURDKEY.AllowDBNull = false
            Me.columnEXOURD_EXOURDKEY.Unique = true
            Me.columnEXOURD_DESC.MaxLength = 255
            Me.columnEXOURD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOURD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOURD_NOTE.MaxLength = 3000
            Me.columnEXOURD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
            Me.columnEXORD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXURLOSSFOREIGN_DETAILRow() As OTHER_EXURLOSSFOREIGN_DETAILRow
            Return CType(Me.NewRow,OTHER_EXURLOSSFOREIGN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXURLOSSFOREIGN_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXURLOSSFOREIGN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGN_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGN_DETAILRowChanged(Me, New OTHER_EXURLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGN_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGN_DETAILRowChanging(Me, New OTHER_EXURLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGN_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGN_DETAILRowDeleted(Me, New OTHER_EXURLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXURLOSSFOREIGN_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXURLOSSFOREIGN_DETAILRowDeleting(Me, New OTHER_EXURLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXURLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXURLOSSFOREIGN_DETAILRow(ByVal row As OTHER_EXURLOSSFOREIGN_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXURLOSSFOREIGN_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXRLOSSFOREIGNTDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXRLOSSFOREIGNTRow)
        
        Private columnEXORT_KEY As Global.System.Data.DataColumn
        
        Private columnEXORT_EXORTKEY As Global.System.Data.DataColumn
        
        Private columnEXORT_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXORT_DESC As Global.System.Data.DataColumn
        
        Private columnEXORT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXORT_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXORT_NOTE As Global.System.Data.DataColumn
        
        Private columnEXORT_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXORT_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXRLOSSFOREIGNT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_EXORTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_EXORTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORT_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORT_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXRLOSSFOREIGNTRow
            Get
                Return CType(Me.Rows(index),OTHER_EXRLOSSFOREIGNTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNTRowChanging As OTHER_EXRLOSSFOREIGNTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNTRowChanged As OTHER_EXRLOSSFOREIGNTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNTRowDeleting As OTHER_EXRLOSSFOREIGNTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNTRowDeleted As OTHER_EXRLOSSFOREIGNTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXRLOSSFOREIGNTRow(ByVal row As OTHER_EXRLOSSFOREIGNTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXRLOSSFOREIGNTRow(ByVal EXORT_KEY As Integer, ByVal EXORT_SOURCENO As Integer, ByVal EXORT_DESC As String, ByVal EXORT_AMOUNT As Decimal, ByVal EXORT_DEDUCTIBLE As Boolean, ByVal EXORT_NOTE As String, ByVal EXORT_DETAIL As String, ByVal EXORT_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXRLOSSFOREIGNTRow
            Dim rowOTHER_EXRLOSSFOREIGNTRow As OTHER_EXRLOSSFOREIGNTRow = CType(Me.NewRow,OTHER_EXRLOSSFOREIGNTRow)
            Dim columnValuesArray() As Object = New Object() {EXORT_KEY, Nothing, EXORT_SOURCENO, EXORT_DESC, EXORT_AMOUNT, EXORT_DEDUCTIBLE, EXORT_NOTE, EXORT_DETAIL, EXORT_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXRLOSSFOREIGNTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXRLOSSFOREIGNTRow)
            Return rowOTHER_EXRLOSSFOREIGNTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXORT_EXORTKEY(ByVal EXORT_EXORTKEY As Integer) As OTHER_EXRLOSSFOREIGNTRow
            Return CType(Me.Rows.Find(New Object() {EXORT_EXORTKEY}),OTHER_EXRLOSSFOREIGNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXRLOSSFOREIGNTDataTable = CType(MyBase.Clone,OTHER_EXRLOSSFOREIGNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXRLOSSFOREIGNTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXORT_KEY = MyBase.Columns("EXORT_KEY")
            Me.columnEXORT_EXORTKEY = MyBase.Columns("EXORT_EXORTKEY")
            Me.columnEXORT_SOURCENO = MyBase.Columns("EXORT_SOURCENO")
            Me.columnEXORT_DESC = MyBase.Columns("EXORT_DESC")
            Me.columnEXORT_AMOUNT = MyBase.Columns("EXORT_AMOUNT")
            Me.columnEXORT_DEDUCTIBLE = MyBase.Columns("EXORT_DEDUCTIBLE")
            Me.columnEXORT_NOTE = MyBase.Columns("EXORT_NOTE")
            Me.columnEXORT_DETAIL = MyBase.Columns("EXORT_DETAIL")
            Me.columnEXORT_DEDUCTIBLE_ADD = MyBase.Columns("EXORT_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXORT_KEY = New Global.System.Data.DataColumn("EXORT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_KEY)
            Me.columnEXORT_EXORTKEY = New Global.System.Data.DataColumn("EXORT_EXORTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_EXORTKEY)
            Me.columnEXORT_SOURCENO = New Global.System.Data.DataColumn("EXORT_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_SOURCENO)
            Me.columnEXORT_DESC = New Global.System.Data.DataColumn("EXORT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_DESC)
            Me.columnEXORT_AMOUNT = New Global.System.Data.DataColumn("EXORT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_AMOUNT)
            Me.columnEXORT_DEDUCTIBLE = New Global.System.Data.DataColumn("EXORT_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_DEDUCTIBLE)
            Me.columnEXORT_NOTE = New Global.System.Data.DataColumn("EXORT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_NOTE)
            Me.columnEXORT_DETAIL = New Global.System.Data.DataColumn("EXORT_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_DETAIL)
            Me.columnEXORT_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXORT_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORT_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXORT_EXORTKEY}, true))
            Me.columnEXORT_EXORTKEY.AutoIncrement = true
            Me.columnEXORT_EXORTKEY.AllowDBNull = false
            Me.columnEXORT_EXORTKEY.Unique = true
            Me.columnEXORT_DESC.MaxLength = 255
            Me.columnEXORT_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXORT_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXORT_NOTE.MaxLength = 3000
            Me.columnEXORT_DETAIL.MaxLength = 30
            Me.columnEXORT_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXRLOSSFOREIGNTRow() As OTHER_EXRLOSSFOREIGNTRow
            Return CType(Me.NewRow,OTHER_EXRLOSSFOREIGNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXRLOSSFOREIGNTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXRLOSSFOREIGNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNTRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNTRowChanged(Me, New OTHER_EXRLOSSFOREIGNTRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNTRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNTRowChanging(Me, New OTHER_EXRLOSSFOREIGNTRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNTRowDeleted(Me, New OTHER_EXRLOSSFOREIGNTRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNTRowDeleting(Me, New OTHER_EXRLOSSFOREIGNTRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXRLOSSFOREIGNTRow(ByVal row As OTHER_EXRLOSSFOREIGNTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXRLOSSFOREIGNTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXRLOSSFOREIGNT_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXRLOSSFOREIGNT_DETAILRow)
        
        Private columnEXORTD_KEY As Global.System.Data.DataColumn
        
        Private columnEXORTD_EXORTKEY As Global.System.Data.DataColumn
        
        Private columnEXORTD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXORTD_EXORTDKEY As Global.System.Data.DataColumn
        
        Private columnEXORTD_DESC As Global.System.Data.DataColumn
        
        Private columnEXORTD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXORTD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXORTD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXORTD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXRLOSSFOREIGNT_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_EXORTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_EXORTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_EXORTDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_EXORTDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORTD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORTD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXRLOSSFOREIGNT_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXRLOSSFOREIGNT_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNT_DETAILRowChanging As OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNT_DETAILRowChanged As OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNT_DETAILRowDeleting As OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNT_DETAILRowDeleted As OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXRLOSSFOREIGNT_DETAILRow(ByVal row As OTHER_EXRLOSSFOREIGNT_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXRLOSSFOREIGNT_DETAILRow(ByVal EXORTD_KEY As Integer, ByVal parentOTHER_EXRLOSSFOREIGNTRowByFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL As OTHER_EXRLOSSFOREIGNTRow, ByVal EXORTD_SOURCENO As Integer, ByVal EXORTD_DESC As String, ByVal EXORTD_DEDUCTIBLE As Boolean, ByVal EXORTD_AMOUNT As Decimal, ByVal EXORTD_NOTE As String, ByVal EXORTD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXRLOSSFOREIGNT_DETAILRow
            Dim rowOTHER_EXRLOSSFOREIGNT_DETAILRow As OTHER_EXRLOSSFOREIGNT_DETAILRow = CType(Me.NewRow,OTHER_EXRLOSSFOREIGNT_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXORTD_KEY, Nothing, EXORTD_SOURCENO, Nothing, EXORTD_DESC, EXORTD_DEDUCTIBLE, EXORTD_AMOUNT, EXORTD_NOTE, EXORTD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXRLOSSFOREIGNTRowByFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXRLOSSFOREIGNTRowByFK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL(1)
            End If
            rowOTHER_EXRLOSSFOREIGNT_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXRLOSSFOREIGNT_DETAILRow)
            Return rowOTHER_EXRLOSSFOREIGNT_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXORTD_EXORTDKEY(ByVal EXORTD_EXORTDKEY As Integer) As OTHER_EXRLOSSFOREIGNT_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXORTD_EXORTDKEY}),OTHER_EXRLOSSFOREIGNT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXRLOSSFOREIGNT_DETAILDataTable = CType(MyBase.Clone,OTHER_EXRLOSSFOREIGNT_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXRLOSSFOREIGNT_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXORTD_KEY = MyBase.Columns("EXORTD_KEY")
            Me.columnEXORTD_EXORTKEY = MyBase.Columns("EXORTD_EXORTKEY")
            Me.columnEXORTD_SOURCENO = MyBase.Columns("EXORTD_SOURCENO")
            Me.columnEXORTD_EXORTDKEY = MyBase.Columns("EXORTD_EXORTDKEY")
            Me.columnEXORTD_DESC = MyBase.Columns("EXORTD_DESC")
            Me.columnEXORTD_DEDUCTIBLE = MyBase.Columns("EXORTD_DEDUCTIBLE")
            Me.columnEXORTD_AMOUNT = MyBase.Columns("EXORTD_AMOUNT")
            Me.columnEXORTD_NOTE = MyBase.Columns("EXORTD_NOTE")
            Me.columnEXORTD_DEDUCTIBLE_ADD = MyBase.Columns("EXORTD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXORTD_KEY = New Global.System.Data.DataColumn("EXORTD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_KEY)
            Me.columnEXORTD_EXORTKEY = New Global.System.Data.DataColumn("EXORTD_EXORTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_EXORTKEY)
            Me.columnEXORTD_SOURCENO = New Global.System.Data.DataColumn("EXORTD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_SOURCENO)
            Me.columnEXORTD_EXORTDKEY = New Global.System.Data.DataColumn("EXORTD_EXORTDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_EXORTDKEY)
            Me.columnEXORTD_DESC = New Global.System.Data.DataColumn("EXORTD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_DESC)
            Me.columnEXORTD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXORTD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_DEDUCTIBLE)
            Me.columnEXORTD_AMOUNT = New Global.System.Data.DataColumn("EXORTD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_AMOUNT)
            Me.columnEXORTD_NOTE = New Global.System.Data.DataColumn("EXORTD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_NOTE)
            Me.columnEXORTD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXORTD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORTD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXORTD_EXORTDKEY}, true))
            Me.columnEXORTD_EXORTDKEY.AutoIncrement = true
            Me.columnEXORTD_EXORTDKEY.AllowDBNull = false
            Me.columnEXORTD_EXORTDKEY.Unique = true
            Me.columnEXORTD_DESC.MaxLength = 255
            Me.columnEXORTD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXORTD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXORTD_NOTE.MaxLength = 3000
            Me.columnEXORTD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXRLOSSFOREIGNT_DETAILRow() As OTHER_EXRLOSSFOREIGNT_DETAILRow
            Return CType(Me.NewRow,OTHER_EXRLOSSFOREIGNT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXRLOSSFOREIGNT_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXRLOSSFOREIGNT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNT_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNT_DETAILRowChanged(Me, New OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNT_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNT_DETAILRowChanging(Me, New OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNT_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNT_DETAILRowDeleted(Me, New OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNT_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNT_DETAILRowDeleting(Me, New OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXRLOSSFOREIGNT_DETAILRow(ByVal row As OTHER_EXRLOSSFOREIGNT_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXRLOSSFOREIGNT_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXRLOSSFOREIGNDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXRLOSSFOREIGNRow)
        
        Private columnEXOR_KEY As Global.System.Data.DataColumn
        
        Private columnEXOR_EXORKEY As Global.System.Data.DataColumn
        
        Private columnEXOR_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOR_DESC As Global.System.Data.DataColumn
        
        Private columnEXOR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOR_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOR_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOR_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOR_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXRLOSSFOREIGN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_EXORKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_EXORKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOR_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOR_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXRLOSSFOREIGNRow
            Get
                Return CType(Me.Rows(index),OTHER_EXRLOSSFOREIGNRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNRowChanging As OTHER_EXRLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNRowChanged As OTHER_EXRLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNRowDeleting As OTHER_EXRLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGNRowDeleted As OTHER_EXRLOSSFOREIGNRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXRLOSSFOREIGNRow(ByVal row As OTHER_EXRLOSSFOREIGNRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXRLOSSFOREIGNRow(ByVal EXOR_KEY As Integer, ByVal EXOR_SOURCENO As Integer, ByVal EXOR_DESC As String, ByVal EXOR_AMOUNT As Decimal, ByVal EXOR_DEDUCTIBLE As Boolean, ByVal EXOR_NOTE As String, ByVal EXOR_DETAIL As String, ByVal EXOR_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXRLOSSFOREIGNRow
            Dim rowOTHER_EXRLOSSFOREIGNRow As OTHER_EXRLOSSFOREIGNRow = CType(Me.NewRow,OTHER_EXRLOSSFOREIGNRow)
            Dim columnValuesArray() As Object = New Object() {EXOR_KEY, Nothing, EXOR_SOURCENO, EXOR_DESC, EXOR_AMOUNT, EXOR_DEDUCTIBLE, EXOR_NOTE, EXOR_DETAIL, EXOR_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXRLOSSFOREIGNRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXRLOSSFOREIGNRow)
            Return rowOTHER_EXRLOSSFOREIGNRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOR_EXORKEY(ByVal EXOR_EXORKEY As Integer) As OTHER_EXRLOSSFOREIGNRow
            Return CType(Me.Rows.Find(New Object() {EXOR_EXORKEY}),OTHER_EXRLOSSFOREIGNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXRLOSSFOREIGNDataTable = CType(MyBase.Clone,OTHER_EXRLOSSFOREIGNDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXRLOSSFOREIGNDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOR_KEY = MyBase.Columns("EXOR_KEY")
            Me.columnEXOR_EXORKEY = MyBase.Columns("EXOR_EXORKEY")
            Me.columnEXOR_SOURCENO = MyBase.Columns("EXOR_SOURCENO")
            Me.columnEXOR_DESC = MyBase.Columns("EXOR_DESC")
            Me.columnEXOR_AMOUNT = MyBase.Columns("EXOR_AMOUNT")
            Me.columnEXOR_DEDUCTIBLE = MyBase.Columns("EXOR_DEDUCTIBLE")
            Me.columnEXOR_NOTE = MyBase.Columns("EXOR_NOTE")
            Me.columnEXOR_DETAIL = MyBase.Columns("EXOR_DETAIL")
            Me.columnEXOR_DEDUCTIBLE_ADD = MyBase.Columns("EXOR_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOR_KEY = New Global.System.Data.DataColumn("EXOR_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_KEY)
            Me.columnEXOR_EXORKEY = New Global.System.Data.DataColumn("EXOR_EXORKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_EXORKEY)
            Me.columnEXOR_SOURCENO = New Global.System.Data.DataColumn("EXOR_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_SOURCENO)
            Me.columnEXOR_DESC = New Global.System.Data.DataColumn("EXOR_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_DESC)
            Me.columnEXOR_AMOUNT = New Global.System.Data.DataColumn("EXOR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_AMOUNT)
            Me.columnEXOR_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOR_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_DEDUCTIBLE)
            Me.columnEXOR_NOTE = New Global.System.Data.DataColumn("EXOR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_NOTE)
            Me.columnEXOR_DETAIL = New Global.System.Data.DataColumn("EXOR_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_DETAIL)
            Me.columnEXOR_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOR_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOR_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOR_EXORKEY}, true))
            Me.columnEXOR_EXORKEY.AutoIncrement = true
            Me.columnEXOR_EXORKEY.AllowDBNull = false
            Me.columnEXOR_EXORKEY.Unique = true
            Me.columnEXOR_DESC.MaxLength = 255
            Me.columnEXOR_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOR_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOR_NOTE.MaxLength = 3000
            Me.columnEXOR_DETAIL.MaxLength = 30
            Me.columnEXOR_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXRLOSSFOREIGNRow() As OTHER_EXRLOSSFOREIGNRow
            Return CType(Me.NewRow,OTHER_EXRLOSSFOREIGNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXRLOSSFOREIGNRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXRLOSSFOREIGNRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNRowChanged(Me, New OTHER_EXRLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNRowChanging(Me, New OTHER_EXRLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNRowDeleted(Me, New OTHER_EXRLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGNRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGNRowDeleting(Me, New OTHER_EXRLOSSFOREIGNRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGNRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXRLOSSFOREIGNRow(ByVal row As OTHER_EXRLOSSFOREIGNRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXRLOSSFOREIGNDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXRLOSSFOREIGN_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXRLOSSFOREIGN_DETAILRow)
        
        Private columnEXORD_KEY As Global.System.Data.DataColumn
        
        Private columnEXORD_EXORKEY As Global.System.Data.DataColumn
        
        Private columnEXORD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXORD_EXORDKEY As Global.System.Data.DataColumn
        
        Private columnEXORD_DESC As Global.System.Data.DataColumn
        
        Private columnEXORD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXORD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXORD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXORD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXRLOSSFOREIGN_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_EXORKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_EXORKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_EXORDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_EXORDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXORD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXORD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXRLOSSFOREIGN_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXRLOSSFOREIGN_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGN_DETAILRowChanging As OTHER_EXRLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGN_DETAILRowChanged As OTHER_EXRLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGN_DETAILRowDeleting As OTHER_EXRLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXRLOSSFOREIGN_DETAILRowDeleted As OTHER_EXRLOSSFOREIGN_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXRLOSSFOREIGN_DETAILRow(ByVal row As OTHER_EXRLOSSFOREIGN_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXRLOSSFOREIGN_DETAILRow(ByVal EXORD_KEY As Integer, ByVal parentOTHER_EXRLOSSFOREIGNRowByFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL As OTHER_EXRLOSSFOREIGNRow, ByVal EXORD_SOURCENO As Integer, ByVal EXORD_DESC As String, ByVal EXORD_DEDUCTIBLE As Boolean, ByVal EXORD_AMOUNT As Decimal, ByVal EXORD_NOTE As String, ByVal EXORD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXRLOSSFOREIGN_DETAILRow
            Dim rowOTHER_EXRLOSSFOREIGN_DETAILRow As OTHER_EXRLOSSFOREIGN_DETAILRow = CType(Me.NewRow,OTHER_EXRLOSSFOREIGN_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXORD_KEY, Nothing, EXORD_SOURCENO, Nothing, EXORD_DESC, EXORD_DEDUCTIBLE, EXORD_AMOUNT, EXORD_NOTE, EXORD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXRLOSSFOREIGNRowByFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXRLOSSFOREIGNRowByFK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL(1)
            End If
            rowOTHER_EXRLOSSFOREIGN_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXRLOSSFOREIGN_DETAILRow)
            Return rowOTHER_EXRLOSSFOREIGN_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXORD_EXORDKEY(ByVal EXORD_EXORDKEY As Integer) As OTHER_EXRLOSSFOREIGN_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXORD_EXORDKEY}),OTHER_EXRLOSSFOREIGN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXRLOSSFOREIGN_DETAILDataTable = CType(MyBase.Clone,OTHER_EXRLOSSFOREIGN_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXRLOSSFOREIGN_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXORD_KEY = MyBase.Columns("EXORD_KEY")
            Me.columnEXORD_EXORKEY = MyBase.Columns("EXORD_EXORKEY")
            Me.columnEXORD_SOURCENO = MyBase.Columns("EXORD_SOURCENO")
            Me.columnEXORD_EXORDKEY = MyBase.Columns("EXORD_EXORDKEY")
            Me.columnEXORD_DESC = MyBase.Columns("EXORD_DESC")
            Me.columnEXORD_DEDUCTIBLE = MyBase.Columns("EXORD_DEDUCTIBLE")
            Me.columnEXORD_AMOUNT = MyBase.Columns("EXORD_AMOUNT")
            Me.columnEXORD_NOTE = MyBase.Columns("EXORD_NOTE")
            Me.columnEXORD_DEDUCTIBLE_ADD = MyBase.Columns("EXORD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXORD_KEY = New Global.System.Data.DataColumn("EXORD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_KEY)
            Me.columnEXORD_EXORKEY = New Global.System.Data.DataColumn("EXORD_EXORKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_EXORKEY)
            Me.columnEXORD_SOURCENO = New Global.System.Data.DataColumn("EXORD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_SOURCENO)
            Me.columnEXORD_EXORDKEY = New Global.System.Data.DataColumn("EXORD_EXORDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_EXORDKEY)
            Me.columnEXORD_DESC = New Global.System.Data.DataColumn("EXORD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_DESC)
            Me.columnEXORD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXORD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_DEDUCTIBLE)
            Me.columnEXORD_AMOUNT = New Global.System.Data.DataColumn("EXORD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_AMOUNT)
            Me.columnEXORD_NOTE = New Global.System.Data.DataColumn("EXORD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_NOTE)
            Me.columnEXORD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXORD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXORD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXORD_EXORDKEY}, true))
            Me.columnEXORD_EXORDKEY.AutoIncrement = true
            Me.columnEXORD_EXORDKEY.AllowDBNull = false
            Me.columnEXORD_EXORDKEY.Unique = true
            Me.columnEXORD_DESC.MaxLength = 255
            Me.columnEXORD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXORD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXORD_NOTE.MaxLength = 3000
            Me.columnEXORD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXRLOSSFOREIGN_DETAILRow() As OTHER_EXRLOSSFOREIGN_DETAILRow
            Return CType(Me.NewRow,OTHER_EXRLOSSFOREIGN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXRLOSSFOREIGN_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXRLOSSFOREIGN_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGN_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGN_DETAILRowChanged(Me, New OTHER_EXRLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGN_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGN_DETAILRowChanging(Me, New OTHER_EXRLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGN_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGN_DETAILRowDeleted(Me, New OTHER_EXRLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXRLOSSFOREIGN_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXRLOSSFOREIGN_DETAILRowDeleting(Me, New OTHER_EXRLOSSFOREIGN_DETAILRowChangeEvent(CType(e.Row,OTHER_EXRLOSSFOREIGN_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXRLOSSFOREIGN_DETAILRow(ByVal row As OTHER_EXRLOSSFOREIGN_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXRLOSSFOREIGN_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXINITIALSUBDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXINITIALSUBRow)
        
        Private columnEXOIS_KEY As Global.System.Data.DataColumn
        
        Private columnEXOIS_EXOISKEY As Global.System.Data.DataColumn
        
        Private columnEXOIS_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOIS_DESC As Global.System.Data.DataColumn
        
        Private columnEXOIS_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOIS_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOIS_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOIS_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOIS_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXINITIALSUB"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_EXOISKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_EXOISKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOIS_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOIS_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXINITIALSUBRow
            Get
                Return CType(Me.Rows(index),OTHER_EXINITIALSUBRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUBRowChanging As OTHER_EXINITIALSUBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUBRowChanged As OTHER_EXINITIALSUBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUBRowDeleting As OTHER_EXINITIALSUBRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUBRowDeleted As OTHER_EXINITIALSUBRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXINITIALSUBRow(ByVal row As OTHER_EXINITIALSUBRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXINITIALSUBRow(ByVal EXOIS_KEY As Integer, ByVal EXOIS_SOURCENO As Integer, ByVal EXOIS_DESC As String, ByVal EXOIS_AMOUNT As Decimal, ByVal EXOIS_DEDUCTIBLE As Boolean, ByVal EXOIS_NOTE As String, ByVal EXOIS_DETAIL As String, ByVal EXOIS_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXINITIALSUBRow
            Dim rowOTHER_EXINITIALSUBRow As OTHER_EXINITIALSUBRow = CType(Me.NewRow,OTHER_EXINITIALSUBRow)
            Dim columnValuesArray() As Object = New Object() {EXOIS_KEY, Nothing, EXOIS_SOURCENO, EXOIS_DESC, EXOIS_AMOUNT, EXOIS_DEDUCTIBLE, EXOIS_NOTE, EXOIS_DETAIL, EXOIS_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXINITIALSUBRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXINITIALSUBRow)
            Return rowOTHER_EXINITIALSUBRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOIS_EXOISKEY(ByVal EXOIS_EXOISKEY As Integer) As OTHER_EXINITIALSUBRow
            Return CType(Me.Rows.Find(New Object() {EXOIS_EXOISKEY}),OTHER_EXINITIALSUBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXINITIALSUBDataTable = CType(MyBase.Clone,OTHER_EXINITIALSUBDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXINITIALSUBDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOIS_KEY = MyBase.Columns("EXOIS_KEY")
            Me.columnEXOIS_EXOISKEY = MyBase.Columns("EXOIS_EXOISKEY")
            Me.columnEXOIS_SOURCENO = MyBase.Columns("EXOIS_SOURCENO")
            Me.columnEXOIS_DESC = MyBase.Columns("EXOIS_DESC")
            Me.columnEXOIS_AMOUNT = MyBase.Columns("EXOIS_AMOUNT")
            Me.columnEXOIS_DEDUCTIBLE = MyBase.Columns("EXOIS_DEDUCTIBLE")
            Me.columnEXOIS_NOTE = MyBase.Columns("EXOIS_NOTE")
            Me.columnEXOIS_DETAIL = MyBase.Columns("EXOIS_DETAIL")
            Me.columnEXOIS_DEDUCTIBLE_ADD = MyBase.Columns("EXOIS_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOIS_KEY = New Global.System.Data.DataColumn("EXOIS_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_KEY)
            Me.columnEXOIS_EXOISKEY = New Global.System.Data.DataColumn("EXOIS_EXOISKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_EXOISKEY)
            Me.columnEXOIS_SOURCENO = New Global.System.Data.DataColumn("EXOIS_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_SOURCENO)
            Me.columnEXOIS_DESC = New Global.System.Data.DataColumn("EXOIS_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_DESC)
            Me.columnEXOIS_AMOUNT = New Global.System.Data.DataColumn("EXOIS_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_AMOUNT)
            Me.columnEXOIS_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOIS_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_DEDUCTIBLE)
            Me.columnEXOIS_NOTE = New Global.System.Data.DataColumn("EXOIS_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_NOTE)
            Me.columnEXOIS_DETAIL = New Global.System.Data.DataColumn("EXOIS_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_DETAIL)
            Me.columnEXOIS_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOIS_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOIS_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOIS_EXOISKEY}, true))
            Me.columnEXOIS_EXOISKEY.AutoIncrement = true
            Me.columnEXOIS_EXOISKEY.AllowDBNull = false
            Me.columnEXOIS_EXOISKEY.Unique = true
            Me.columnEXOIS_DESC.MaxLength = 255
            Me.columnEXOIS_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOIS_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOIS_NOTE.MaxLength = 3000
            Me.columnEXOIS_DETAIL.MaxLength = 30
            Me.columnEXOIS_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXINITIALSUBRow() As OTHER_EXINITIALSUBRow
            Return CType(Me.NewRow,OTHER_EXINITIALSUBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXINITIALSUBRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXINITIALSUBRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXINITIALSUBRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUBRowChanged(Me, New OTHER_EXINITIALSUBRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXINITIALSUBRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUBRowChanging(Me, New OTHER_EXINITIALSUBRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXINITIALSUBRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUBRowDeleted(Me, New OTHER_EXINITIALSUBRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXINITIALSUBRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUBRowDeleting(Me, New OTHER_EXINITIALSUBRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUBRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXINITIALSUBRow(ByVal row As OTHER_EXINITIALSUBRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXINITIALSUBDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXINITIALSUB_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXINITIALSUB_DETAILRow)
        
        Private columnEXOISD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOISD_EXOISKEY As Global.System.Data.DataColumn
        
        Private columnEXOISD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOISD_EXOISDKEY As Global.System.Data.DataColumn
        
        Private columnEXOISD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOISD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOISD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOISD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOISD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXINITIALSUB_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_EXOISKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_EXOISKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_EXOISDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_EXOISDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOISD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOISD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXINITIALSUB_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXINITIALSUB_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUB_DETAILRowChanging As OTHER_EXINITIALSUB_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUB_DETAILRowChanged As OTHER_EXINITIALSUB_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUB_DETAILRowDeleting As OTHER_EXINITIALSUB_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXINITIALSUB_DETAILRowDeleted As OTHER_EXINITIALSUB_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXINITIALSUB_DETAILRow(ByVal row As OTHER_EXINITIALSUB_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXINITIALSUB_DETAILRow(ByVal EXOISD_KEY As Integer, ByVal parentOTHER_EXINITIALSUBRowByFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB As OTHER_EXINITIALSUBRow, ByVal EXOISD_SOURCENO As Integer, ByVal EXOISD_DESC As String, ByVal EXOISD_DEDUCTIBLE As Boolean, ByVal EXOISD_AMOUNT As Decimal, ByVal EXOISD_NOTE As String, ByVal EXOISD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXINITIALSUB_DETAILRow
            Dim rowOTHER_EXINITIALSUB_DETAILRow As OTHER_EXINITIALSUB_DETAILRow = CType(Me.NewRow,OTHER_EXINITIALSUB_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOISD_KEY, Nothing, EXOISD_SOURCENO, Nothing, EXOISD_DESC, EXOISD_DEDUCTIBLE, EXOISD_AMOUNT, EXOISD_NOTE, EXOISD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXINITIALSUBRowByFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXINITIALSUBRowByFK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB(1)
            End If
            rowOTHER_EXINITIALSUB_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXINITIALSUB_DETAILRow)
            Return rowOTHER_EXINITIALSUB_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOISD_EXOISDKEY(ByVal EXOISD_EXOISDKEY As Integer) As OTHER_EXINITIALSUB_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOISD_EXOISDKEY}),OTHER_EXINITIALSUB_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXINITIALSUB_DETAILDataTable = CType(MyBase.Clone,OTHER_EXINITIALSUB_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXINITIALSUB_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOISD_KEY = MyBase.Columns("EXOISD_KEY")
            Me.columnEXOISD_EXOISKEY = MyBase.Columns("EXOISD_EXOISKEY")
            Me.columnEXOISD_SOURCENO = MyBase.Columns("EXOISD_SOURCENO")
            Me.columnEXOISD_EXOISDKEY = MyBase.Columns("EXOISD_EXOISDKEY")
            Me.columnEXOISD_DESC = MyBase.Columns("EXOISD_DESC")
            Me.columnEXOISD_DEDUCTIBLE = MyBase.Columns("EXOISD_DEDUCTIBLE")
            Me.columnEXOISD_AMOUNT = MyBase.Columns("EXOISD_AMOUNT")
            Me.columnEXOISD_NOTE = MyBase.Columns("EXOISD_NOTE")
            Me.columnEXOISD_DEDUCTIBLE_ADD = MyBase.Columns("EXOISD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOISD_KEY = New Global.System.Data.DataColumn("EXOISD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_KEY)
            Me.columnEXOISD_EXOISKEY = New Global.System.Data.DataColumn("EXOISD_EXOISKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_EXOISKEY)
            Me.columnEXOISD_SOURCENO = New Global.System.Data.DataColumn("EXOISD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_SOURCENO)
            Me.columnEXOISD_EXOISDKEY = New Global.System.Data.DataColumn("EXOISD_EXOISDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_EXOISDKEY)
            Me.columnEXOISD_DESC = New Global.System.Data.DataColumn("EXOISD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_DESC)
            Me.columnEXOISD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOISD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_DEDUCTIBLE)
            Me.columnEXOISD_AMOUNT = New Global.System.Data.DataColumn("EXOISD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_AMOUNT)
            Me.columnEXOISD_NOTE = New Global.System.Data.DataColumn("EXOISD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_NOTE)
            Me.columnEXOISD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOISD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOISD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOISD_EXOISDKEY}, true))
            Me.columnEXOISD_EXOISDKEY.AutoIncrement = true
            Me.columnEXOISD_EXOISDKEY.AllowDBNull = false
            Me.columnEXOISD_EXOISDKEY.Unique = true
            Me.columnEXOISD_DESC.MaxLength = 255
            Me.columnEXOISD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOISD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOISD_NOTE.MaxLength = 3000
            Me.columnEXOISD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXINITIALSUB_DETAILRow() As OTHER_EXINITIALSUB_DETAILRow
            Return CType(Me.NewRow,OTHER_EXINITIALSUB_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXINITIALSUB_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXINITIALSUB_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXINITIALSUB_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUB_DETAILRowChanged(Me, New OTHER_EXINITIALSUB_DETAILRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUB_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXINITIALSUB_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUB_DETAILRowChanging(Me, New OTHER_EXINITIALSUB_DETAILRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUB_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXINITIALSUB_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUB_DETAILRowDeleted(Me, New OTHER_EXINITIALSUB_DETAILRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUB_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXINITIALSUB_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXINITIALSUB_DETAILRowDeleting(Me, New OTHER_EXINITIALSUB_DETAILRowChangeEvent(CType(e.Row,OTHER_EXINITIALSUB_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXINITIALSUB_DETAILRow(ByVal row As OTHER_EXINITIALSUB_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXINITIALSUB_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXCAPITALEXPDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXCAPITALEXPRow)
        
        Private columnEXOCE_KEY As Global.System.Data.DataColumn
        
        Private columnEXOCE_EXOCEKEY As Global.System.Data.DataColumn
        
        Private columnEXOCE_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOCE_DESC As Global.System.Data.DataColumn
        
        Private columnEXOCE_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOCE_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOCE_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOCE_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXOCE_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXCAPITALEXP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_EXOCEKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_EXOCEKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCE_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCE_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXCAPITALEXPRow
            Get
                Return CType(Me.Rows(index),OTHER_EXCAPITALEXPRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXPRowChanging As OTHER_EXCAPITALEXPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXPRowChanged As OTHER_EXCAPITALEXPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXPRowDeleting As OTHER_EXCAPITALEXPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXPRowDeleted As OTHER_EXCAPITALEXPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXCAPITALEXPRow(ByVal row As OTHER_EXCAPITALEXPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXCAPITALEXPRow(ByVal EXOCE_KEY As Integer, ByVal EXOCE_SOURCENO As Integer, ByVal EXOCE_DESC As String, ByVal EXOCE_AMOUNT As Decimal, ByVal EXOCE_DEDUCTIBLE As Boolean, ByVal EXOCE_NOTE As String, ByVal EXOCE_DETAIL As String, ByVal EXOCE_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXCAPITALEXPRow
            Dim rowOTHER_EXCAPITALEXPRow As OTHER_EXCAPITALEXPRow = CType(Me.NewRow,OTHER_EXCAPITALEXPRow)
            Dim columnValuesArray() As Object = New Object() {EXOCE_KEY, Nothing, EXOCE_SOURCENO, EXOCE_DESC, EXOCE_AMOUNT, EXOCE_DEDUCTIBLE, EXOCE_NOTE, EXOCE_DETAIL, EXOCE_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXCAPITALEXPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXCAPITALEXPRow)
            Return rowOTHER_EXCAPITALEXPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOCE_EXOCEKEY(ByVal EXOCE_EXOCEKEY As Integer) As OTHER_EXCAPITALEXPRow
            Return CType(Me.Rows.Find(New Object() {EXOCE_EXOCEKEY}),OTHER_EXCAPITALEXPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXCAPITALEXPDataTable = CType(MyBase.Clone,OTHER_EXCAPITALEXPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXCAPITALEXPDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOCE_KEY = MyBase.Columns("EXOCE_KEY")
            Me.columnEXOCE_EXOCEKEY = MyBase.Columns("EXOCE_EXOCEKEY")
            Me.columnEXOCE_SOURCENO = MyBase.Columns("EXOCE_SOURCENO")
            Me.columnEXOCE_DESC = MyBase.Columns("EXOCE_DESC")
            Me.columnEXOCE_AMOUNT = MyBase.Columns("EXOCE_AMOUNT")
            Me.columnEXOCE_DEDUCTIBLE = MyBase.Columns("EXOCE_DEDUCTIBLE")
            Me.columnEXOCE_NOTE = MyBase.Columns("EXOCE_NOTE")
            Me.columnEXOCE_DETAIL = MyBase.Columns("EXOCE_DETAIL")
            Me.columnEXOCE_DEDUCTIBLE_ADD = MyBase.Columns("EXOCE_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOCE_KEY = New Global.System.Data.DataColumn("EXOCE_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_KEY)
            Me.columnEXOCE_EXOCEKEY = New Global.System.Data.DataColumn("EXOCE_EXOCEKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_EXOCEKEY)
            Me.columnEXOCE_SOURCENO = New Global.System.Data.DataColumn("EXOCE_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_SOURCENO)
            Me.columnEXOCE_DESC = New Global.System.Data.DataColumn("EXOCE_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_DESC)
            Me.columnEXOCE_AMOUNT = New Global.System.Data.DataColumn("EXOCE_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_AMOUNT)
            Me.columnEXOCE_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOCE_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_DEDUCTIBLE)
            Me.columnEXOCE_NOTE = New Global.System.Data.DataColumn("EXOCE_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_NOTE)
            Me.columnEXOCE_DETAIL = New Global.System.Data.DataColumn("EXOCE_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_DETAIL)
            Me.columnEXOCE_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOCE_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCE_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOCE_EXOCEKEY}, true))
            Me.columnEXOCE_EXOCEKEY.AutoIncrement = true
            Me.columnEXOCE_EXOCEKEY.AllowDBNull = false
            Me.columnEXOCE_EXOCEKEY.Unique = true
            Me.columnEXOCE_DESC.MaxLength = 255
            Me.columnEXOCE_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOCE_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOCE_NOTE.MaxLength = 3000
            Me.columnEXOCE_DETAIL.MaxLength = 30
            Me.columnEXOCE_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXCAPITALEXPRow() As OTHER_EXCAPITALEXPRow
            Return CType(Me.NewRow,OTHER_EXCAPITALEXPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXCAPITALEXPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXCAPITALEXPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXCAPITALEXPRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXPRowChanged(Me, New OTHER_EXCAPITALEXPRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXCAPITALEXPRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXPRowChanging(Me, New OTHER_EXCAPITALEXPRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXCAPITALEXPRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXPRowDeleted(Me, New OTHER_EXCAPITALEXPRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXCAPITALEXPRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXPRowDeleting(Me, New OTHER_EXCAPITALEXPRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXCAPITALEXPRow(ByVal row As OTHER_EXCAPITALEXPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXCAPITALEXPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXCAPITALEXP_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXCAPITALEXP_DETAILRow)
        
        Private columnEXOCED_KEY As Global.System.Data.DataColumn
        
        Private columnEXOCED_EXOCEKEY As Global.System.Data.DataColumn
        
        Private columnEXOCED_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOCED_EXOCEDKEY As Global.System.Data.DataColumn
        
        Private columnEXOCED_DESC As Global.System.Data.DataColumn
        
        Private columnEXOCED_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOCED_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOCED_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOCED_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXCAPITALEXP_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_EXOCEKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_EXOCEKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_EXOCEDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_EXOCEDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOCED_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOCED_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXCAPITALEXP_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXCAPITALEXP_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXP_DETAILRowChanging As OTHER_EXCAPITALEXP_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXP_DETAILRowChanged As OTHER_EXCAPITALEXP_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXP_DETAILRowDeleting As OTHER_EXCAPITALEXP_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXCAPITALEXP_DETAILRowDeleted As OTHER_EXCAPITALEXP_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXCAPITALEXP_DETAILRow(ByVal row As OTHER_EXCAPITALEXP_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXCAPITALEXP_DETAILRow(ByVal EXOCED_KEY As Integer, ByVal parentOTHER_EXCAPITALEXPRowByFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL As OTHER_EXCAPITALEXPRow, ByVal EXOCED_SOURCENO As Integer, ByVal EXOCED_DESC As String, ByVal EXOCED_DEDUCTIBLE As Boolean, ByVal EXOCED_AMOUNT As Decimal, ByVal EXOCED_NOTE As String, ByVal EXOCED_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXCAPITALEXP_DETAILRow
            Dim rowOTHER_EXCAPITALEXP_DETAILRow As OTHER_EXCAPITALEXP_DETAILRow = CType(Me.NewRow,OTHER_EXCAPITALEXP_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOCED_KEY, Nothing, EXOCED_SOURCENO, Nothing, EXOCED_DESC, EXOCED_DEDUCTIBLE, EXOCED_AMOUNT, EXOCED_NOTE, EXOCED_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXCAPITALEXPRowByFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXCAPITALEXPRowByFK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL(1)
            End If
            rowOTHER_EXCAPITALEXP_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXCAPITALEXP_DETAILRow)
            Return rowOTHER_EXCAPITALEXP_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOCED_EXOCEDKEY(ByVal EXOCED_EXOCEDKEY As Integer) As OTHER_EXCAPITALEXP_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOCED_EXOCEDKEY}),OTHER_EXCAPITALEXP_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXCAPITALEXP_DETAILDataTable = CType(MyBase.Clone,OTHER_EXCAPITALEXP_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXCAPITALEXP_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOCED_KEY = MyBase.Columns("EXOCED_KEY")
            Me.columnEXOCED_EXOCEKEY = MyBase.Columns("EXOCED_EXOCEKEY")
            Me.columnEXOCED_SOURCENO = MyBase.Columns("EXOCED_SOURCENO")
            Me.columnEXOCED_EXOCEDKEY = MyBase.Columns("EXOCED_EXOCEDKEY")
            Me.columnEXOCED_DESC = MyBase.Columns("EXOCED_DESC")
            Me.columnEXOCED_DEDUCTIBLE = MyBase.Columns("EXOCED_DEDUCTIBLE")
            Me.columnEXOCED_AMOUNT = MyBase.Columns("EXOCED_AMOUNT")
            Me.columnEXOCED_NOTE = MyBase.Columns("EXOCED_NOTE")
            Me.columnEXOCED_DEDUCTIBLE_ADD = MyBase.Columns("EXOCED_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOCED_KEY = New Global.System.Data.DataColumn("EXOCED_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_KEY)
            Me.columnEXOCED_EXOCEKEY = New Global.System.Data.DataColumn("EXOCED_EXOCEKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_EXOCEKEY)
            Me.columnEXOCED_SOURCENO = New Global.System.Data.DataColumn("EXOCED_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_SOURCENO)
            Me.columnEXOCED_EXOCEDKEY = New Global.System.Data.DataColumn("EXOCED_EXOCEDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_EXOCEDKEY)
            Me.columnEXOCED_DESC = New Global.System.Data.DataColumn("EXOCED_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_DESC)
            Me.columnEXOCED_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOCED_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_DEDUCTIBLE)
            Me.columnEXOCED_AMOUNT = New Global.System.Data.DataColumn("EXOCED_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_AMOUNT)
            Me.columnEXOCED_NOTE = New Global.System.Data.DataColumn("EXOCED_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_NOTE)
            Me.columnEXOCED_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOCED_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOCED_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOCED_EXOCEDKEY}, true))
            Me.columnEXOCED_EXOCEDKEY.AutoIncrement = true
            Me.columnEXOCED_EXOCEDKEY.AllowDBNull = false
            Me.columnEXOCED_EXOCEDKEY.Unique = true
            Me.columnEXOCED_DESC.MaxLength = 255
            Me.columnEXOCED_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOCED_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOCED_NOTE.MaxLength = 3000
            Me.columnEXOCED_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXCAPITALEXP_DETAILRow() As OTHER_EXCAPITALEXP_DETAILRow
            Return CType(Me.NewRow,OTHER_EXCAPITALEXP_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXCAPITALEXP_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXCAPITALEXP_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXCAPITALEXP_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXP_DETAILRowChanged(Me, New OTHER_EXCAPITALEXP_DETAILRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXP_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXCAPITALEXP_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXP_DETAILRowChanging(Me, New OTHER_EXCAPITALEXP_DETAILRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXP_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXCAPITALEXP_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXP_DETAILRowDeleted(Me, New OTHER_EXCAPITALEXP_DETAILRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXP_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXCAPITALEXP_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXCAPITALEXP_DETAILRowDeleting(Me, New OTHER_EXCAPITALEXP_DETAILRowChangeEvent(CType(e.Row,OTHER_EXCAPITALEXP_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXCAPITALEXP_DETAILRow(ByVal row As OTHER_EXCAPITALEXP_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXCAPITALEXP_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXPENSESDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXPENSESRow)
        
        Private columnEXO_KEY As Global.System.Data.DataColumn
        
        Private columnEXO_EXOKEY As Global.System.Data.DataColumn
        
        Private columnEXO_DESC As Global.System.Data.DataColumn
        
        Private columnEXO_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXO_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXO_NOTE As Global.System.Data.DataColumn
        
        Private columnEXO_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXO_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXO_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXPENSES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_EXOKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_EXOKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXO_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXO_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXPENSESRow
            Get
                Return CType(Me.Rows(index),OTHER_EXPENSESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSESRowChanging As OTHER_EXPENSESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSESRowChanged As OTHER_EXPENSESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSESRowDeleting As OTHER_EXPENSESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSESRowDeleted As OTHER_EXPENSESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXPENSESRow(ByVal row As OTHER_EXPENSESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXPENSESRow(ByVal EXO_KEY As Integer, ByVal EXO_DESC As String, ByVal EXO_AMOUNT As Decimal, ByVal EXO_DEDUCTIBLE As Boolean, ByVal EXO_NOTE As String, ByVal EXO_SOURCENO As Integer, ByVal EXO_DETAIL As String, ByVal EXO_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXPENSESRow
            Dim rowOTHER_EXPENSESRow As OTHER_EXPENSESRow = CType(Me.NewRow,OTHER_EXPENSESRow)
            Dim columnValuesArray() As Object = New Object() {EXO_KEY, Nothing, EXO_DESC, EXO_AMOUNT, EXO_DEDUCTIBLE, EXO_NOTE, EXO_SOURCENO, EXO_DETAIL, EXO_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            rowOTHER_EXPENSESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXPENSESRow)
            Return rowOTHER_EXPENSESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXO_EXOKEY(ByVal EXO_EXOKEY As Integer) As OTHER_EXPENSESRow
            Return CType(Me.Rows.Find(New Object() {EXO_EXOKEY}),OTHER_EXPENSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXPENSESDataTable = CType(MyBase.Clone,OTHER_EXPENSESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXPENSESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXO_KEY = MyBase.Columns("EXO_KEY")
            Me.columnEXO_EXOKEY = MyBase.Columns("EXO_EXOKEY")
            Me.columnEXO_DESC = MyBase.Columns("EXO_DESC")
            Me.columnEXO_AMOUNT = MyBase.Columns("EXO_AMOUNT")
            Me.columnEXO_DEDUCTIBLE = MyBase.Columns("EXO_DEDUCTIBLE")
            Me.columnEXO_NOTE = MyBase.Columns("EXO_NOTE")
            Me.columnEXO_SOURCENO = MyBase.Columns("EXO_SOURCENO")
            Me.columnEXO_DETAIL = MyBase.Columns("EXO_DETAIL")
            Me.columnEXO_DEDUCTIBLE_ADD = MyBase.Columns("EXO_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXO_KEY = New Global.System.Data.DataColumn("EXO_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_KEY)
            Me.columnEXO_EXOKEY = New Global.System.Data.DataColumn("EXO_EXOKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_EXOKEY)
            Me.columnEXO_DESC = New Global.System.Data.DataColumn("EXO_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_DESC)
            Me.columnEXO_AMOUNT = New Global.System.Data.DataColumn("EXO_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_AMOUNT)
            Me.columnEXO_DEDUCTIBLE = New Global.System.Data.DataColumn("EXO_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_DEDUCTIBLE)
            Me.columnEXO_NOTE = New Global.System.Data.DataColumn("EXO_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_NOTE)
            Me.columnEXO_SOURCENO = New Global.System.Data.DataColumn("EXO_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_SOURCENO)
            Me.columnEXO_DETAIL = New Global.System.Data.DataColumn("EXO_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_DETAIL)
            Me.columnEXO_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXO_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXO_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXO_EXOKEY}, true))
            Me.columnEXO_EXOKEY.AutoIncrement = true
            Me.columnEXO_EXOKEY.AllowDBNull = false
            Me.columnEXO_EXOKEY.Unique = true
            Me.columnEXO_DESC.MaxLength = 255
            Me.columnEXO_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXO_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXO_NOTE.MaxLength = 3000
            Me.columnEXO_DETAIL.MaxLength = 30
            Me.columnEXO_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXPENSESRow() As OTHER_EXPENSESRow
            Return CType(Me.NewRow,OTHER_EXPENSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXPENSESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXPENSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXPENSESRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSESRowChanged(Me, New OTHER_EXPENSESRowChangeEvent(CType(e.Row,OTHER_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXPENSESRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSESRowChanging(Me, New OTHER_EXPENSESRowChangeEvent(CType(e.Row,OTHER_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXPENSESRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSESRowDeleted(Me, New OTHER_EXPENSESRowChangeEvent(CType(e.Row,OTHER_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXPENSESRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSESRowDeleting(Me, New OTHER_EXPENSESRowChangeEvent(CType(e.Row,OTHER_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXPENSESRow(ByVal row As OTHER_EXPENSESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXPENSESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OTHER_EXPENSES_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of OTHER_EXPENSES_DETAILRow)
        
        Private columnEXOD_KEY As Global.System.Data.DataColumn
        
        Private columnEXOD_EXOKEY As Global.System.Data.DataColumn
        
        Private columnEXOD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXOD_EXODKEY As Global.System.Data.DataColumn
        
        Private columnEXOD_DESC As Global.System.Data.DataColumn
        
        Private columnEXOD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXOD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXOD_NOTE As Global.System.Data.DataColumn
        
        Private columnEXOD_DEDUCTIBLE_ADD As Global.System.Data.DataColumn
        
        Private columnRowIndex As Global.System.Data.DataColumn
        
        Private columnPecentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OTHER_EXPENSES_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_EXOKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_EXOKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_EXODKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_EXODKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXOD_DEDUCTIBLE_ADDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXOD_DEDUCTIBLE_ADD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RowIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRowIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PecentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPecentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OTHER_EXPENSES_DETAILRow
            Get
                Return CType(Me.Rows(index),OTHER_EXPENSES_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSES_DETAILRowChanging As OTHER_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSES_DETAILRowChanged As OTHER_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSES_DETAILRowDeleting As OTHER_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event OTHER_EXPENSES_DETAILRowDeleted As OTHER_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddOTHER_EXPENSES_DETAILRow(ByVal row As OTHER_EXPENSES_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddOTHER_EXPENSES_DETAILRow(ByVal EXOD_KEY As Integer, ByVal parentOTHER_EXPENSESRowByFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL As OTHER_EXPENSESRow, ByVal EXOD_SOURCENO As Integer, ByVal EXOD_DESC As String, ByVal EXOD_DEDUCTIBLE As Boolean, ByVal EXOD_AMOUNT As Decimal, ByVal EXOD_NOTE As String, ByVal EXOD_DEDUCTIBLE_ADD As Boolean, ByVal RowIndex As Integer, ByVal Pecentage As Integer) As OTHER_EXPENSES_DETAILRow
            Dim rowOTHER_EXPENSES_DETAILRow As OTHER_EXPENSES_DETAILRow = CType(Me.NewRow,OTHER_EXPENSES_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXOD_KEY, Nothing, EXOD_SOURCENO, Nothing, EXOD_DESC, EXOD_DEDUCTIBLE, EXOD_AMOUNT, EXOD_NOTE, EXOD_DEDUCTIBLE_ADD, RowIndex, Pecentage}
            If (Not (parentOTHER_EXPENSESRowByFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentOTHER_EXPENSESRowByFK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL(1)
            End If
            rowOTHER_EXPENSES_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOTHER_EXPENSES_DETAILRow)
            Return rowOTHER_EXPENSES_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXOD_EXODKEY(ByVal EXOD_EXODKEY As Integer) As OTHER_EXPENSES_DETAILRow
            Return CType(Me.Rows.Find(New Object() {EXOD_EXODKEY}),OTHER_EXPENSES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OTHER_EXPENSES_DETAILDataTable = CType(MyBase.Clone,OTHER_EXPENSES_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OTHER_EXPENSES_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXOD_KEY = MyBase.Columns("EXOD_KEY")
            Me.columnEXOD_EXOKEY = MyBase.Columns("EXOD_EXOKEY")
            Me.columnEXOD_SOURCENO = MyBase.Columns("EXOD_SOURCENO")
            Me.columnEXOD_EXODKEY = MyBase.Columns("EXOD_EXODKEY")
            Me.columnEXOD_DESC = MyBase.Columns("EXOD_DESC")
            Me.columnEXOD_DEDUCTIBLE = MyBase.Columns("EXOD_DEDUCTIBLE")
            Me.columnEXOD_AMOUNT = MyBase.Columns("EXOD_AMOUNT")
            Me.columnEXOD_NOTE = MyBase.Columns("EXOD_NOTE")
            Me.columnEXOD_DEDUCTIBLE_ADD = MyBase.Columns("EXOD_DEDUCTIBLE_ADD")
            Me.columnRowIndex = MyBase.Columns("RowIndex")
            Me.columnPecentage = MyBase.Columns("Pecentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXOD_KEY = New Global.System.Data.DataColumn("EXOD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_KEY)
            Me.columnEXOD_EXOKEY = New Global.System.Data.DataColumn("EXOD_EXOKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_EXOKEY)
            Me.columnEXOD_SOURCENO = New Global.System.Data.DataColumn("EXOD_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_SOURCENO)
            Me.columnEXOD_EXODKEY = New Global.System.Data.DataColumn("EXOD_EXODKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_EXODKEY)
            Me.columnEXOD_DESC = New Global.System.Data.DataColumn("EXOD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_DESC)
            Me.columnEXOD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXOD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_DEDUCTIBLE)
            Me.columnEXOD_AMOUNT = New Global.System.Data.DataColumn("EXOD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_AMOUNT)
            Me.columnEXOD_NOTE = New Global.System.Data.DataColumn("EXOD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_NOTE)
            Me.columnEXOD_DEDUCTIBLE_ADD = New Global.System.Data.DataColumn("EXOD_DEDUCTIBLE_ADD", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXOD_DEDUCTIBLE_ADD)
            Me.columnRowIndex = New Global.System.Data.DataColumn("RowIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRowIndex)
            Me.columnPecentage = New Global.System.Data.DataColumn("Pecentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPecentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXOD_EXODKEY}, true))
            Me.columnEXOD_EXODKEY.AutoIncrement = true
            Me.columnEXOD_EXODKEY.AllowDBNull = false
            Me.columnEXOD_EXODKEY.Unique = true
            Me.columnEXOD_DESC.MaxLength = 255
            Me.columnEXOD_DEDUCTIBLE.DefaultValue = CType(false,Boolean)
            Me.columnEXOD_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnEXOD_NOTE.MaxLength = 3000
            Me.columnEXOD_DEDUCTIBLE_ADD.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewOTHER_EXPENSES_DETAILRow() As OTHER_EXPENSES_DETAILRow
            Return CType(Me.NewRow,OTHER_EXPENSES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OTHER_EXPENSES_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OTHER_EXPENSES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OTHER_EXPENSES_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSES_DETAILRowChanged(Me, New OTHER_EXPENSES_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OTHER_EXPENSES_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSES_DETAILRowChanging(Me, New OTHER_EXPENSES_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OTHER_EXPENSES_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSES_DETAILRowDeleted(Me, New OTHER_EXPENSES_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OTHER_EXPENSES_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent OTHER_EXPENSES_DETAILRowDeleting(Me, New OTHER_EXPENSES_DETAILRowChangeEvent(CType(e.Row,OTHER_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveOTHER_EXPENSES_DETAILRow(ByVal row As OTHER_EXPENSES_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OTHER_EXPENSES_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RENTAL_INCOMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of RENTAL_INCOMERow)
        
        Private columnRI_KEY As Global.System.Data.DataColumn
        
        Private columnRI_RENTKEY As Global.System.Data.DataColumn
        
        Private columnRI_TYPE As Global.System.Data.DataColumn
        
        Private columnRI_ADDRESS As Global.System.Data.DataColumn
        
        Private columnRI_DATE As Global.System.Data.DataColumn
        
        Private columnRI_AMOUNT As Global.System.Data.DataColumn
        
        Private columnRI_SOURCENO As Global.System.Data.DataColumn
        
        Private columnRI_STATUS4d As Global.System.Data.DataColumn
        
        Private columnRI_DATE_END As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RENTAL_INCOME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_RENTKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_RENTKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_STATUS4dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_STATUS4d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RI_DATE_ENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRI_DATE_END
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RENTAL_INCOMERow
            Get
                Return CType(Me.Rows(index),RENTAL_INCOMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RENTAL_INCOMERowChanging As RENTAL_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RENTAL_INCOMERowChanged As RENTAL_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RENTAL_INCOMERowDeleting As RENTAL_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RENTAL_INCOMERowDeleted As RENTAL_INCOMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRENTAL_INCOMERow(ByVal row As RENTAL_INCOMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRENTAL_INCOMERow(ByVal RI_KEY As Integer, ByVal RI_TYPE As String, ByVal RI_ADDRESS As String, ByVal RI_DATE As Date, ByVal RI_AMOUNT As Decimal, ByVal RI_SOURCENO As Integer, ByVal RI_STATUS4d As String, ByVal RI_DATE_END As Date) As RENTAL_INCOMERow
            Dim rowRENTAL_INCOMERow As RENTAL_INCOMERow = CType(Me.NewRow,RENTAL_INCOMERow)
            Dim columnValuesArray() As Object = New Object() {RI_KEY, Nothing, RI_TYPE, RI_ADDRESS, RI_DATE, RI_AMOUNT, RI_SOURCENO, RI_STATUS4d, RI_DATE_END}
            rowRENTAL_INCOMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRENTAL_INCOMERow)
            Return rowRENTAL_INCOMERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByRI_RENTKEY(ByVal RI_RENTKEY As Integer) As RENTAL_INCOMERow
            Return CType(Me.Rows.Find(New Object() {RI_RENTKEY}),RENTAL_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RENTAL_INCOMEDataTable = CType(MyBase.Clone,RENTAL_INCOMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RENTAL_INCOMEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRI_KEY = MyBase.Columns("RI_KEY")
            Me.columnRI_RENTKEY = MyBase.Columns("RI_RENTKEY")
            Me.columnRI_TYPE = MyBase.Columns("RI_TYPE")
            Me.columnRI_ADDRESS = MyBase.Columns("RI_ADDRESS")
            Me.columnRI_DATE = MyBase.Columns("RI_DATE")
            Me.columnRI_AMOUNT = MyBase.Columns("RI_AMOUNT")
            Me.columnRI_SOURCENO = MyBase.Columns("RI_SOURCENO")
            Me.columnRI_STATUS4d = MyBase.Columns("RI_STATUS4d")
            Me.columnRI_DATE_END = MyBase.Columns("RI_DATE_END")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRI_KEY = New Global.System.Data.DataColumn("RI_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_KEY)
            Me.columnRI_RENTKEY = New Global.System.Data.DataColumn("RI_RENTKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_RENTKEY)
            Me.columnRI_TYPE = New Global.System.Data.DataColumn("RI_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_TYPE)
            Me.columnRI_ADDRESS = New Global.System.Data.DataColumn("RI_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_ADDRESS)
            Me.columnRI_DATE = New Global.System.Data.DataColumn("RI_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_DATE)
            Me.columnRI_AMOUNT = New Global.System.Data.DataColumn("RI_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_AMOUNT)
            Me.columnRI_SOURCENO = New Global.System.Data.DataColumn("RI_SOURCENO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_SOURCENO)
            Me.columnRI_STATUS4d = New Global.System.Data.DataColumn("RI_STATUS4d", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_STATUS4d)
            Me.columnRI_DATE_END = New Global.System.Data.DataColumn("RI_DATE_END", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRI_DATE_END)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRI_RENTKEY}, true))
            Me.columnRI_RENTKEY.AutoIncrement = true
            Me.columnRI_RENTKEY.AllowDBNull = false
            Me.columnRI_RENTKEY.Unique = true
            Me.columnRI_TYPE.MaxLength = 255
            Me.columnRI_ADDRESS.MaxLength = 3000
            Me.columnRI_AMOUNT.DefaultValue = CType(0D,Decimal)
            Me.columnRI_STATUS4d.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRENTAL_INCOMERow() As RENTAL_INCOMERow
            Return CType(Me.NewRow,RENTAL_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RENTAL_INCOMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RENTAL_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RENTAL_INCOMERowChangedEvent) Is Nothing) Then
                RaiseEvent RENTAL_INCOMERowChanged(Me, New RENTAL_INCOMERowChangeEvent(CType(e.Row,RENTAL_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RENTAL_INCOMERowChangingEvent) Is Nothing) Then
                RaiseEvent RENTAL_INCOMERowChanging(Me, New RENTAL_INCOMERowChangeEvent(CType(e.Row,RENTAL_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RENTAL_INCOMERowDeletedEvent) Is Nothing) Then
                RaiseEvent RENTAL_INCOMERowDeleted(Me, New RENTAL_INCOMERowChangeEvent(CType(e.Row,RENTAL_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RENTAL_INCOMERowDeletingEvent) Is Nothing) Then
                RaiseEvent RENTAL_INCOMERowDeleting(Me, New RENTAL_INCOMERowChangeEvent(CType(e.Row,RENTAL_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRENTAL_INCOMERow(ByVal row As RENTAL_INCOMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RENTAL_INCOMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NonAllowable_ExpensesDataTable
        Inherits Global.System.Data.TypedTableBase(Of NonAllowable_ExpensesRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnKeyName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnTitleKeyName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "NonAllowable_Expenses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KeyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TitleKeyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitleKeyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NonAllowable_ExpensesRow
            Get
                Return CType(Me.Rows(index),NonAllowable_ExpensesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NonAllowable_ExpensesRowChanging As NonAllowable_ExpensesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NonAllowable_ExpensesRowChanged As NonAllowable_ExpensesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NonAllowable_ExpensesRowDeleting As NonAllowable_ExpensesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event NonAllowable_ExpensesRowDeleted As NonAllowable_ExpensesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddNonAllowable_ExpensesRow(ByVal row As NonAllowable_ExpensesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddNonAllowable_ExpensesRow(ByVal ID As String, ByVal KeyName As String, ByVal Description As String, ByVal Amount As Decimal, ByVal TitleKeyName As String) As NonAllowable_ExpensesRow
            Dim rowNonAllowable_ExpensesRow As NonAllowable_ExpensesRow = CType(Me.NewRow,NonAllowable_ExpensesRow)
            Dim columnValuesArray() As Object = New Object() {ID, KeyName, Description, Amount, TitleKeyName}
            rowNonAllowable_ExpensesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNonAllowable_ExpensesRow)
            Return rowNonAllowable_ExpensesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NonAllowable_ExpensesDataTable = CType(MyBase.Clone,NonAllowable_ExpensesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NonAllowable_ExpensesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnKeyName = MyBase.Columns("KeyName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnTitleKeyName = MyBase.Columns("TitleKeyName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnKeyName = New Global.System.Data.DataColumn("KeyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnTitleKeyName = New Global.System.Data.DataColumn("TitleKeyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitleKeyName)
            Me.columnAmount.DefaultValue = CType(0D,Decimal)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewNonAllowable_ExpensesRow() As NonAllowable_ExpensesRow
            Return CType(Me.NewRow,NonAllowable_ExpensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NonAllowable_ExpensesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NonAllowable_ExpensesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NonAllowable_ExpensesRowChangedEvent) Is Nothing) Then
                RaiseEvent NonAllowable_ExpensesRowChanged(Me, New NonAllowable_ExpensesRowChangeEvent(CType(e.Row,NonAllowable_ExpensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NonAllowable_ExpensesRowChangingEvent) Is Nothing) Then
                RaiseEvent NonAllowable_ExpensesRowChanging(Me, New NonAllowable_ExpensesRowChangeEvent(CType(e.Row,NonAllowable_ExpensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NonAllowable_ExpensesRowDeletedEvent) Is Nothing) Then
                RaiseEvent NonAllowable_ExpensesRowDeleted(Me, New NonAllowable_ExpensesRowChangeEvent(CType(e.Row,NonAllowable_ExpensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NonAllowable_ExpensesRowDeletingEvent) Is Nothing) Then
                RaiseEvent NonAllowable_ExpensesRowDeleting(Me, New NonAllowable_ExpensesRowChangeEvent(CType(e.Row,NonAllowable_ExpensesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveNonAllowable_ExpensesRow(ByVal row As NonAllowable_ExpensesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NonAllowable_ExpensesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_SALES_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_SALES_DETAIL As PLFST_SALES_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_SALES_DETAIL = CType(Me.Table,PLFST_SALES_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_KEY' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_PLFSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_PLFSKEY' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_SOURCENO' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_PLFSDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_PLFSDKEY' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_DESC' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_AMOUNT' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFSD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES_DETAIL.PLFSD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFSD_NOTE' in table 'PLFST_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES_DETAIL.PLFSD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFST_SALESRow() As PLFST_SALESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PLFST_SALES_DETAIL_PLFST_SALES")),PLFST_SALESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PLFST_SALES_DETAIL_PLFST_SALES"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_KEYNull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_PLFSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_PLFSKEYNull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_SOURCENONull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_PLFSDKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_PLFSDKEYNull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_PLFSDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_DESCNull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_AMOUNTNull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFSD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES_DETAIL.PLFSD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFSD_NOTENull()
            Me(Me.tablePLFST_SALES_DETAIL.PLFSD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_SALESRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_SALES As PLFST_SALESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_SALES = CType(Me.Table,PLFST_SALESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_KEY' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_PLFSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_PLFSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_PLFSKEY' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_PLFSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_SOURCENO' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_DESC' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_AMOUNT' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_NOTE' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFS_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_SALES.PLFS_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFS_DETAIL' in table 'PLFST_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_SALES.PLFS_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_KEYNull()
            Me(Me.tablePLFST_SALES.PLFS_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_PLFSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_PLFSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_PLFSKEYNull()
            Me(Me.tablePLFST_SALES.PLFS_PLFSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_SOURCENONull()
            Me(Me.tablePLFST_SALES.PLFS_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_DESCNull()
            Me(Me.tablePLFST_SALES.PLFS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_AMOUNTNull()
            Me(Me.tablePLFST_SALES.PLFS_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_NOTENull()
            Me(Me.tablePLFST_SALES.PLFS_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFS_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_SALES.PLFS_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFS_DETAILNull()
            Me(Me.tablePLFST_SALES.PLFS_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPLFST_SALES_DETAILRows() As PLFST_SALES_DETAILRow()
            If (Me.Table.ChildRelations("PLFST_SALES_DETAIL_PLFST_SALES") Is Nothing) Then
                Return New PLFST_SALES_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PLFST_SALES_DETAIL_PLFST_SALES")),PLFST_SALES_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BUSINESS_SOURCERow
        Inherits Global.System.Data.DataRow
        
        Private tableBUSINESS_SOURCE As BUSINESS_SOURCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBUSINESS_SOURCE = CType(Me.Table,BUSINESS_SOURCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BC_SOURCEKEY() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_SOURCEKEY' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BC_SOURCENO() As Long
            Get
                Try 
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_SOURCENO' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BC_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_CODE' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBUSINESS_SOURCE.BC_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BC_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableBUSINESS_SOURCE.BC_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BC_TYPE' in table 'BUSINESS_SOURCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBUSINESS_SOURCE.BC_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBC_SOURCEKEYNull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBC_SOURCEKEYNull()
            Me(Me.tableBUSINESS_SOURCE.BC_SOURCEKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBC_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBC_SOURCENONull()
            Me(Me.tableBUSINESS_SOURCE.BC_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBC_CODENull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBC_CODENull()
            Me(Me.tableBUSINESS_SOURCE.BC_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBC_TYPENull() As Boolean
            Return Me.IsNull(Me.tableBUSINESS_SOURCE.BC_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBC_TYPENull()
            Me(Me.tableBUSINESS_SOURCE.BC_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_OPENSTOCKRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_OPENSTOCK As PLFST_OPENSTOCKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_OPENSTOCK = CType(Me.Table,PLFST_OPENSTOCKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_KEY' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_PLFOSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_PLFOSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_PLFOSKEY' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_PLFOSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_SOURCENO' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_DESC' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_AMOUNT' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_NOTE' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOS_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK.PLFOS_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOS_DETAIL' in table 'PLFST_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK.PLFOS_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_KEYNull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_PLFOSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_PLFOSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_PLFOSKEYNull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_PLFOSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_SOURCENONull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_DESCNull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_AMOUNTNull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_NOTENull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOS_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK.PLFOS_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOS_DETAILNull()
            Me(Me.tablePLFST_OPENSTOCK.PLFOS_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPLFST_OPENSTOCK_DETAILRows() As PLFST_OPENSTOCK_DETAILRow()
            If (Me.Table.ChildRelations("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL") Is Nothing) Then
                Return New PLFST_OPENSTOCK_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL")),PLFST_OPENSTOCK_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_OPENSTOCK_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_OPENSTOCK_DETAIL As PLFST_OPENSTOCK_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_OPENSTOCK_DETAIL = CType(Me.Table,PLFST_OPENSTOCK_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_KEY() As Integer
            Get
                Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_PLFOSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOSD_PLFOSKEY' in table 'PLFST_OPENSTOCK_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOSD_SOURCENO' in table 'PLFST_OPENSTOCK_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_PLFOSDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOSD_PLFOSDKEY' in table 'PLFST_OPENSTOCK_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOSD_DESC' in table 'PLFST_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOSD_AMOUNT' in table 'PLFST_OPENSTOCK_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFOSD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFOSD_NOTE' in table 'PLFST_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFST_OPENSTOCKRow() As PLFST_OPENSTOCKRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL")),PLFST_OPENSTOCKRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PLFST_OPENSTOCK_PLFST_OPENSTOCK_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOSD_PLFOSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOSD_PLFOSKEYNull()
            Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOSD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOSD_SOURCENONull()
            Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOSD_PLFOSDKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOSD_PLFOSDKEYNull()
            Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_PLFOSDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOSD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOSD_DESCNull()
            Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOSD_AMOUNTNull()
            Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFOSD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFOSD_NOTENull()
            Me(Me.tablePLFST_OPENSTOCK_DETAIL.PLFOSD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_PURCHASERow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_PURCHASE As PLFST_PURCHASEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_PURCHASE = CType(Me.Table,PLFST_PURCHASEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_KEY' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_PLFPURKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_PLFPURKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_PLFPURKEY' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_PLFPURKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_SOURCENO' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_DESC' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_AMOUNT' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_NOTE' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_DETAIL' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPUR_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE.PLFPUR_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPUR_DEDUCTIBLE' in table 'PLFST_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE.PLFPUR_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_KEYNull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_PLFPURKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_PLFPURKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_PLFPURKEYNull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_PLFPURKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_SOURCENONull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_DESCNull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_AMOUNTNull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_NOTENull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_DETAILNull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPUR_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE.PLFPUR_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPUR_DEDUCTIBLENull()
            Me(Me.tablePLFST_PURCHASE.PLFPUR_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPLFST_PURCHASE_DETAILRows() As PLFST_PURCHASE_DETAILRow()
            If (Me.Table.ChildRelations("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL") Is Nothing) Then
                Return New PLFST_PURCHASE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL")),PLFST_PURCHASE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_PURCHASE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_PURCHASE_DETAIL As PLFST_PURCHASE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_PURCHASE_DETAIL = CType(Me.Table,PLFST_PURCHASE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_KEY() As Integer
            Get
                Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_PLFPURKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_PLFPURKEY' in table 'PLFST_PURCHASE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_SOURCENO' in table 'PLFST_PURCHASE_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_PLFPURDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_PLFPURDKEY' in table 'PLFST_PURCHASE_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_DESC' in table 'PLFST_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_AMOUNT' in table 'PLFST_PURCHASE_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_NOTE' in table 'PLFST_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFPURD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFPURD_DEDUCTIBLE' in table 'PLFST_PURCHASE_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFST_PURCHASERow() As PLFST_PURCHASERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL")),PLFST_PURCHASERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PLFST_PURCHASE_PLFST_PURCHASE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_PLFPURKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_PLFPURKEYNull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_SOURCENONull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_PLFPURDKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_PLFPURDKEYNull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_PLFPURDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_DESCNull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_AMOUNTNull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_NOTENull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFPURD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFPURD_DEDUCTIBLENull()
            Me(Me.tablePLFST_PURCHASE_DETAIL.PLFPURD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_DEPRECIATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_DEPRECIATION As EXPENSES_DEPRECIATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_DEPRECIATION = CType(Me.Table,EXPENSES_DEPRECIATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_KEY' in table 'EXPENSES_DEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_EXDEPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_EXDEPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_EXDEPKEY' in table 'EXPENSES_DEPRECIATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_EXDEPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_SOURCENO' in table 'EXPENSES_DEPRECIATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_DESC' in table 'EXPENSES_DEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_AMOUNT' in table 'EXPENSES_DEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_DEDUCTIBLE' in table 'EXPENSES_DEPRECIATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_NOTE' in table 'EXPENSES_DEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEP_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEP_DETAIL' in table 'EXPENSES_DEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_KEYNull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_EXDEPKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_EXDEPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_EXDEPKEYNull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_EXDEPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_SOURCENONull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_DESCNull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_AMOUNTNull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_NOTENull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEP_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION.EXDEP_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEP_DETAILNull()
            Me(Me.tableEXPENSES_DEPRECIATION.EXDEP_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_DEPRECIATION_DETAILRows() As EXPENSES_DEPRECIATION_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL") Is Nothing) Then
                Return New EXPENSES_DEPRECIATION_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL")),EXPENSES_DEPRECIATION_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_DEPRECIATION_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_DEPRECIATION_DETAIL As EXPENSES_DEPRECIATION_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_DEPRECIATION_DETAIL = CType(Me.Table,EXPENSES_DEPRECIATION_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_KEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_EXDEPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_EXDEPKEY' in table 'EXPENSES_DEPRECIATION_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_SOURCENO' in table 'EXPENSES_DEPRECIATION_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_EXDEPDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_EXDEPDKEY' in table 'EXPENSES_DEPRECIATION_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_DESC' in table 'EXPENSES_DEPRECIATION_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_AMOUNT' in table 'EXPENSES_DEPRECIATION_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_DEDUCTIBLE' in table 'EXPENSES_DEPRECIATION_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDEPD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDEPD_NOTE' in table 'EXPENSES_DEPRECIATION_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_DEPRECIATIONRow() As EXPENSES_DEPRECIATIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL")),EXPENSES_DEPRECIATIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_DEPRECIATION_EXPENSES_DEPRECIATION_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_EXDEPKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_EXDEPKEYNull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_SOURCENONull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_EXDEPDKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_EXDEPDKEYNull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_EXDEPDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_DESCNull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_AMOUNTNull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDEPD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDEPD_NOTENull()
            Me(Me.tableEXPENSES_DEPRECIATION_DETAIL.EXDEPD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_ALLOWRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_ALLOW As EXPENSES_ALLOWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_ALLOW = CType(Me.Table,EXPENSES_ALLOWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_EXAKEY' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DEDUCTIBLE' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'EXPENSES_ALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tableEXPENSES_ALLOW.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_EXAKEYNull()
            Me(Me.tableEXPENSES_ALLOW.EXA_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tableEXPENSES_ALLOW.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tableEXPENSES_ALLOW.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tableEXPENSES_ALLOW.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_ALLOW.EXA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tableEXPENSES_ALLOW.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tableEXPENSES_ALLOW.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_ALLOW_DETAILRows() As EXPENSES_ALLOW_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL") Is Nothing) Then
                Return New EXPENSES_ALLOW_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL")),EXPENSES_ALLOW_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_ALLOW_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_ALLOW_DETAIL As EXPENSES_ALLOW_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_ALLOW_DETAIL = CType(Me.Table,EXPENSES_ALLOW_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'EXPENSES_ALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'EXPENSES_ALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'EXPENSES_ALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'EXPENSES_ALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'EXPENSES_ALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DEDUCTIBLE' in table 'EXPENSES_ALLOW_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'EXPENSES_ALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_ALLOWRow() As EXPENSES_ALLOWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL")),EXPENSES_ALLOWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_ALLOW_EXPENSES_ALLOW_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tableEXPENSES_ALLOW_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_NONALLOWRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_NONALLOW As EXPENSES_NONALLOWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_NONALLOW = CType(Me.Table,EXPENSES_NONALLOWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_KEY' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_EXNAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_EXNAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_EXNAKEY' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_EXNAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_SOURCENO' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_DESC' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_AMOUNT' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_DEDUCTIBLE' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_NOTE' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW.EXNA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNA_DETAIL' in table 'EXPENSES_NONALLOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW.EXNA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_KEYNull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_EXNAKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_EXNAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_EXNAKEYNull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_EXNAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_SOURCENONull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_DESCNull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_AMOUNTNull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_NOTENull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW.EXNA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNA_DETAILNull()
            Me(Me.tableEXPENSES_NONALLOW.EXNA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_NONALLOW_DETAILRows() As EXPENSES_NONALLOW_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL") Is Nothing) Then
                Return New EXPENSES_NONALLOW_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL")),EXPENSES_NONALLOW_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_NONALLOW_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_NONALLOW_DETAIL As EXPENSES_NONALLOW_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_NONALLOW_DETAIL = CType(Me.Table,EXPENSES_NONALLOW_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_KEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_EXNAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_EXNAKEY' in table 'EXPENSES_NONALLOW_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_SOURCENO' in table 'EXPENSES_NONALLOW_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_EXNADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_EXNADKEY' in table 'EXPENSES_NONALLOW_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_DESC' in table 'EXPENSES_NONALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_DEDUCTIBLE' in table 'EXPENSES_NONALLOW_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_AMOUNT' in table 'EXPENSES_NONALLOW_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXNAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXNAD_NOTE' in table 'EXPENSES_NONALLOW_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_NONALLOWRow() As EXPENSES_NONALLOWRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL")),EXPENSES_NONALLOWRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_NONALLOW_EXPENSES_NONALLOW_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_EXNAKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_EXNAKEYNull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_SOURCENONull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_EXNADKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_EXNADKEYNull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_EXNADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_DESCNull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_AMOUNTNull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXNAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXNAD_NOTENull()
            Me(Me.tableEXPENSES_NONALLOW_DETAIL.EXNAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_CLOSESTOCKRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_CLOSESTOCK As PLFST_CLOSESTOCKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_CLOSESTOCK = CType(Me.Table,PLFST_CLOSESTOCKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_KEY' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_PLFCSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_PLFCSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_PLFCSKEY' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_SOURCENO' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_DESC' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_AMOUNT' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_NOTE' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCS_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK.PLFCS_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCS_DETAIL' in table 'PLFST_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK.PLFCS_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_KEYNull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_PLFCSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_PLFCSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_PLFCSKEYNull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_PLFCSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_SOURCENONull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_DESCNull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_AMOUNTNull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_NOTENull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCS_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK.PLFCS_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCS_DETAILNull()
            Me(Me.tablePLFST_CLOSESTOCK.PLFCS_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPLFST_CLOSESTOCK_DETAILRows() As PLFST_CLOSESTOCK_DETAILRow()
            If (Me.Table.ChildRelations("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL") Is Nothing) Then
                Return New PLFST_CLOSESTOCK_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL")),PLFST_CLOSESTOCK_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLFST_CLOSESTOCK_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLFST_CLOSESTOCK_DETAIL As PLFST_CLOSESTOCK_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLFST_CLOSESTOCK_DETAIL = CType(Me.Table,PLFST_CLOSESTOCK_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_KEY() As Integer
            Get
                Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_PLFCSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCSD_PLFCSKEY' in table 'PLFST_CLOSESTOCK_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCSD_SOURCENO' in table 'PLFST_CLOSESTOCK_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_PLFCSDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCSD_PLFCSDKEY' in table 'PLFST_CLOSESTOCK_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCSD_DESC' in table 'PLFST_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCSD_AMOUNT' in table 'PLFST_CLOSESTOCK_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFCSD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLFCSD_NOTE' in table 'PLFST_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLFST_CLOSESTOCKRow() As PLFST_CLOSESTOCKRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL")),PLFST_CLOSESTOCKRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PLFST_CLOSESTOCK_PLFST_CLOSESTOCK_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCSD_PLFCSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCSD_PLFCSKEYNull()
            Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCSD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCSD_SOURCENONull()
            Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCSD_PLFCSDKEYNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCSD_PLFCSDKEYNull()
            Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_PLFCSDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCSD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCSD_DESCNull()
            Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCSD_AMOUNTNull()
            Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLFCSD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLFCSD_NOTENull()
            Me(Me.tablePLFST_CLOSESTOCK_DETAIL.PLFCSD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class NONSOURCE_BUSINESSINCOMERow
        Inherits Global.System.Data.DataRow
        
        Private tableNONSOURCE_BUSINESSINCOME As NONSOURCE_BUSINESSINCOMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNONSOURCE_BUSINESSINCOME = CType(Me.Table,NONSOURCE_BUSINESSINCOMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBI_KEY' in table 'NONSOURCE_BUSINESSINCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_NSBIKEY() As Integer
            Get
                Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NSBIKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NSBIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBI_DESC' in table 'NONSOURCE_BUSINESSINCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBI_AMOUNT' in table 'NONSOURCE_BUSINESSINCOME' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBI_NOTE' in table 'NONSOURCE_BUSINESSINCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBI_DETAIL' in table 'NONSOURCE_BUSINESSINCOME' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBI_SOURCENO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_SOURCENOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBI_SOURCENO' in table 'NONSOURCE_BUSINESSINCOME' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBI_KEYNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBI_DESCNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBI_DESCNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBI_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBI_AMOUNTNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBI_NOTENull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBI_NOTENull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBI_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBI_DETAILNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBI_SOURCENONull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME.NSBI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetNONSOURCE_BUSINESSINCOME_DETAILRows() As NONSOURCE_BUSINESSINCOME_DETAILRow()
            If (Me.Table.ChildRelations("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL") Is Nothing) Then
                Return New NONSOURCE_BUSINESSINCOME_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL")),NONSOURCE_BUSINESSINCOME_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class NONSOURCE_BUSINESSINCOME_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableNONSOURCE_BUSINESSINCOME_DETAIL As NONSOURCE_BUSINESSINCOME_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNONSOURCE_BUSINESSINCOME_DETAIL = CType(Me.Table,NONSOURCE_BUSINESSINCOME_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBID_KEY' in table 'NONSOURCE_BUSINESSINCOME_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_NSBIKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBID_NSBIKEY' in table 'NONSOURCE_BUSINESSINCOME_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_NSBIDKEY() As Integer
            Get
                Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBID_DESC' in table 'NONSOURCE_BUSINESSINCOME_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBID_AMOUNT' in table 'NONSOURCE_BUSINESSINCOME_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBID_NOTE' in table 'NONSOURCE_BUSINESSINCOME_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSBID_SOURCENO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_SOURCENOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSBID_SOURCENO' in table 'NONSOURCE_BUSINESSINCOME_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NONSOURCE_BUSINESSINCOMERow() As NONSOURCE_BUSINESSINCOMERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL")),NONSOURCE_BUSINESSINCOMERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_NONSOURCE_BUSINESSINCOME_NONSOURCE_BUSINESSINCOME_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBID_KEYNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBID_KEYNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBID_NSBIKEYNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBID_NSBIKEYNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NSBIKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBID_DESCNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBID_DESCNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBID_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBID_AMOUNTNull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBID_NOTENull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSBID_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSBID_SOURCENONull()
            Me(Me.tableNONSOURCE_BUSINESSINCOME_DETAIL.NSBID_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_REALFETRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_REALFET As INCOME_REALFETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_REALFET = CType(Me.Table,INCOME_REALFETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET.IRFET_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFET_KEY' in table 'INCOME_REALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_IRFETKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_REALFET.IRFET_IRFETKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_IRFETKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET.IRFET_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFET_DESC' in table 'INCOME_REALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET.IRFET_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFET_AMOUNT' in table 'INCOME_REALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET.IRFET_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFET_NOTE' in table 'INCOME_REALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET.IRFET_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFET_DETAIL' in table 'INCOME_REALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFET_SOURCENO() As Double
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET.IRFET_SOURCENOColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFET_SOURCENO' in table 'INCOME_REALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET.IRFET_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFET_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET.IRFET_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFET_KEYNull()
            Me(Me.tableINCOME_REALFET.IRFET_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFET_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET.IRFET_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFET_DESCNull()
            Me(Me.tableINCOME_REALFET.IRFET_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFET_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET.IRFET_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFET_AMOUNTNull()
            Me(Me.tableINCOME_REALFET.IRFET_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFET_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET.IRFET_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFET_NOTENull()
            Me(Me.tableINCOME_REALFET.IRFET_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFET_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET.IRFET_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFET_DETAILNull()
            Me(Me.tableINCOME_REALFET.IRFET_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFET_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET.IRFET_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFET_SOURCENONull()
            Me(Me.tableINCOME_REALFET.IRFET_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_REALFET_DETAILRows() As INCOME_REALFET_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_REALFET_INCOME_REALFET_DETAIL") Is Nothing) Then
                Return New INCOME_REALFET_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_REALFET_INCOME_REALFET_DETAIL")),INCOME_REALFET_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_REALFET_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_REALFET_DETAIL As INCOME_REALFET_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_REALFET_DETAIL = CType(Me.Table,INCOME_REALFET_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFETD_KEY' in table 'INCOME_REALFET_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_IRFETKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFETD_IRFETKEY' in table 'INCOME_REALFET_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_IRFETDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFETD_DESC' in table 'INCOME_REALFET_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFETD_AMOUNT' in table 'INCOME_REALFET_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFETD_NOTE' in table 'INCOME_REALFET_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IRFETD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IRFETD_SOURCENO' in table 'INCOME_REALFET_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_REALFETRow() As INCOME_REALFETRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_REALFET_INCOME_REALFET_DETAIL")),INCOME_REALFETRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_REALFET_INCOME_REALFET_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFETD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET_DETAIL.IRFETD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFETD_KEYNull()
            Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFETD_IRFETKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFETD_IRFETKEYNull()
            Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_IRFETKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFETD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET_DETAIL.IRFETD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFETD_DESCNull()
            Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFETD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET_DETAIL.IRFETD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFETD_AMOUNTNull()
            Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFETD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET_DETAIL.IRFETD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFETD_NOTENull()
            Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIRFETD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_REALFET_DETAIL.IRFETD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIRFETD_SOURCENONull()
            Me(Me.tableINCOME_REALFET_DETAIL.IRFETD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NBINTERESTRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NBINTEREST As INCOME_NBINTERESTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NBINTEREST = CType(Me.Table,INCOME_NBINTERESTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBII_KEY' in table 'INCOME_NBINTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_NOBIIKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_NOBIIKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_NOBIIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBII_DESC' in table 'INCOME_NBINTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBII_AMOUNT' in table 'INCOME_NBINTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBII_NOTE' in table 'INCOME_NBINTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBII_DETAIL' in table 'INCOME_NBINTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBII_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST.NOBII_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBII_SOURCENO' in table 'INCOME_NBINTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST.NOBII_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBII_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST.NOBII_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBII_KEYNull()
            Me(Me.tableINCOME_NBINTEREST.NOBII_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBII_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST.NOBII_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBII_DESCNull()
            Me(Me.tableINCOME_NBINTEREST.NOBII_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBII_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST.NOBII_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBII_AMOUNTNull()
            Me(Me.tableINCOME_NBINTEREST.NOBII_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBII_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST.NOBII_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBII_NOTENull()
            Me(Me.tableINCOME_NBINTEREST.NOBII_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBII_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST.NOBII_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBII_DETAILNull()
            Me(Me.tableINCOME_NBINTEREST.NOBII_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBII_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST.NOBII_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBII_SOURCENONull()
            Me(Me.tableINCOME_NBINTEREST.NOBII_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NBINTEREST_DETAILRows() As INCOME_NBINTEREST_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL") Is Nothing) Then
                Return New INCOME_NBINTEREST_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL")),INCOME_NBINTEREST_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NBINTEREST_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NBINTEREST_DETAIL As INCOME_NBINTEREST_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NBINTEREST_DETAIL = CType(Me.Table,INCOME_NBINTEREST_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBIID_KEY' in table 'INCOME_NBINTEREST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_NOBIIKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBIID_NOBIIKEY' in table 'INCOME_NBINTEREST_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_NOBIIDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBIID_DESC' in table 'INCOME_NBINTEREST_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBIID_AMOUNT' in table 'INCOME_NBINTEREST_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBIID_NOTE' in table 'INCOME_NBINTEREST_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBIID_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBIID_SOURCENO' in table 'INCOME_NBINTEREST_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NBINTERESTRow() As INCOME_NBINTERESTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL")),INCOME_NBINTERESTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NBINTEREST_INCOME_NBINTEREST_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBIID_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBIID_KEYNull()
            Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBIID_NOBIIKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBIID_NOBIIKEYNull()
            Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOBIIKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBIID_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBIID_DESCNull()
            Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBIID_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBIID_AMOUNTNull()
            Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBIID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBIID_NOTENull()
            Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBIID_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBIID_SOURCENONull()
            Me(Me.tableINCOME_NBINTEREST_DETAIL.NOBIID_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NBROYALTYRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NBROYALTY As INCOME_NBROYALTYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NBROYALTY = CType(Me.Table,INCOME_NBROYALTYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRI_KEY' in table 'INCOME_NBROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_NOBRIKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_NOBRIKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_NOBRIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRI_DESC' in table 'INCOME_NBROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRI_AMOUNT' in table 'INCOME_NBROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRI_NOTE' in table 'INCOME_NBROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRI_DETAIL' in table 'INCOME_NBROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRI_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY.NOBRI_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRI_SOURCENO' in table 'INCOME_NBROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY.NOBRI_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY.NOBRI_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRI_KEYNull()
            Me(Me.tableINCOME_NBROYALTY.NOBRI_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRI_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY.NOBRI_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRI_DESCNull()
            Me(Me.tableINCOME_NBROYALTY.NOBRI_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRI_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY.NOBRI_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRI_AMOUNTNull()
            Me(Me.tableINCOME_NBROYALTY.NOBRI_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRI_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY.NOBRI_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRI_NOTENull()
            Me(Me.tableINCOME_NBROYALTY.NOBRI_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRI_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY.NOBRI_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRI_DETAILNull()
            Me(Me.tableINCOME_NBROYALTY.NOBRI_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY.NOBRI_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRI_SOURCENONull()
            Me(Me.tableINCOME_NBROYALTY.NOBRI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NBROYALTY_DETAILRows() As INCOME_NBROYALTY_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL") Is Nothing) Then
                Return New INCOME_NBROYALTY_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL")),INCOME_NBROYALTY_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NBROYALTY_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NBROYALTY_DETAIL As INCOME_NBROYALTY_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NBROYALTY_DETAIL = CType(Me.Table,INCOME_NBROYALTY_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRID_KEY' in table 'INCOME_NBROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_NOBRIKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRID_NOBRIKEY' in table 'INCOME_NBROYALTY_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_NOBRIDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRID_DESC' in table 'INCOME_NBROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRID_AMOUNT' in table 'INCOME_NBROYALTY_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRID_NOTE' in table 'INCOME_NBROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOBRID_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOBRID_SOURCENO' in table 'INCOME_NBROYALTY_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NBROYALTYRow() As INCOME_NBROYALTYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL")),INCOME_NBROYALTYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NBROYALTY_INCOME_NBROYALTY_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRID_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRID_KEYNull()
            Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRID_NOBRIKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRID_NOBRIKEYNull()
            Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOBRIKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRID_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRID_DESCNull()
            Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRID_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRID_AMOUNTNull()
            Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRID_NOTENull()
            Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOBRID_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOBRID_SOURCENONull()
            Me(Me.tableINCOME_NBROYALTY_DETAIL.NOBRID_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_INCOMERow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_INCOME As OTHER_INCOMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_INCOME = CType(Me.Table,OTHER_INCOMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME.OI_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OI_KEY' in table 'OTHER_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_OIKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_INCOME.OI_OIKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_OIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME.OI_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OI_DESC' in table 'OTHER_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME.OI_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OI_AMOUNT' in table 'OTHER_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME.OI_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OI_NOTE' in table 'OTHER_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME.OI_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OI_DETAIL' in table 'OTHER_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OI_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME.OI_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OI_SOURCENO' in table 'OTHER_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME.OI_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME.OI_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOI_KEYNull()
            Me(Me.tableOTHER_INCOME.OI_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOI_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME.OI_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOI_DESCNull()
            Me(Me.tableOTHER_INCOME.OI_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOI_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME.OI_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOI_AMOUNTNull()
            Me(Me.tableOTHER_INCOME.OI_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOI_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME.OI_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOI_NOTENull()
            Me(Me.tableOTHER_INCOME.OI_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOI_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME.OI_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOI_DETAILNull()
            Me(Me.tableOTHER_INCOME.OI_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME.OI_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOI_SOURCENONull()
            Me(Me.tableOTHER_INCOME.OI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_INCOME_DETAILRows() As OTHER_INCOME_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_INCOME_OTHER_INCOME_DETAIL") Is Nothing) Then
                Return New OTHER_INCOME_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_INCOME_OTHER_INCOME_DETAIL")),OTHER_INCOME_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_INCOME_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_INCOME_DETAIL As OTHER_INCOME_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_INCOME_DETAIL = CType(Me.Table,OTHER_INCOME_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OID_KEY' in table 'OTHER_INCOME_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_OIKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_OIKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OID_OIKEY' in table 'OTHER_INCOME_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_OIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_OIDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_OIDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_OIDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OID_DESC' in table 'OTHER_INCOME_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OID_AMOUNT' in table 'OTHER_INCOME_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OID_NOTE' in table 'OTHER_INCOME_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OID_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_INCOME_DETAIL.OID_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OID_SOURCENO' in table 'OTHER_INCOME_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_INCOME_DETAIL.OID_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_INCOMERow() As OTHER_INCOMERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_INCOME_OTHER_INCOME_DETAIL")),OTHER_INCOMERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_INCOME_OTHER_INCOME_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOID_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME_DETAIL.OID_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOID_KEYNull()
            Me(Me.tableOTHER_INCOME_DETAIL.OID_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOID_OIKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME_DETAIL.OID_OIKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOID_OIKEYNull()
            Me(Me.tableOTHER_INCOME_DETAIL.OID_OIKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOID_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME_DETAIL.OID_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOID_DESCNull()
            Me(Me.tableOTHER_INCOME_DETAIL.OID_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOID_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME_DETAIL.OID_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOID_AMOUNTNull()
            Me(Me.tableOTHER_INCOME_DETAIL.OID_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME_DETAIL.OID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOID_NOTENull()
            Me(Me.tableOTHER_INCOME_DETAIL.OID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOID_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_INCOME_DETAIL.OID_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOID_SOURCENONull()
            Me(Me.tableOTHER_INCOME_DETAIL.OID_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTDISPOSALFARow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTDISPOSALFA As INCOME_NTDISPOSALFADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTDISPOSALFA = CType(Me.Table,INCOME_NTDISPOSALFADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFA_KEY' in table 'INCOME_NTDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_NTIDFAKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_NTIDFAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_NTIDFAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFA_DESC' in table 'INCOME_NTDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFA_AMOUNT' in table 'INCOME_NTDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFA_NOTE' in table 'INCOME_NTDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFA_DETAIL' in table 'INCOME_NTDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFA_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFA_SOURCENO' in table 'INCOME_NTDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFA_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA.NTIDFA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFA_KEYNull()
            Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFA_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFA_DESCNull()
            Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA.NTIDFA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFA_AMOUNTNull()
            Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFA_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA.NTIDFA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFA_NOTENull()
            Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFA_DETAILNull()
            Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA.NTIDFA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFA_SOURCENONull()
            Me(Me.tableINCOME_NTDISPOSALFA.NTIDFA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NTDISPOSALFA_DETAILRows() As INCOME_NTDISPOSALFA_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL") Is Nothing) Then
                Return New INCOME_NTDISPOSALFA_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL")),INCOME_NTDISPOSALFA_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTDISPOSALFA_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTDISPOSALFA_DETAIL As INCOME_NTDISPOSALFA_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTDISPOSALFA_DETAIL = CType(Me.Table,INCOME_NTDISPOSALFA_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFAD_KEY' in table 'INCOME_NTDISPOSALFA_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_NTIDFAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFAD_NTIDFAKEY' in table 'INCOME_NTDISPOSALFA_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_NTIDFADKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFADKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFAD_DESC' in table 'INCOME_NTDISPOSALFA_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFAD_AMOUNT' in table 'INCOME_NTDISPOSALFA_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFAD_NOTE' in table 'INCOME_NTDISPOSALFA_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDFAD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDFAD_SOURCENO' in table 'INCOME_NTDISPOSALFA_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NTDISPOSALFARow() As INCOME_NTDISPOSALFARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL")),INCOME_NTDISPOSALFARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NTDISPOSALFA_INCOME_NTDISPOSALFA_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFAD_KEYNull()
            Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFAD_NTIDFAKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFAD_NTIDFAKEYNull()
            Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NTIDFAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFAD_DESCNull()
            Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFAD_AMOUNTNull()
            Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFAD_NOTENull()
            Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDFAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDFAD_SOURCENONull()
            Me(Me.tableINCOME_NTDISPOSALFA_DETAIL.NTIDFAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTDISPOSALINVESTRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTDISPOSALINVEST As INCOME_NTDISPOSALINVESTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTDISPOSALINVEST = CType(Me.Table,INCOME_NTDISPOSALINVESTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDI_KEY' in table 'INCOME_NTDISPOSALINVEST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_NTIDIKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NTIDIKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NTIDIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDI_DESC' in table 'INCOME_NTDISPOSALINVEST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDI_AMOUNT' in table 'INCOME_NTDISPOSALINVEST' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDI_NOTE' in table 'INCOME_NTDISPOSALINVEST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDI_DETAIL' in table 'INCOME_NTDISPOSALINVEST' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDI_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDI_SOURCENO' in table 'INCOME_NTDISPOSALINVEST' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDI_KEYNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDI_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDI_DESCNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDI_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDI_AMOUNTNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDI_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDI_NOTENull()
            Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDI_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDI_DETAILNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDI_SOURCENONull()
            Me(Me.tableINCOME_NTDISPOSALINVEST.NTIDI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NTDISPOSALINVEST_DETAILRows() As INCOME_NTDISPOSALINVEST_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL") Is Nothing) Then
                Return New INCOME_NTDISPOSALINVEST_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL")),INCOME_NTDISPOSALINVEST_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTDISPOSALINVEST_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTDISPOSALINVEST_DETAIL As INCOME_NTDISPOSALINVEST_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTDISPOSALINVEST_DETAIL = CType(Me.Table,INCOME_NTDISPOSALINVEST_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDID_KEY' in table 'INCOME_NTDISPOSALINVEST_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_NTIDIKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDID_NTIDIKEY' in table 'INCOME_NTDISPOSALINVEST_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_NTIDIDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDID_DESC' in table 'INCOME_NTDISPOSALINVEST_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDID_AMOUNT' in table 'INCOME_NTDISPOSALINVEST_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDID_NOTE' in table 'INCOME_NTDISPOSALINVEST_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIDID_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIDID_SOURCENO' in table 'INCOME_NTDISPOSALINVEST_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NTDISPOSALINVESTRow() As INCOME_NTDISPOSALINVESTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL")),INCOME_NTDISPOSALINVESTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NTDISPOSALINVEST_INCOME_NTDISPOSALINVEST_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDID_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDID_KEYNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDID_NTIDIKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDID_NTIDIKEYNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NTIDIKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDID_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDID_DESCNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDID_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDID_AMOUNTNull()
            Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDID_NOTENull()
            Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIDID_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIDID_SOURCENONull()
            Me(Me.tableINCOME_NTDISPOSALINVEST_DETAIL.NTIDID_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTFOREIGNINCREMRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTFOREIGNINCREM As INCOME_NTFOREIGNINCREMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTFOREIGNINCREM = CType(Me.Table,INCOME_NTFOREIGNINCREMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIR_KEY' in table 'INCOME_NTFOREIGNINCREM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_NTIFIRKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NTIFIRKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NTIFIRKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIR_DESC' in table 'INCOME_NTFOREIGNINCREM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIR_AMOUNT' in table 'INCOME_NTFOREIGNINCREM' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIR_NOTE' in table 'INCOME_NTFOREIGNINCREM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIR_DETAIL' in table 'INCOME_NTFOREIGNINCREM' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIR_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIR_SOURCENO' in table 'INCOME_NTFOREIGNINCREM' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIR_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIR_KEYNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIR_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIR_DESCNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIR_AMOUNTNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIR_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIR_NOTENull()
            Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIR_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIR_DETAILNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIR_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIR_SOURCENONull()
            Me(Me.tableINCOME_NTFOREIGNINCREM.NTIFIR_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NTFOREIGNINCREM_DETAILRows() As INCOME_NTFOREIGNINCREM_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL") Is Nothing) Then
                Return New INCOME_NTFOREIGNINCREM_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL")),INCOME_NTFOREIGNINCREM_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTFOREIGNINCREM_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTFOREIGNINCREM_DETAIL As INCOME_NTFOREIGNINCREM_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTFOREIGNINCREM_DETAIL = CType(Me.Table,INCOME_NTFOREIGNINCREM_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIRD_KEY' in table 'INCOME_NTFOREIGNINCREM_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_NTIFIRKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIRD_NTIFIRKEY' in table 'INCOME_NTFOREIGNINCREM_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_NTIFIRDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIRD_DESC' in table 'INCOME_NTFOREIGNINCREM_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIRD_AMOUNT' in table 'INCOME_NTFOREIGNINCREM_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIRD_NOTE' in table 'INCOME_NTFOREIGNINCREM_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIFIRD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIFIRD_SOURCENO' in table 'INCOME_NTFOREIGNINCREM_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NTFOREIGNINCREMRow() As INCOME_NTFOREIGNINCREMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL")),INCOME_NTFOREIGNINCREMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NTFOREIGNINCREM_INCOME_NTFOREIGNINCREM_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIRD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIRD_KEYNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIRD_NTIFIRKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIRD_NTIFIRKEYNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NTIFIRKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIRD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIRD_DESCNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIRD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIRD_AMOUNTNull()
            Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIRD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIRD_NOTENull()
            Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIFIRD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIFIRD_SOURCENONull()
            Me(Me.tableINCOME_NTFOREIGNINCREM_DETAIL.NTIFIRD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTREALFERow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTREALFE As INCOME_NTREALFEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTREALFE = CType(Me.Table,INCOME_NTREALFEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECT_KEY' in table 'INCOME_NTREALFE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_NTIRFECTKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_NTIRFECTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_NTIRFECTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECT_DESC' in table 'INCOME_NTREALFE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECT_AMOUNT' in table 'INCOME_NTREALFE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECT_NOTE' in table 'INCOME_NTREALFE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECT_DETAIL' in table 'INCOME_NTREALFE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECT_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE.NTIRFECT_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECT_SOURCENO' in table 'INCOME_NTREALFE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE.NTIRFECT_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECT_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE.NTIRFECT_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECT_KEYNull()
            Me(Me.tableINCOME_NTREALFE.NTIRFECT_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE.NTIRFECT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECT_DESCNull()
            Me(Me.tableINCOME_NTREALFE.NTIRFECT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE.NTIRFECT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECT_AMOUNTNull()
            Me(Me.tableINCOME_NTREALFE.NTIRFECT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE.NTIRFECT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECT_NOTENull()
            Me(Me.tableINCOME_NTREALFE.NTIRFECT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECT_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE.NTIRFECT_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECT_DETAILNull()
            Me(Me.tableINCOME_NTREALFE.NTIRFECT_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECT_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE.NTIRFECT_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECT_SOURCENONull()
            Me(Me.tableINCOME_NTREALFE.NTIRFECT_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NTREALFE_DETAILRows() As INCOME_NTREALFE_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL") Is Nothing) Then
                Return New INCOME_NTREALFE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL")),INCOME_NTREALFE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTREALFE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTREALFE_DETAIL As INCOME_NTREALFE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTREALFE_DETAIL = CType(Me.Table,INCOME_NTREALFE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECTD_KEY' in table 'INCOME_NTREALFE_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_NTIRFECTKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECTD_NTIRFECTKEY' in table 'INCOME_NTREALFE_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_NTIRFECTDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECTD_DESC' in table 'INCOME_NTREALFE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECTD_AMOUNT' in table 'INCOME_NTREALFE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECTD_NOTE' in table 'INCOME_NTREALFE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIRFECTD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIRFECTD_SOURCENO' in table 'INCOME_NTREALFE_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NTREALFERow() As INCOME_NTREALFERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL")),INCOME_NTREALFERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NTREALFE_INCOME_NTREALFE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECTD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECTD_KEYNull()
            Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECTD_NTIRFECTKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECTD_NTIRFECTKEYNull()
            Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NTIRFECTKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECTD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECTD_DESCNull()
            Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECTD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECTD_AMOUNTNull()
            Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECTD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECTD_NOTENull()
            Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIRFECTD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIRFECTD_SOURCENONull()
            Me(Me.tableINCOME_NTREALFE_DETAIL.NTIRFECTD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTUREALFENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTUREALFENT As INCOME_NTUREALFENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTUREALFENT = CType(Me.Table,INCOME_NTUREALFENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNT_KEY' in table 'INCOME_NTUREALFENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_NTIUNTKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_NTIUNTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_NTIUNTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNT_DESC' in table 'INCOME_NTUREALFENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNT_AMOUNT' in table 'INCOME_NTUREALFENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNT_NOTE' in table 'INCOME_NTUREALFENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNT_DETAIL' in table 'INCOME_NTUREALFENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNT_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT.NTIUNT_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNT_SOURCENO' in table 'INCOME_NTUREALFENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT.NTIUNT_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNT_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT.NTIUNT_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNT_KEYNull()
            Me(Me.tableINCOME_NTUREALFENT.NTIUNT_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT.NTIUNT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNT_DESCNull()
            Me(Me.tableINCOME_NTUREALFENT.NTIUNT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT.NTIUNT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNT_AMOUNTNull()
            Me(Me.tableINCOME_NTUREALFENT.NTIUNT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT.NTIUNT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNT_NOTENull()
            Me(Me.tableINCOME_NTUREALFENT.NTIUNT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNT_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT.NTIUNT_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNT_DETAILNull()
            Me(Me.tableINCOME_NTUREALFENT.NTIUNT_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNT_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT.NTIUNT_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNT_SOURCENONull()
            Me(Me.tableINCOME_NTUREALFENT.NTIUNT_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NTUREALFENT_DETAILRows() As INCOME_NTUREALFENT_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL") Is Nothing) Then
                Return New INCOME_NTUREALFENT_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL")),INCOME_NTUREALFENT_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTUREALFENT_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTUREALFENT_DETAIL As INCOME_NTUREALFENT_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTUREALFENT_DETAIL = CType(Me.Table,INCOME_NTUREALFENT_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNTD_KEY' in table 'INCOME_NTUREALFENT_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_NTIUNTKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNTD_NTIUNTKEY' in table 'INCOME_NTUREALFENT_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_NTIUNTDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNTD_DESC' in table 'INCOME_NTUREALFENT_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNTD_AMOUNT' in table 'INCOME_NTUREALFENT_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNTD_NOTE' in table 'INCOME_NTUREALFENT_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUNTD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUNTD_SOURCENO' in table 'INCOME_NTUREALFENT_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NTUREALFENTRow() As INCOME_NTUREALFENTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL")),INCOME_NTUREALFENTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NTUREALFENT_INCOME_NTUREALFENT_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNTD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNTD_KEYNull()
            Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNTD_NTIUNTKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNTD_NTIUNTKEYNull()
            Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NTIUNTKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNTD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNTD_DESCNull()
            Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNTD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNTD_AMOUNTNull()
            Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNTD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNTD_NOTENull()
            Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUNTD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUNTD_SOURCENONull()
            Me(Me.tableINCOME_NTUREALFENT_DETAIL.NTIUNTD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTUREALFETRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTUREALFET As INCOME_NTUREALFETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTUREALFET = CType(Me.Table,INCOME_NTUREALFETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUT_KEY' in table 'INCOME_NTUREALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_NTIUTKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_NTIUTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_NTIUTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUT_DESC' in table 'INCOME_NTUREALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUT_AMOUNT' in table 'INCOME_NTUREALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUT_NOTE' in table 'INCOME_NTUREALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUT_DETAIL' in table 'INCOME_NTUREALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUT_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET.NTIUT_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUT_SOURCENO' in table 'INCOME_NTUREALFET' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET.NTIUT_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUT_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET.NTIUT_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUT_KEYNull()
            Me(Me.tableINCOME_NTUREALFET.NTIUT_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET.NTIUT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUT_DESCNull()
            Me(Me.tableINCOME_NTUREALFET.NTIUT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET.NTIUT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUT_AMOUNTNull()
            Me(Me.tableINCOME_NTUREALFET.NTIUT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET.NTIUT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUT_NOTENull()
            Me(Me.tableINCOME_NTUREALFET.NTIUT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUT_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET.NTIUT_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUT_DETAILNull()
            Me(Me.tableINCOME_NTUREALFET.NTIUT_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUT_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET.NTIUT_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUT_SOURCENONull()
            Me(Me.tableINCOME_NTUREALFET.NTIUT_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetINCOME_NTUREALFET_DETAILRows() As INCOME_NTUREALFET_DETAILRow()
            If (Me.Table.ChildRelations("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL") Is Nothing) Then
                Return New INCOME_NTUREALFET_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL")),INCOME_NTUREALFET_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_NTUREALFET_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_NTUREALFET_DETAIL As INCOME_NTUREALFET_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_NTUREALFET_DETAIL = CType(Me.Table,INCOME_NTUREALFET_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUTD_KEY' in table 'INCOME_NTUREALFET_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_NTIUTKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUTD_NTIUTKEY' in table 'INCOME_NTUREALFET_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_NTIUTDKEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUTD_DESC' in table 'INCOME_NTUREALFET_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUTD_AMOUNT' in table 'INCOME_NTUREALFET_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUTD_NOTE' in table 'INCOME_NTUREALFET_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIUTD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIUTD_SOURCENO' in table 'INCOME_NTUREALFET_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INCOME_NTUREALFETRow() As INCOME_NTUREALFETRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL")),INCOME_NTUREALFETRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_INCOME_NTUREALFET_INCOME_NTUREALFET_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUTD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUTD_KEYNull()
            Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUTD_NTIUTKEYNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUTD_NTIUTKEYNull()
            Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NTIUTKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUTD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUTD_DESCNull()
            Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUTD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUTD_AMOUNTNull()
            Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUTD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUTD_NOTENull()
            Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIUTD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIUTD_SOURCENONull()
            Me(Me.tableINCOME_NTUREALFET_DETAIL.NTIUTD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_INTERESTRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_INTEREST As EXPENSES_INTERESTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_INTEREST = CType(Me.Table,EXPENSES_INTERESTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_KEY' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_EXIKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_EXIKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_EXIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_SOURCENO' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_DESC' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_AMOUNT' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_DEDUCTIBLE' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_NOTE' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_DETAIL' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXI_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXI_DEDUCTIBLE_ADD' in table 'EXPENSES_INTEREST' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_INTEREST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_KEYNull()
            Me(Me.tableEXPENSES_INTEREST.EXI_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_SOURCENONull()
            Me(Me.tableEXPENSES_INTEREST.EXI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_DESCNull()
            Me(Me.tableEXPENSES_INTEREST.EXI_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_AMOUNTNull()
            Me(Me.tableEXPENSES_INTEREST.EXI_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_NOTENull()
            Me(Me.tableEXPENSES_INTEREST.EXI_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_DETAILNull()
            Me(Me.tableEXPENSES_INTEREST.EXI_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXI_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXI_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_INTEREST.EXI_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_INTEREST.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_INTEREST_DETAILRows() As EXPENSES_INTEREST_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL") Is Nothing) Then
                Return New EXPENSES_INTEREST_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL")),EXPENSES_INTEREST_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_INTEREST_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_INTEREST_DETAIL As EXPENSES_INTEREST_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_INTEREST_DETAIL = CType(Me.Table,EXPENSES_INTEREST_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_KEY' in table 'EXPENSES_INTEREST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_EXIKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_EXIKEY' in table 'EXPENSES_INTEREST_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_SOURCENO' in table 'EXPENSES_INTEREST_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_EXIDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_DESC' in table 'EXPENSES_INTEREST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_DEDUCTIBLE' in table 'EXPENSES_INTEREST_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_AMOUNT' in table 'EXPENSES_INTEREST_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_NOTE' in table 'EXPENSES_INTEREST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXID_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXID_DEDUCTIBLE_ADD' in table 'EXPENSES_INTEREST_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_INTEREST_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_INTEREST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_INTEREST_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_INTERESTRow() As EXPENSES_INTERESTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL")),EXPENSES_INTERESTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_INTEREST_EXPENSES_INTEREST_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_KEYNull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_EXIKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_EXIKEYNull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_EXIKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_SOURCENONull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_DESCNull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_AMOUNTNull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_NOTENull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXID_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXID_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.EXID_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_INTEREST_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_INTEREST_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_LEGALRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_LEGAL As EXPENSES_LEGALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_LEGAL = CType(Me.Table,EXPENSES_LEGALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_KEY' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_EXLKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_EXLKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_EXLKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_SOURCENO' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_DESC' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_AMOUNT' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_DEDUCTIBLE' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_NOTE' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_DETAIL' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXL_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXL_DEDUCTIBLE_ADD' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_LEGAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_KEYNull()
            Me(Me.tableEXPENSES_LEGAL.EXL_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_SOURCENONull()
            Me(Me.tableEXPENSES_LEGAL.EXL_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_DESCNull()
            Me(Me.tableEXPENSES_LEGAL.EXL_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_AMOUNTNull()
            Me(Me.tableEXPENSES_LEGAL.EXL_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_NOTENull()
            Me(Me.tableEXPENSES_LEGAL.EXL_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_DETAILNull()
            Me(Me.tableEXPENSES_LEGAL.EXL_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXL_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXL_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_LEGAL.EXL_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_LEGAL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_LEGAL_DETAILRows() As EXPENSES_LEGAL_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL") Is Nothing) Then
                Return New EXPENSES_LEGAL_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL")),EXPENSES_LEGAL_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_LEGAL_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_LEGAL_DETAIL As EXPENSES_LEGAL_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_LEGAL_DETAIL = CType(Me.Table,EXPENSES_LEGAL_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_KEY' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_EXLKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_EXLKEY' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_SOURCENO' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_EXLDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_DESC' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_DEDUCTIBLE' in table 'EXPENSES_LEGAL_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_AMOUNT' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_NOTE' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXLD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXLD_DEDUCTIBLE_ADD' in table 'EXPENSES_LEGAL_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_LEGAL_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_LEGAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_LEGAL_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_LEGALRow() As EXPENSES_LEGALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL")),EXPENSES_LEGALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_LEGAL_EXPENSES_LEGAL_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_KEYNull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_EXLKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_EXLKEYNull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_EXLKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_SOURCENONull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_DESCNull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_AMOUNTNull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_NOTENull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXLD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXLD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.EXLD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_LEGAL_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_LEGAL_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_TECH_FEERow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_TECH_FEE As EXPENSES_TECH_FEEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_TECH_FEE = CType(Me.Table,EXPENSES_TECH_FEEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_KEY' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_EXTFKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_EXTFKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_EXTFKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_SOURCENO' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_DESC' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_AMOUNT' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_DEDUCTIBLE' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_NOTE' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_DETAIL' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTF_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTF_DEDUCTIBLE_ADD' in table 'EXPENSES_TECH_FEE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_TECH_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_KEYNull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_SOURCENONull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_DESCNull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_AMOUNTNull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_NOTENull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_DETAILNull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTF_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTF_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_TECH_FEE.EXTF_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_TECH_FEE.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_TECH_FEE_DETAILRows() As EXPENSES_TECH_FEE_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL") Is Nothing) Then
                Return New EXPENSES_TECH_FEE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL")),EXPENSES_TECH_FEE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_TECH_FEE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_TECH_FEE_DETAIL As EXPENSES_TECH_FEE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_TECH_FEE_DETAIL = CType(Me.Table,EXPENSES_TECH_FEE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_KEY' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_EXTFKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_EXTFKEY' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_SOURCENO' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_EXTFDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_DESC' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_DEDUCTIBLE' in table 'EXPENSES_TECH_FEE_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_AMOUNT' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_NOTE' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTFD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTFD_DEDUCTIBLE_ADD' in table 'EXPENSES_TECH_FEE_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TECH_FEE_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_TECH_FEE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TECH_FEE_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_TECH_FEERow() As EXPENSES_TECH_FEERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL")),EXPENSES_TECH_FEERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_TECH_FEE_EXPENSES_TECH_FEE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_KEYNull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_EXTFKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_EXTFKEYNull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_EXTFKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_SOURCENONull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_DESCNull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_AMOUNTNull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_NOTENull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTFD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTFD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.EXTFD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TECH_FEE_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_TECH_FEE_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_CONTRACTRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_CONTRACT As EXPENSES_CONTRACTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_CONTRACT = CType(Me.Table,EXPENSES_CONTRACTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_KEY' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_EXCKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_EXCKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_EXCKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_SOURCENO' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_DESC' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_AMOUNT' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_DEDUCTIBLE' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_NOTE' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_DETAIL' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXC_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXC_DEDUCTIBLE_ADD' in table 'EXPENSES_CONTRACT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_CONTRACT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_KEYNull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_SOURCENONull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_DESCNull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_AMOUNTNull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_NOTENull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_DETAILNull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXC_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXC_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_CONTRACT.EXC_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_CONTRACT.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_CONTRACT_DETAILRows() As EXPENSES_CONTRACT_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL") Is Nothing) Then
                Return New EXPENSES_CONTRACT_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL")),EXPENSES_CONTRACT_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_CONTRACT_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_CONTRACT_DETAIL As EXPENSES_CONTRACT_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_CONTRACT_DETAIL = CType(Me.Table,EXPENSES_CONTRACT_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_KEY' in table 'EXPENSES_CONTRACT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_EXCKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_EXCKEY' in table 'EXPENSES_CONTRACT_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_SOURCENO' in table 'EXPENSES_CONTRACT_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_EXCDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_DESC' in table 'EXPENSES_CONTRACT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_DEDUCTIBLE' in table 'EXPENSES_CONTRACT_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_AMOUNT' in table 'EXPENSES_CONTRACT_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_NOTE' in table 'EXPENSES_CONTRACT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCD_DEDUCTIBLE_ADD' in table 'EXPENSES_CONTRACT_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_CONTRACT_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_CONTRACT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_CONTRACT_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_CONTRACTRow() As EXPENSES_CONTRACTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL")),EXPENSES_CONTRACTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_CONTRACT_EXPENSES_CONTRACT_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_KEYNull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_EXCKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_EXCKEYNull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_EXCKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_SOURCENONull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_DESCNull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_AMOUNTNull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_NOTENull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.EXCD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_CONTRACT_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_CONTRACT_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_DIRECTORS_FEERow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_DIRECTORS_FEE As EXPENSES_DIRECTORS_FEEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_DIRECTORS_FEE = CType(Me.Table,EXPENSES_DIRECTORS_FEEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_KEY' in table 'EXPENSES_DIRECTORS_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_EXDFKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_EXDFKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_EXDFKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_SOURCENO' in table 'EXPENSES_DIRECTORS_FEE' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_DESC' in table 'EXPENSES_DIRECTORS_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_AMOUNT' in table 'EXPENSES_DIRECTORS_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_DEDUCTIBLE' in table 'EXPENSES_DIRECTORS_FEE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_NOTE' in table 'EXPENSES_DIRECTORS_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_DETAIL' in table 'EXPENSES_DIRECTORS_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDF_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDF_DEDUCTIBLE_ADD' in table 'EXPENSES_DIRECTORS_FEE' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_DIRECTORS_FEE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_KEYNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_SOURCENONull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_DESCNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_AMOUNTNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_NOTENull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_DETAILNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDF_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDF_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.EXDF_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_DIRECTORS_FEE_DETAILRows() As EXPENSES_DIRECTORS_FEE_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL") Is Nothing) Then
                Return New EXPENSES_DIRECTORS_FEE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL")),EXPENSES_DIRECTORS_FEE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_DIRECTORS_FEE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_DIRECTORS_FEE_DETAIL As EXPENSES_DIRECTORS_FEE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_DIRECTORS_FEE_DETAIL = CType(Me.Table,EXPENSES_DIRECTORS_FEE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_KEY' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_EXDFKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_EXDFKEY' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_SOURCENO' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_EXDFDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_DESC' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_DEDUCTIBLE' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_AMOUNT' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_NOTE' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXDFD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXDFD_DEDUCTIBLE_ADD' in table 'EXPENSES_DIRECTORS_FEE_DETA"& _ 
                            "IL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_DIRECTORS_FEE_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_DIRECTORS_FEERow() As EXPENSES_DIRECTORS_FEERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL")),EXPENSES_DIRECTORS_FEERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_DIRECTORS_FEE_EXPENSES_DIRECTORS_FEE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_KEYNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_EXDFKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_EXDFKEYNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_EXDFKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_SOURCENONull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_DESCNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_AMOUNTNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_NOTENull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXDFD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXDFD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.EXDFD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_DIRECTORS_FEE_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_SALARYRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_SALARY As EXPENSES_SALARYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_SALARY = CType(Me.Table,EXPENSES_SALARYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_KEY' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_EXSKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_SALARY.EXS_EXSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_EXSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_SOURCENO' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_DESC' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_AMOUNT' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_DEDUCTIBLE' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_NOTE' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_DETAIL' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXS_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXS_DEDUCTIBLE_ADD' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_SALARY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_KEYNull()
            Me(Me.tableEXPENSES_SALARY.EXS_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_SOURCENONull()
            Me(Me.tableEXPENSES_SALARY.EXS_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_DESCNull()
            Me(Me.tableEXPENSES_SALARY.EXS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_AMOUNTNull()
            Me(Me.tableEXPENSES_SALARY.EXS_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_NOTENull()
            Me(Me.tableEXPENSES_SALARY.EXS_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_DETAILNull()
            Me(Me.tableEXPENSES_SALARY.EXS_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXS_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXS_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_SALARY.EXS_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_SALARY.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_SALARY_DETAILRows() As EXPENSES_SALARY_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL") Is Nothing) Then
                Return New EXPENSES_SALARY_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL")),EXPENSES_SALARY_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_SALARY_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_SALARY_DETAIL As EXPENSES_SALARY_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_SALARY_DETAIL = CType(Me.Table,EXPENSES_SALARY_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_KEY' in table 'EXPENSES_SALARY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_EXSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_EXSKEY' in table 'EXPENSES_SALARY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_SOURCENO' in table 'EXPENSES_SALARY_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_EXSDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_DESC' in table 'EXPENSES_SALARY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_DEDUCTIBLE' in table 'EXPENSES_SALARY_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_AMOUNT' in table 'EXPENSES_SALARY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_NOTE' in table 'EXPENSES_SALARY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXSD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXSD_DEDUCTIBLE_ADD' in table 'EXPENSES_SALARY_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_SALARY_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_SALARY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_SALARY_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_SALARYRow() As EXPENSES_SALARYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL")),EXPENSES_SALARYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_SALARY_EXPENSES_SALARY_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_KEYNull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_EXSKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_EXSKEYNull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_EXSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_SOURCENONull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_DESCNull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_AMOUNTNull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_NOTENull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXSD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXSD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.EXSD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_SALARY_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_SALARY_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_EMPLSTOCK_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_EMPLSTOCK_DETAIL As EXPENSES_EMPLSTOCK_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_EMPLSTOCK_DETAIL = CType(Me.Table,EXPENSES_EMPLSTOCK_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_KEY' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_EXESKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_EXESKEY' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_SOURCENO' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_EXESDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_DESC' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_DEDUCTIBLE' in table 'EXPENSES_EMPLSTOCK_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_AMOUNT' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_NOTE' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_EMPLSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXESD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXESD_DEDUCTIBLE_ADD' in table 'EXPENSES_EMPLSTOCK_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_EMPL_STOCKRow() As EXPENSES_EMPL_STOCKRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL")),EXPENSES_EMPL_STOCKRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_KEYNull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_EXESKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_EXESKEYNull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_EXESKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_SOURCENONull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_DESCNull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_AMOUNTNull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_NOTENull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXESD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXESD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_EMPLSTOCK_DETAIL.EXESD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_EMPL_STOCKRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_EMPL_STOCK As EXPENSES_EMPL_STOCKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_EMPL_STOCK = CType(Me.Table,EXPENSES_EMPL_STOCKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_KEY' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_EXESKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_EXESKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_EXESKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_SOURCENO' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_DESC' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_AMOUNT' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_DEDUCTIBLE' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_NOTE' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_DETAIL' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXES_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXES_DEDUCTIBLE_ADD' in table 'EXPENSES_EMPL_STOCK' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_EMPL_STOCK.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_EMPL_STOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_EMPL_STOCK.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_KEYNull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_SOURCENONull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_DESCNull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_AMOUNTNull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_NOTENull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_DETAILNull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXES_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXES_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_EMPL_STOCK.EXES_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_EMPL_STOCK.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_EMPL_STOCK.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_EMPLSTOCK_DETAILRows() As EXPENSES_EMPLSTOCK_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL") Is Nothing) Then
                Return New EXPENSES_EMPLSTOCK_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_EMPL_STOCK_EXPENSES_EMPLSTOCK_DETAIL")),EXPENSES_EMPLSTOCK_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_ROYALTYRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_ROYALTY As EXPENSES_ROYALTYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_ROYALTY = CType(Me.Table,EXPENSES_ROYALTYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_KEY' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_EXROKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_EXROKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_EXROKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_SOURCENO' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_DESC' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_AMOUNT' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_DEDUCTIBLE' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_NOTE' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_DETAIL' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRO_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRO_DEDUCTIBLE_ADD' in table 'EXPENSES_ROYALTY' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_ROYALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_KEYNull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_SOURCENONull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_DESCNull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_AMOUNTNull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_NOTENull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_DETAILNull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRO_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRO_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_ROYALTY.EXRO_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_ROYALTY.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_ROYALTY_DETAILRows() As EXPENSES_ROYALTY_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL") Is Nothing) Then
                Return New EXPENSES_ROYALTY_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL")),EXPENSES_ROYALTY_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_ROYALTY_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_ROYALTY_DETAIL As EXPENSES_ROYALTY_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_ROYALTY_DETAIL = CType(Me.Table,EXPENSES_ROYALTY_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_KEY' in table 'EXPENSES_ROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_EXROKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXROKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_EXROKEY' in table 'EXPENSES_ROYALTY_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXROKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_SOURCENO' in table 'EXPENSES_ROYALTY_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_EXRODKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXRODKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXRODKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_DESC' in table 'EXPENSES_ROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_DEDUCTIBLE' in table 'EXPENSES_ROYALTY_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_AMOUNT' in table 'EXPENSES_ROYALTY_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_NOTE' in table 'EXPENSES_ROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXROD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXROD_DEDUCTIBLE_ADD' in table 'EXPENSES_ROYALTY_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_ROYALTY_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_ROYALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_ROYALTY_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_ROYALTYRow() As EXPENSES_ROYALTYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL")),EXPENSES_ROYALTYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_ROYALTY_EXPENSES_ROYALTY_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_KEYNull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_EXROKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXROKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_EXROKEYNull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_EXROKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_SOURCENONull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_DESCNull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_AMOUNTNull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_NOTENull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXROD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXROD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.EXROD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_ROYALTY_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_ROYALTY_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_RENTALRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_RENTAL As EXPENSES_RENTALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_RENTAL = CType(Me.Table,EXPENSES_RENTALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_KEY' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_EXRENTKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_EXRENTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_EXRENTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_SOURCENO' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_DESC' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_AMOUNT' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_DEDUCTIBLE' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_NOTE' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_DETAIL' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENT_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENT_DEDUCTIBLE_ADD' in table 'EXPENSES_RENTAL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_RENTAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_KEYNull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_SOURCENONull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_DESCNull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_AMOUNTNull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_NOTENull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_DETAILNull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENT_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENT_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_RENTAL.EXRENT_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_RENTAL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_RENTAL_DETAILRows() As EXPENSES_RENTAL_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL") Is Nothing) Then
                Return New EXPENSES_RENTAL_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL")),EXPENSES_RENTAL_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_RENTAL_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_RENTAL_DETAIL As EXPENSES_RENTAL_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_RENTAL_DETAIL = CType(Me.Table,EXPENSES_RENTAL_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_KEY' in table 'EXPENSES_RENTAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_EXRENTKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_EXRENTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_EXRENTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_SOURCENO' in table 'EXPENSES_RENTAL_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_EXRENTDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_EXRENTDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_EXRENTDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_DESC' in table 'EXPENSES_RENTAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_DEDUCTIBLE' in table 'EXPENSES_RENTAL_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_AMOUNT' in table 'EXPENSES_RENTAL_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_NOTE' in table 'EXPENSES_RENTAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRENTD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRENTD_DEDUCTIBLE_ADD' in table 'EXPENSES_RENTAL_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RENTAL_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_RENTAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RENTAL_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_RENTALRow() As EXPENSES_RENTALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL")),EXPENSES_RENTALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_RENTAL_EXPENSES_RENTAL_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_KEYNull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_SOURCENONull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_DESCNull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_AMOUNTNull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_NOTENull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRENTD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRENTD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.EXRENTD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RENTAL_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_RENTAL_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_REPAIRRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_REPAIR As EXPENSES_REPAIRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_REPAIR = CType(Me.Table,EXPENSES_REPAIRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_KEY' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_EXREPKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_EXREPKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_EXREPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_SOURCENO' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_DESC' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_AMOUNT' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_DEDUCTIBLE' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_NOTE' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_DETAIL' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREP_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREP_DEDUCTIBLE_ADD' in table 'EXPENSES_REPAIR' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_REPAIR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_KEYNull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_SOURCENONull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_DESCNull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_AMOUNTNull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_NOTENull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_DETAILNull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREP_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREP_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_REPAIR.EXREP_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_REPAIR.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_REPAIR_DETAILRows() As EXPENSES_REPAIR_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL") Is Nothing) Then
                Return New EXPENSES_REPAIR_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL")),EXPENSES_REPAIR_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_REPAIR_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_REPAIR_DETAIL As EXPENSES_REPAIR_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_REPAIR_DETAIL = CType(Me.Table,EXPENSES_REPAIR_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_KEY' in table 'EXPENSES_REPAIR_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_EXREPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_EXREPKEY' in table 'EXPENSES_REPAIR_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_SOURCENO' in table 'EXPENSES_REPAIR_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_EXREPDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_DESC' in table 'EXPENSES_REPAIR_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_DEDUCTIBLE' in table 'EXPENSES_REPAIR_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_AMOUNT' in table 'EXPENSES_REPAIR_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_NOTE' in table 'EXPENSES_REPAIR_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXREPD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXREPD_DEDUCTIBLE_ADD' in table 'EXPENSES_REPAIR_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_REPAIR_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_REPAIR_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_REPAIR_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_REPAIRRow() As EXPENSES_REPAIRRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL")),EXPENSES_REPAIRRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_REPAIR_EXPENSES_REPAIR_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_KEYNull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_EXREPKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_EXREPKEYNull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_EXREPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_SOURCENONull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_DESCNull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_AMOUNTNull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_NOTENull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXREPD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXREPD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.EXREPD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_REPAIR_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_REPAIR_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_RESEARCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_RESEARCH As EXPENSES_RESEARCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_RESEARCH = CType(Me.Table,EXPENSES_RESEARCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_KEY' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_EXRESKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_EXRESKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_EXRESKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_SOURCENO' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_DESC' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_AMOUNT' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_DEDUCTIBLE' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_NOTE' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_DETAIL' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRES_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRES_DEDUCTIBLE_ADD' in table 'EXPENSES_RESEARCH' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_RESEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_KEYNull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_SOURCENONull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_DESCNull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_AMOUNTNull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_NOTENull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_DETAILNull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRES_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRES_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_RESEARCH.EXRES_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_RESEARCH.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_RESEARCH_DETAILRows() As EXPENSES_RESEARCH_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL") Is Nothing) Then
                Return New EXPENSES_RESEARCH_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL")),EXPENSES_RESEARCH_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_RESEARCH_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_RESEARCH_DETAIL As EXPENSES_RESEARCH_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_RESEARCH_DETAIL = CType(Me.Table,EXPENSES_RESEARCH_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_KEY' in table 'EXPENSES_RESEARCH_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_EXRESKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_EXRESKEY' in table 'EXPENSES_RESEARCH_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_SOURCENO' in table 'EXPENSES_RESEARCH_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_EXRESDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_DESC' in table 'EXPENSES_RESEARCH_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_DEDUCTIBLE' in table 'EXPENSES_RESEARCH_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_AMOUNT' in table 'EXPENSES_RESEARCH_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_NOTE' in table 'EXPENSES_RESEARCH_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXRESD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXRESD_DEDUCTIBLE_ADD' in table 'EXPENSES_RESEARCH_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_RESEARCH_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_RESEARCH_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_RESEARCH_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_RESEARCHRow() As EXPENSES_RESEARCHRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL")),EXPENSES_RESEARCHRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_RESEARCH_EXPENSES_RESEARCH_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_KEYNull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_EXRESKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_EXRESKEYNull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_EXRESKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_SOURCENONull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_DESCNull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_AMOUNTNull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_NOTENull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXRESD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXRESD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.EXRESD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_RESEARCH_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_RESEARCH_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_PROMOTERow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_PROMOTE As EXPENSES_PROMOTEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_PROMOTE = CType(Me.Table,EXPENSES_PROMOTEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_KEY' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_EXPKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_EXPKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_EXPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_SOURCENO' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_DESC' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_AMOUNT' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_DEDUCTIBLE' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_NOTE' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_DETAIL' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXP_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXP_DEDUCTIBLE_ADD' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_PROMOTE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_KEYNull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_SOURCENONull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_DESCNull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_AMOUNTNull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_NOTENull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_DETAILNull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXP_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXP_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_PROMOTE.EXP_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_PROMOTE.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_PROMOTE_DETAILRows() As EXPENSES_PROMOTE_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL") Is Nothing) Then
                Return New EXPENSES_PROMOTE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL")),EXPENSES_PROMOTE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_PROMOTE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_PROMOTE_DETAIL As EXPENSES_PROMOTE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_PROMOTE_DETAIL = CType(Me.Table,EXPENSES_PROMOTE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_KEY' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_EXPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_EXPKEY' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_SOURCENO' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_EXPDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_DESC' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_DEDUCTIBLE' in table 'EXPENSES_PROMOTE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_AMOUNT' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_NOTE' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPD_DEDUCTIBLE_ADD' in table 'EXPENSES_PROMOTE_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_PROMOTE_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_PROMOTE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_PROMOTE_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_PROMOTERow() As EXPENSES_PROMOTERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL")),EXPENSES_PROMOTERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_PROMOTE_EXPENSES_PROMOTE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_KEYNull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_EXPKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_EXPKEYNull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_EXPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_SOURCENONull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_DESCNull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_AMOUNTNull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_NOTENull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXPD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXPD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.EXPD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_PROMOTE_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_PROMOTE_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_TRAVELRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_TRAVEL As EXPENSES_TRAVELDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_TRAVEL = CType(Me.Table,EXPENSES_TRAVELDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_KEY' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_EXTKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_EXTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_EXTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_SOURCENO' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_DESC' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_AMOUNT' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_DEDUCTIBLE' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_NOTE' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_DETAIL' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXT_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXT_DEDUCTIBLE_ADD' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_TRAVEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_KEYNull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_SOURCENONull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_DESCNull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_AMOUNTNull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_NOTENull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_DETAILNull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXT_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXT_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_TRAVEL.EXT_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_TRAVEL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_TRAVEL_DETAILRows() As EXPENSES_TRAVEL_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL") Is Nothing) Then
                Return New EXPENSES_TRAVEL_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL")),EXPENSES_TRAVEL_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_TRAVEL_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_TRAVEL_DETAIL As EXPENSES_TRAVEL_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_TRAVEL_DETAIL = CType(Me.Table,EXPENSES_TRAVEL_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_KEY' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_EXTKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_EXTKEY' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_SOURCENO' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_EXTDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_DESC' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_DEDUCTIBLE' in table 'EXPENSES_TRAVEL_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_AMOUNT' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_NOTE' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTD_DEDUCTIBLE_ADD' in table 'EXPENSES_TRAVEL_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_TRAVEL_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_TRAVEL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_TRAVEL_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_TRAVELRow() As EXPENSES_TRAVELRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL")),EXPENSES_TRAVELRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_TRAVEL_EXPENSES_TRAVEL_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_KEYNull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_EXTKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_EXTKEYNull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_EXTKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_SOURCENONull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_DESCNull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_AMOUNTNull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_NOTENull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.EXTD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_TRAVEL_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_TRAVEL_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_JKDMRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_JKDM As EXPENSES_JKDMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_JKDM = CType(Me.Table,EXPENSES_JKDMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_KEY' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_EXJKKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_EXJKKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_EXJKKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_SOURCENO' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_DESC' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_AMOUNT' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_DEDUCTIBLE' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_NOTE' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_DETAIL' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJK_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJK_DEDUCTIBLE_ADD' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_JKDM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_KEYNull()
            Me(Me.tableEXPENSES_JKDM.EXJK_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_SOURCENONull()
            Me(Me.tableEXPENSES_JKDM.EXJK_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_DESCNull()
            Me(Me.tableEXPENSES_JKDM.EXJK_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_AMOUNTNull()
            Me(Me.tableEXPENSES_JKDM.EXJK_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_NOTENull()
            Me(Me.tableEXPENSES_JKDM.EXJK_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_DETAILNull()
            Me(Me.tableEXPENSES_JKDM.EXJK_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJK_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJK_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_JKDM.EXJK_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_JKDM.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetEXPENSES_JKDM_DETAILRows() As EXPENSES_JKDM_DETAILRow()
            If (Me.Table.ChildRelations("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL") Is Nothing) Then
                Return New EXPENSES_JKDM_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL")),EXPENSES_JKDM_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EXPENSES_JKDM_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableEXPENSES_JKDM_DETAIL As EXPENSES_JKDM_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEXPENSES_JKDM_DETAIL = CType(Me.Table,EXPENSES_JKDM_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_KEY' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_EXJKKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_EXJKKEY' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_SOURCENO' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_EXJKDKEY() As Integer
            Get
                Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_DESC' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_DEDUCTIBLE' in table 'EXPENSES_JKDM_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_AMOUNT' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_NOTE' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXJKD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXJKD_DEDUCTIBLE_ADD' in table 'EXPENSES_JKDM_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEXPENSES_JKDM_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'EXPENSES_JKDM_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEXPENSES_JKDM_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXPENSES_JKDMRow() As EXPENSES_JKDMRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL")),EXPENSES_JKDMRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EXPENSES_JKDM_EXPENSES_JKDM_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_KEYNull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_EXJKKEYNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_EXJKKEYNull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_EXJKKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_SOURCENONull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_DESCNull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_DEDUCTIBLENull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_AMOUNTNull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_NOTENull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXJKD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXJKD_DEDUCTIBLE_ADDNull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.EXJKD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableEXPENSES_JKDM_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableEXPENSES_JKDM_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXDEPRECIATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXDEPRECIATION As OTHER_EXDEPRECIATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXDEPRECIATION = CType(Me.Table,OTHER_EXDEPRECIATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_KEY' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_EXODEPKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_EXODEPKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_EXODEPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_SOURCENO' in table 'OTHER_EXDEPRECIATION' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_DESC' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_AMOUNT' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_DEDUCTIBLE' in table 'OTHER_EXDEPRECIATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_NOTE' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_DETAIL' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEP_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEP_DEDUCTIBLE_ADD' in table 'OTHER_EXDEPRECIATION' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION.PecentageColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXDEPRECIATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_KEYNull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_SOURCENONull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_DESCNull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_AMOUNTNull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_NOTENull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_DETAILNull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEP_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEP_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXDEPRECIATION.EXODEP_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXDEPRECIATION.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXDEPRECIATION.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXDEPRECIATION_DETAILRows() As OTHER_EXDEPRECIATION_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL") Is Nothing) Then
                Return New OTHER_EXDEPRECIATION_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL")),OTHER_EXDEPRECIATION_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXDEPRECIATION_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXDEPRECIATION_DETAIL As OTHER_EXDEPRECIATION_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXDEPRECIATION_DETAIL = CType(Me.Table,OTHER_EXDEPRECIATION_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_KEY' in table 'OTHER_EXDEPRECIATION_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_EXODEPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_EXODEPKEY' in table 'OTHER_EXDEPRECIATION_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_SOURCENO' in table 'OTHER_EXDEPRECIATION_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_EXODEPDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_DESC' in table 'OTHER_EXDEPRECIATION_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_DEDUCTIBLE' in table 'OTHER_EXDEPRECIATION_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_AMOUNT' in table 'OTHER_EXDEPRECIATION_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_NOTE' in table 'OTHER_EXDEPRECIATION_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXODEPD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXODEPD_DEDUCTIBLE_ADD' in table 'OTHER_EXDEPRECIATION_DETA"& _ 
                            "IL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXDEPRECIATION_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Long
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.PecentageColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXDEPRECIATION_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXDEPRECIATIONRow() As OTHER_EXDEPRECIATIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL")),OTHER_EXDEPRECIATIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXDEPRECIATION_OTHER_EXDEPRECIATION_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_KEYNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_EXODEPKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_EXODEPKEYNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_EXODEPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_SOURCENONull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_DESCNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_AMOUNTNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_NOTENull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXODEPD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXODEPD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.EXODEPD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXDEPRECIATION_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXDEPRECIATION_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXAPPRDONATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXAPPRDONATION As OTHER_EXAPPRDONATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXAPPRDONATION = CType(Me.Table,OTHER_EXAPPRDONATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_KEY' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_EXOADKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_EXOADKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_EXOADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_SOURCENO' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_DESC' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_AMOUNT' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_DEDUCTIBLE' in table 'OTHER_EXAPPRDONATION' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_NOTE' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_DETAIL' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_TYPE' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOAD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOAD_DEDUCTIBLE_ADD' in table 'OTHER_EXAPPRDONATION' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_KEYNull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_SOURCENONull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_DESCNull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_AMOUNTNull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_NOTENull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_DETAILNull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_TYPENull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOAD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOAD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXAPPRDONATION.EXOAD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXAPPRDONATION.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXAPPRDONATION.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXAPPRDONATION_DETAILRows() As OTHER_EXAPPRDONATION_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL") Is Nothing) Then
                Return New OTHER_EXAPPRDONATION_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL")),OTHER_EXAPPRDONATION_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXAPPRDONATION_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXAPPRDONATION_DETAIL As OTHER_EXAPPRDONATION_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXAPPRDONATION_DETAIL = CType(Me.Table,OTHER_EXAPPRDONATION_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_KEY' in table 'OTHER_EXAPPRDONATION_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_EXOADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_EXOADKEY' in table 'OTHER_EXAPPRDONATION_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_SOURCENO' in table 'OTHER_EXAPPRDONATION_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_EXOADDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_DESC' in table 'OTHER_EXAPPRDONATION_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_DEDUCTIBLE' in table 'OTHER_EXAPPRDONATION_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_AMOUNT' in table 'OTHER_EXAPPRDONATION_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_NOTE' in table 'OTHER_EXAPPRDONATION_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_TYPE' in table 'OTHER_EXAPPRDONATION_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOADD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOADD_DEDUCTIBLE_ADD' in table 'OTHER_EXAPPRDONATION_DETAI"& _ 
                            "L' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXAPPRDONATION_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXAPPRDONATION_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXAPPRDONATIONRow() As OTHER_EXAPPRDONATIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL")),OTHER_EXAPPRDONATIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXAPPRDONATION_OTHER_EXAPPRDONATION_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_KEYNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_EXOADKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_EXOADKEYNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_EXOADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_SOURCENONull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_DESCNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_AMOUNTNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_NOTENull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_TYPENull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOADD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOADD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.EXOADD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXAPPRDONATION_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXAPPRDONATION_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXNAPPRDONATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXNAPPRDONATION As OTHER_EXNAPPRDONATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXNAPPRDONATION = CType(Me.Table,OTHER_EXNAPPRDONATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_KEY' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_EXONADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_EXONADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_EXONADKEY' in table 'OTHER_EXNAPPRDONATION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_EXONADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_SOURCENO' in table 'OTHER_EXNAPPRDONATION' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_DESC' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_AMOUNT' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_DEDUCTIBLE' in table 'OTHER_EXNAPPRDONATION' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_NOTE' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_DETAIL' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONAD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONAD_DEDUCTIBLE_ADD' in table 'OTHER_EXNAPPRDONATION' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXNAPPRDONATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_KEYNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_EXONADKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_EXONADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_EXONADKEYNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_EXONADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_SOURCENONull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_DESCNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_AMOUNTNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_NOTENull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_DETAILNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONAD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONAD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.EXONAD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXNAPPRDONATION.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXNAPPRDONATION_DETAILRows() As OTHER_EXNAPPRDONATION_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL") Is Nothing) Then
                Return New OTHER_EXNAPPRDONATION_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL")),OTHER_EXNAPPRDONATION_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXNAPPRDONATION_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXNAPPRDONATION_DETAIL As OTHER_EXNAPPRDONATION_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXNAPPRDONATION_DETAIL = CType(Me.Table,OTHER_EXNAPPRDONATION_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_KEY' in table 'OTHER_EXNAPPRDONATION_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_EXONADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_EXONADKEY' in table 'OTHER_EXNAPPRDONATION_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_SOURCENO' in table 'OTHER_EXNAPPRDONATION_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_EXONADDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_EXONADDKEY' in table 'OTHER_EXNAPPRDONATION_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_DESC' in table 'OTHER_EXNAPPRDONATION_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_DEDUCTIBLE' in table 'OTHER_EXNAPPRDONATION_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_AMOUNT' in table 'OTHER_EXNAPPRDONATION_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_NOTE' in table 'OTHER_EXNAPPRDONATION_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXONADD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXONADD_DEDUCTIBLE_ADD' in table 'OTHER_EXNAPPRDONATION_DET"& _ 
                            "AIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXNAPPRDONATION_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXNAPPRDONATION_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXNAPPRDONATIONRow() As OTHER_EXNAPPRDONATIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL")),OTHER_EXNAPPRDONATIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXNAPPRDONATION_OTHER_EXNAPPRDONATION_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_KEYNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_EXONADKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_EXONADKEYNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_SOURCENONull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_EXONADDKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_EXONADDKEYNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_EXONADDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_DESCNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_AMOUNTNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_NOTENull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXONADD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXONADD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.EXONADD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXNAPPRDONATION_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXNAPPRDONATION_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXZAKATRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXZAKAT As OTHER_EXZAKATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXZAKAT = CType(Me.Table,OTHER_EXZAKATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_KEY' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_EXOZKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_EXOZKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_EXOZKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_SOURCENO' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_DESC' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_AMOUNT' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_DEDUCTIBLE' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_NOTE' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_DETAIL' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZ_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZ_DEDUCTIBLE_ADD' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXZAKAT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_KEYNull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_SOURCENONull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_DESCNull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_AMOUNTNull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_NOTENull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_DETAILNull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZ_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZ_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXZAKAT.EXOZ_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXZAKAT.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXZAKAT.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXZAKAT_DETAILRows() As OTHER_EXZAKAT_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL") Is Nothing) Then
                Return New OTHER_EXZAKAT_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL")),OTHER_EXZAKAT_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXZAKAT_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXZAKAT_DETAIL As OTHER_EXZAKAT_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXZAKAT_DETAIL = CType(Me.Table,OTHER_EXZAKAT_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_KEY' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_EXOZKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_EXOZKEY' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_SOURCENO' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_EXOZDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_DESC' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_DEDUCTIBLE' in table 'OTHER_EXZAKAT_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_AMOUNT' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_NOTE' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOZD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOZD_DEDUCTIBLE_ADD' in table 'OTHER_EXZAKAT_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXZAKAT_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXZAKAT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXZAKAT_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXZAKATRow() As OTHER_EXZAKATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL")),OTHER_EXZAKATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXZAKAT_OTHER_EXZAKAT_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_KEYNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_EXOZKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_EXOZKEYNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_EXOZKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_SOURCENONull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_DESCNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_AMOUNTNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_NOTENull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOZD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOZD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.EXOZD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXZAKAT_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXZAKAT_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXLOSSDISPOSALFARow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXLOSSDISPOSALFA As OTHER_EXLOSSDISPOSALFADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXLOSSDISPOSALFA = CType(Me.Table,OTHER_EXLOSSDISPOSALFADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_KEY' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_EXOLDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_EXOLDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_EXOLDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_SOURCENO' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_DESC' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_AMOUNT' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_DEDUCTIBLE' in table 'OTHER_EXLOSSDISPOSALFA' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_NOTE' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_DETAIL' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLD_DEDUCTIBLE_ADD' in table 'OTHER_EXLOSSDISPOSALFA' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXLOSSDISPOSALFA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_KEYNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_SOURCENONull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_DESCNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_AMOUNTNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_NOTENull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_DETAILNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.EXOLD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXLOSSDISPOSALFA_DETAILRows() As OTHER_EXLOSSDISPOSALFA_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL") Is Nothing) Then
                Return New OTHER_EXLOSSDISPOSALFA_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL")),OTHER_EXLOSSDISPOSALFA_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXLOSSDISPOSALFA_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXLOSSDISPOSALFA_DETAIL As OTHER_EXLOSSDISPOSALFA_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL = CType(Me.Table,OTHER_EXLOSSDISPOSALFA_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_KEY' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_EXOLDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_EXOLDKEY' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_SOURCENO' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_EXOLDDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_DESC' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_DEDUCTIBLE' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_AMOUNT' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_NOTE' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLDD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLDD_DEDUCTIBLE_ADD' in table 'OTHER_EXLOSSDISPOSALFA_DET"& _ 
                            "AIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXLOSSDISPOSALFA_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXLOSSDISPOSALFARow() As OTHER_EXLOSSDISPOSALFARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL")),OTHER_EXLOSSDISPOSALFARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXLOSSDISPOSALFA_OTHER_EXLOSSDISPOSALFA_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_KEYNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_EXOLDKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_EXOLDKEYNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_EXOLDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_SOURCENONull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_DESCNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_AMOUNTNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_NOTENull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLDD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLDD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.EXOLDD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXLOSSDISPOSALFA_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_ENTERTAINNSTAFFRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_ENTERTAINNSTAFF As OTHER_ENTERTAINNSTAFFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_ENTERTAINNSTAFF = CType(Me.Table,OTHER_ENTERTAINNSTAFFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_KEY' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_EXOENSKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_EXOENSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_EXOENSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_SOURCENO' in table 'OTHER_ENTERTAINNSTAFF' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_DESC' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_AMOUNT' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_DEDUCTIBLE' in table 'OTHER_ENTERTAINNSTAFF' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_NOTE' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_DETAIL' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENS_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENS_DEDUCTIBLE_ADD' in table 'OTHER_ENTERTAINNSTAFF' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_ENTERTAINNSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_KEYNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_SOURCENONull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_DESCNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_AMOUNTNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_DEDUCTIBLENull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_NOTENull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_DETAILNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENS_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENS_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.EXOENS_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_ENTERTAINNSTAFF_DETAILRows() As OTHER_ENTERTAINNSTAFF_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL") Is Nothing) Then
                Return New OTHER_ENTERTAINNSTAFF_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL")),OTHER_ENTERTAINNSTAFF_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_ENTERTAINNSTAFF_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_ENTERTAINNSTAFF_DETAIL As OTHER_ENTERTAINNSTAFF_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_ENTERTAINNSTAFF_DETAIL = CType(Me.Table,OTHER_ENTERTAINNSTAFF_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_KEY' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_EXOENSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_EXOENSKEY' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_SOURCENO' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_EXOENSDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_DESC' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_DEDUCTIBLE' in table 'OTHER_ENTERTAINNSTAFF_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_AMOUNT' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_NOTE' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOENSD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOENSD_DEDUCTIBLE_ADD' in table 'OTHER_ENTERTAINNSTAFF_DET"& _ 
                            "AIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_ENTERTAINNSTAFF_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_ENTERTAINNSTAFFRow() As OTHER_ENTERTAINNSTAFFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL")),OTHER_ENTERTAINNSTAFFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_ENTERTAINNSTAFF_OTHER_ENTERTAINNSTAFF_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_KEYNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_EXOENSKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_EXOENSKEYNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_EXOENSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_SOURCENONull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_DESCNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_DEDUCTIBLENull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_AMOUNTNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_NOTENull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOENSD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOENSD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.EXOENSD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_ENTERTAINNSTAFF_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_ENTERTAINSTAFFRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_ENTERTAINSTAFF As OTHER_ENTERTAINSTAFFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_ENTERTAINSTAFF = CType(Me.Table,OTHER_ENTERTAINSTAFFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_KEY' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_EXOESKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_EXOESKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_EXOESKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_SOURCENO' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_DESC' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_AMOUNT' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_DEDUCTIBLE' in table 'OTHER_ENTERTAINSTAFF' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_NOTE' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_DETAIL' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOES_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOES_DEDUCTIBLE_ADD' in table 'OTHER_ENTERTAINSTAFF' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_ENTERTAINSTAFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_KEYNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_SOURCENONull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_DESCNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_AMOUNTNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_DEDUCTIBLENull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_NOTENull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_DETAILNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOES_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOES_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.EXOES_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_ENTERTAINSTAFF_DETAILRows() As OTHER_ENTERTAINSTAFF_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL") Is Nothing) Then
                Return New OTHER_ENTERTAINSTAFF_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL")),OTHER_ENTERTAINSTAFF_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_ENTERTAINSTAFF_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_ENTERTAINSTAFF_DETAIL As OTHER_ENTERTAINSTAFF_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_ENTERTAINSTAFF_DETAIL = CType(Me.Table,OTHER_ENTERTAINSTAFF_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_KEY' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_EXOESKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_EXOESKEY' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_SOURCENO' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_EXOESDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_DESC' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_DEDUCTIBLE' in table 'OTHER_ENTERTAINSTAFF_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_AMOUNT' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_NOTE' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOESD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOESD_DEDUCTIBLE_ADD' in table 'OTHER_ENTERTAINSTAFF_DETAI"& _ 
                            "L' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_ENTERTAINSTAFF_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_ENTERTAINSTAFFRow() As OTHER_ENTERTAINSTAFFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL")),OTHER_ENTERTAINSTAFFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_ENTERTAINSTAFF_OTHER_ENTERTAINSTAFF_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_KEYNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_EXOESKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_EXOESKEYNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_EXOESKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_SOURCENONull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_DESCNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_DEDUCTIBLENull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_AMOUNTNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_NOTENull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOESD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOESD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.EXOESD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_ENTERTAINSTAFF_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXPENALTYRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXPENALTY As OTHER_EXPENALTYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXPENALTY = CType(Me.Table,OTHER_EXPENALTYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_KEY' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_EXOPKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_EXOPKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_EXOPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_SOURCENO' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_DESC' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_AMOUNT' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_DEDUCTIBLE' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_NOTE' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_DETAIL' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOP_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOP_DEDUCTIBLE_ADD' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXPENALTY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_KEYNull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_SOURCENONull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_DESCNull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_AMOUNTNull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_NOTENull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_DETAILNull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOP_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOP_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXPENALTY.EXOP_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXPENALTY.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXPENALTY.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXPENALTY_DETAILRows() As OTHER_EXPENALTY_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL") Is Nothing) Then
                Return New OTHER_EXPENALTY_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL")),OTHER_EXPENALTY_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXPENALTY_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXPENALTY_DETAIL As OTHER_EXPENALTY_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXPENALTY_DETAIL = CType(Me.Table,OTHER_EXPENALTY_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_KEY' in table 'OTHER_EXPENALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_EXOPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_EXOPKEY' in table 'OTHER_EXPENALTY_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_SOURCENO' in table 'OTHER_EXPENALTY_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_EXOPDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_DESC' in table 'OTHER_EXPENALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_DEDUCTIBLE' in table 'OTHER_EXPENALTY_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_AMOUNT' in table 'OTHER_EXPENALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_NOTE' in table 'OTHER_EXPENALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPD_DEDUCTIBLE_ADD' in table 'OTHER_EXPENALTY_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXPENALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENALTY_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXPENALTY_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENALTY_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXPENALTYRow() As OTHER_EXPENALTYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL")),OTHER_EXPENALTYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXPENALTY_OTHER_EXPENALTY_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_KEYNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_EXOPKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_EXOPKEYNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_EXOPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_SOURCENONull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_DESCNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_AMOUNTNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_NOTENull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.EXOPD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENALTY_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXPENALTY_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXPROVISIONACCRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXPROVISIONACC As OTHER_EXPROVISIONACCDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXPROVISIONACC = CType(Me.Table,OTHER_EXPROVISIONACCDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_KEY' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_EXOPAKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_EXOPAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_EXOPAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_SOURCENO' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_DESC' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_AMOUNT' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_DEDUCTIBLE' in table 'OTHER_EXPROVISIONACC' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_NOTE' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_DETAIL' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPA_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPA_DEDUCTIBLE_ADD' in table 'OTHER_EXPROVISIONACC' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXPROVISIONACC' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_KEYNull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_SOURCENONull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_DESCNull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_AMOUNTNull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_NOTENull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_DETAILNull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPA_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPA_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXPROVISIONACC.EXOPA_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXPROVISIONACC.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXPROVISIONACC.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXPROVISIONACC_DETAILRows() As OTHER_EXPROVISIONACC_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL") Is Nothing) Then
                Return New OTHER_EXPROVISIONACC_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL")),OTHER_EXPROVISIONACC_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXPROVISIONACC_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXPROVISIONACC_DETAIL As OTHER_EXPROVISIONACC_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXPROVISIONACC_DETAIL = CType(Me.Table,OTHER_EXPROVISIONACC_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_KEY' in table 'OTHER_EXPROVISIONACC_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_EXOPAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_EXOPAKEY' in table 'OTHER_EXPROVISIONACC_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_SOURCENO' in table 'OTHER_EXPROVISIONACC_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_EXOPADKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPADKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_DESC' in table 'OTHER_EXPROVISIONACC_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_DEDUCTIBLE' in table 'OTHER_EXPROVISIONACC_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_AMOUNT' in table 'OTHER_EXPROVISIONACC_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_NOTE' in table 'OTHER_EXPROVISIONACC_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOPAD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOPAD_DEDUCTIBLE_ADD' in table 'OTHER_EXPROVISIONACC_DETAI"& _ 
                            "L' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXPROVISIONACC_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXPROVISIONACC_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXPROVISIONACCRow() As OTHER_EXPROVISIONACCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL")),OTHER_EXPROVISIONACCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXPROVISIONACC_OTHER_EXPROVISIONACC_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_KEYNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_EXOPAKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_EXOPAKEYNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_EXOPAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_SOURCENONull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_DESCNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_AMOUNTNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_NOTENull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOPAD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOPAD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.EXOPAD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPROVISIONACC_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXPROVISIONACC_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXLEAVEPASSAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXLEAVEPASSAGE As OTHER_EXLEAVEPASSAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXLEAVEPASSAGE = CType(Me.Table,OTHER_EXLEAVEPASSAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_KEY' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_EXOLPKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_EXOLPKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_EXOLPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_SOURCENO' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_DESC' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_AMOUNT' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_DEDUCTIBLE' in table 'OTHER_EXLEAVEPASSAGE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_NOTE' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_DETAIL' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLP_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLP_DEDUCTIBLE_ADD' in table 'OTHER_EXLEAVEPASSAGE' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXLEAVEPASSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_KEYNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_SOURCENONull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_DESCNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_AMOUNTNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_NOTENull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_DETAILNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLP_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLP_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.EXOLP_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXLEAVEPASSAGE_DETAILRows() As OTHER_EXLEAVEPASSAGE_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL") Is Nothing) Then
                Return New OTHER_EXLEAVEPASSAGE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL")),OTHER_EXLEAVEPASSAGE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXLEAVEPASSAGE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXLEAVEPASSAGE_DETAIL As OTHER_EXLEAVEPASSAGE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXLEAVEPASSAGE_DETAIL = CType(Me.Table,OTHER_EXLEAVEPASSAGE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_KEY' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_EXOLPKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_EXOLPKEY' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_SOURCENO' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_EXOLPDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_DESC' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_DEDUCTIBLE' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_AMOUNT' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_NOTE' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOLPD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOLPD_DEDUCTIBLE_ADD' in table 'OTHER_EXLEAVEPASSAGE_DETAI"& _ 
                            "L' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXLEAVEPASSAGE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXLEAVEPASSAGERow() As OTHER_EXLEAVEPASSAGERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL")),OTHER_EXLEAVEPASSAGERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXLEAVEPASSAGE_OTHER_EXLEAVEPASSAGE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_KEYNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_EXOLPKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_EXOLPKEYNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_EXOLPKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_SOURCENONull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_DESCNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_AMOUNTNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_NOTENull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOLPD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOLPD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.EXOLPD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXLEAVEPASSAGE_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXFAWRITTENOFFRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXFAWRITTENOFF As OTHER_EXFAWRITTENOFFDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXFAWRITTENOFF = CType(Me.Table,OTHER_EXFAWRITTENOFFDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_KEY' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_EXOWOKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_EXOWOKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_EXOWOKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_SOURCENO' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_DESC' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_AMOUNT' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_DEDUCTIBLE' in table 'OTHER_EXFAWRITTENOFF' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_NOTE' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_DETAIL' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWO_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWO_DEDUCTIBLE_ADD' in table 'OTHER_EXFAWRITTENOFF' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXFAWRITTENOFF' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_KEYNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_SOURCENONull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_DESCNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_AMOUNTNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_NOTENull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_DETAILNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWO_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWO_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.EXOWO_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXFAWRITTENOFF_DETAILRows() As OTHER_EXFAWRITTENOFF_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL") Is Nothing) Then
                Return New OTHER_EXFAWRITTENOFF_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL")),OTHER_EXFAWRITTENOFF_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXFAWRITTENOFF_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXFAWRITTENOFF_DETAIL As OTHER_EXFAWRITTENOFF_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXFAWRITTENOFF_DETAIL = CType(Me.Table,OTHER_EXFAWRITTENOFF_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_KEY' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_EXOWOKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWOKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_EXOWOKEY' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWOKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_SOURCENO' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_EXOWODKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWODKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWODKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_DESC' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_DEDUCTIBLE' in table 'OTHER_EXFAWRITTENOFF_DETAIL' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_AMOUNT' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_NOTE' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOWOD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOWOD_DEDUCTIBLE_ADD' in table 'OTHER_EXFAWRITTENOFF_DETAI"& _ 
                            "L' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXFAWRITTENOFF_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXFAWRITTENOFFRow() As OTHER_EXFAWRITTENOFFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL")),OTHER_EXFAWRITTENOFFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXFAWRITTENOFF_OTHER_EXFAWRITTENOFF_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_KEYNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_EXOWOKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWOKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_EXOWOKEYNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_EXOWOKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_SOURCENONull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_DESCNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_AMOUNTNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_NOTENull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOWOD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOWOD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.EXOWOD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXFAWRITTENOFF_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXURLOSSFOREIGNRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXURLOSSFOREIGN As OTHER_EXURLOSSFOREIGNDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXURLOSSFOREIGN = CType(Me.Table,OTHER_EXURLOSSFOREIGNDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_KEY' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_EXOURKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_EXOURKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_EXOURKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_SOURCENO' in table 'OTHER_EXURLOSSFOREIGN' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_DESC' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_AMOUNT' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_DEDUCTIBLE' in table 'OTHER_EXURLOSSFOREIGN' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_NOTE' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_DETAIL' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOUR_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOUR_DEDUCTIBLE_ADD' in table 'OTHER_EXURLOSSFOREIGN' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXURLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_KEYNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_SOURCENONull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_DESCNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_AMOUNTNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_NOTENull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_DETAILNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOUR_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOUR_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.EXOUR_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXURLOSSFOREIGN_DETAILRows() As OTHER_EXURLOSSFOREIGN_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL") Is Nothing) Then
                Return New OTHER_EXURLOSSFOREIGN_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL")),OTHER_EXURLOSSFOREIGN_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXURLOSSFOREIGN_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXURLOSSFOREIGN_DETAIL As OTHER_EXURLOSSFOREIGN_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXURLOSSFOREIGN_DETAIL = CType(Me.Table,OTHER_EXURLOSSFOREIGN_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_KEY' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_EXOURKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_EXOURKEY' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_SOURCENO' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_EXOURDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_DESC' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_DEDUCTIBLE' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_AMOUNT' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_NOTE' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOURD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOURD_DEDUCTIBLE_ADD' in table 'OTHER_EXURLOSSFOREIGN_DETA"& _ 
                            "IL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_DEDUCTIBLE_ADD' in table 'OTHER_EXURLOSSFOREIGN_DETAI"& _ 
                            "L' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXURLOSSFOREIGN_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXURLOSSFOREIGNRow() As OTHER_EXURLOSSFOREIGNRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL")),OTHER_EXURLOSSFOREIGNRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXURLOSSFOREIGN_OTHER_EXURLOSSFOREIGN_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_KEYNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_EXOURKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_EXOURKEYNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_EXOURKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_SOURCENONull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_DESCNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_AMOUNTNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_NOTENull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOURD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOURD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXOURD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXURLOSSFOREIGN_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXRLOSSFOREIGNTRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXRLOSSFOREIGNT As OTHER_EXRLOSSFOREIGNTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXRLOSSFOREIGNT = CType(Me.Table,OTHER_EXRLOSSFOREIGNTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_KEY' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_EXORTKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_EXORTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_EXORTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_SOURCENO' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_DESC' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_AMOUNT' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_DEDUCTIBLE' in table 'OTHER_EXRLOSSFOREIGNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_NOTE' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_DETAIL' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORT_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORT_DEDUCTIBLE_ADD' in table 'OTHER_EXRLOSSFOREIGNT' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXRLOSSFOREIGNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_KEYNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_SOURCENONull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_DESCNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_AMOUNTNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_NOTENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_DETAILNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORT_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORT_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.EXORT_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXRLOSSFOREIGNT_DETAILRows() As OTHER_EXRLOSSFOREIGNT_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL") Is Nothing) Then
                Return New OTHER_EXRLOSSFOREIGNT_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL")),OTHER_EXRLOSSFOREIGNT_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXRLOSSFOREIGNT_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXRLOSSFOREIGNT_DETAIL As OTHER_EXRLOSSFOREIGNT_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL = CType(Me.Table,OTHER_EXRLOSSFOREIGNT_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_KEY' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_EXORTKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_EXORTKEY' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_SOURCENO' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_EXORTDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_DESC' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_DEDUCTIBLE' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_AMOUNT' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_NOTE' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORTD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORTD_DEDUCTIBLE_ADD' in table 'OTHER_EXRLOSSFOREIGNT_DETA"& _ 
                            "IL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXRLOSSFOREIGNT_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXRLOSSFOREIGNTRow() As OTHER_EXRLOSSFOREIGNTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL")),OTHER_EXRLOSSFOREIGNTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXRLOSSFOREIGNT_OTHER_EXRLOSSFOREIGNT_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_KEYNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_EXORTKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_EXORTKEYNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_EXORTKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_SOURCENONull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_DESCNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_AMOUNTNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_NOTENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORTD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORTD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.EXORTD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGNT_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXRLOSSFOREIGNRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXRLOSSFOREIGN As OTHER_EXRLOSSFOREIGNDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXRLOSSFOREIGN = CType(Me.Table,OTHER_EXRLOSSFOREIGNDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_KEY' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_EXORKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_EXORKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_EXORKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_SOURCENO' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_DESC' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_AMOUNT' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_DEDUCTIBLE' in table 'OTHER_EXRLOSSFOREIGN' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_NOTE' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_DETAIL' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOR_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOR_DEDUCTIBLE_ADD' in table 'OTHER_EXRLOSSFOREIGN' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXRLOSSFOREIGN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_KEYNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_SOURCENONull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_DESCNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_AMOUNTNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_NOTENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_DETAILNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOR_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOR_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.EXOR_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXRLOSSFOREIGN_DETAILRows() As OTHER_EXRLOSSFOREIGN_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL") Is Nothing) Then
                Return New OTHER_EXRLOSSFOREIGN_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL")),OTHER_EXRLOSSFOREIGN_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXRLOSSFOREIGN_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXRLOSSFOREIGN_DETAIL As OTHER_EXRLOSSFOREIGN_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXRLOSSFOREIGN_DETAIL = CType(Me.Table,OTHER_EXRLOSSFOREIGN_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_KEY' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_EXORKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_EXORKEY' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_SOURCENO' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_EXORDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_DESC' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_DEDUCTIBLE' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_AMOUNT' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_NOTE' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXORD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXORD_DEDUCTIBLE_ADD' in table 'OTHER_EXRLOSSFOREIGN_DETAIL"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXRLOSSFOREIGN_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXRLOSSFOREIGNRow() As OTHER_EXRLOSSFOREIGNRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL")),OTHER_EXRLOSSFOREIGNRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXRLOSSFOREIGN_OTHER_EXRLOSSFOREIGN_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_KEYNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_EXORKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_EXORKEYNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_EXORKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_SOURCENONull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_DESCNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_AMOUNTNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_NOTENull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXORD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXORD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.EXORD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXRLOSSFOREIGN_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXINITIALSUBRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXINITIALSUB As OTHER_EXINITIALSUBDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXINITIALSUB = CType(Me.Table,OTHER_EXINITIALSUBDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_KEY' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_EXOISKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_EXOISKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_EXOISKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_SOURCENO' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_DESC' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_AMOUNT' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_DEDUCTIBLE' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_NOTE' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_DETAIL' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOIS_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOIS_DEDUCTIBLE_ADD' in table 'OTHER_EXINITIALSUB' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXINITIALSUB' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_KEYNull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_SOURCENONull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_DESCNull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_AMOUNTNull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_NOTENull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_DETAILNull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOIS_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOIS_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXINITIALSUB.EXOIS_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXINITIALSUB.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXINITIALSUB.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXINITIALSUB_DETAILRows() As OTHER_EXINITIALSUB_DETAILRow()
            If (Me.Table.ChildRelations("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB") Is Nothing) Then
                Return New OTHER_EXINITIALSUB_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB")),OTHER_EXINITIALSUB_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXINITIALSUB_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXINITIALSUB_DETAIL As OTHER_EXINITIALSUB_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXINITIALSUB_DETAIL = CType(Me.Table,OTHER_EXINITIALSUB_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_KEY' in table 'OTHER_EXINITIALSUB_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_EXOISKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_EXOISKEY' in table 'OTHER_EXINITIALSUB_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_SOURCENO' in table 'OTHER_EXINITIALSUB_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_EXOISDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_DESC' in table 'OTHER_EXINITIALSUB_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_DEDUCTIBLE' in table 'OTHER_EXINITIALSUB_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_AMOUNT' in table 'OTHER_EXINITIALSUB_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_NOTE' in table 'OTHER_EXINITIALSUB_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOISD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOISD_DEDUCTIBLE_ADD' in table 'OTHER_EXINITIALSUB_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXINITIALSUB_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXINITIALSUB_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXINITIALSUB_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXINITIALSUB_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXINITIALSUBRow() As OTHER_EXINITIALSUBRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB")),OTHER_EXINITIALSUBRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PLFST_SALES_DETAIL_OTHER_EXINITIALSUB"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_KEYNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_EXOISKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_EXOISKEYNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_EXOISKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_SOURCENONull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_DESCNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_AMOUNTNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_NOTENull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOISD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOISD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.EXOISD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXINITIALSUB_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXINITIALSUB_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXCAPITALEXPRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXCAPITALEXP As OTHER_EXCAPITALEXPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXCAPITALEXP = CType(Me.Table,OTHER_EXCAPITALEXPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_KEY' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_EXOCEKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_EXOCEKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_EXOCEKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_SOURCENO' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_DESC' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_AMOUNT' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_DEDUCTIBLE' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_NOTE' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_DETAIL' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCE_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCE_DEDUCTIBLE_ADD' in table 'OTHER_EXCAPITALEXP' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXCAPITALEXP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_KEYNull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_SOURCENONull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_DESCNull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_AMOUNTNull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_NOTENull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_DETAILNull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCE_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCE_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXCAPITALEXP.EXOCE_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXCAPITALEXP.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXCAPITALEXP.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXCAPITALEXP_DETAILRows() As OTHER_EXCAPITALEXP_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL") Is Nothing) Then
                Return New OTHER_EXCAPITALEXP_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL")),OTHER_EXCAPITALEXP_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXCAPITALEXP_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXCAPITALEXP_DETAIL As OTHER_EXCAPITALEXP_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXCAPITALEXP_DETAIL = CType(Me.Table,OTHER_EXCAPITALEXP_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_KEY' in table 'OTHER_EXCAPITALEXP_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_EXOCEKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_EXOCEKEY' in table 'OTHER_EXCAPITALEXP_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_SOURCENO' in table 'OTHER_EXCAPITALEXP_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_EXOCEDKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_DESC' in table 'OTHER_EXCAPITALEXP_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_DEDUCTIBLE' in table 'OTHER_EXCAPITALEXP_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_AMOUNT' in table 'OTHER_EXCAPITALEXP_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_NOTE' in table 'OTHER_EXCAPITALEXP_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOCED_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOCED_DEDUCTIBLE_ADD' in table 'OTHER_EXCAPITALEXP_DETAIL'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXCAPITALEXP_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXCAPITALEXP_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXCAPITALEXPRow() As OTHER_EXCAPITALEXPRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL")),OTHER_EXCAPITALEXPRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXCAPITALEXP_OTHER_EXCAPITALEXP_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_KEYNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_EXOCEKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_EXOCEKEYNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_EXOCEKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_SOURCENONull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_DESCNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_AMOUNTNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_NOTENull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOCED_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOCED_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.EXOCED_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXCAPITALEXP_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXCAPITALEXP_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXPENSESRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXPENSES As OTHER_EXPENSESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXPENSES = CType(Me.Table,OTHER_EXPENSESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_KEY' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_EXOKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXPENSES.EXO_EXOKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_EXOKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_DESC' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_AMOUNT' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_DEDUCTIBLE' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_NOTE' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_SOURCENO' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_DETAIL' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXO_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXO_DEDUCTIBLE_ADD' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_KEYNull()
            Me(Me.tableOTHER_EXPENSES.EXO_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_DESCNull()
            Me(Me.tableOTHER_EXPENSES.EXO_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_AMOUNTNull()
            Me(Me.tableOTHER_EXPENSES.EXO_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_NOTENull()
            Me(Me.tableOTHER_EXPENSES.EXO_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_SOURCENONull()
            Me(Me.tableOTHER_EXPENSES.EXO_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_DETAILNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_DETAILNull()
            Me(Me.tableOTHER_EXPENSES.EXO_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXO_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXO_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXPENSES.EXO_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXPENSES.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXPENSES.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetOTHER_EXPENSES_DETAILRows() As OTHER_EXPENSES_DETAILRow()
            If (Me.Table.ChildRelations("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL") Is Nothing) Then
                Return New OTHER_EXPENSES_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL")),OTHER_EXPENSES_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class OTHER_EXPENSES_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableOTHER_EXPENSES_DETAIL As OTHER_EXPENSES_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOTHER_EXPENSES_DETAIL = CType(Me.Table,OTHER_EXPENSES_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_KEY' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_EXOKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXOKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_EXOKEY' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXOKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_SOURCENO' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_EXODKEY() As Integer
            Get
                Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXODKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXODKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_DESC' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_DEDUCTIBLE' in table 'OTHER_EXPENSES_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_AMOUNT' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_NOTE' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXOD_DEDUCTIBLE_ADD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLE_ADDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXOD_DEDUCTIBLE_ADD' in table 'OTHER_EXPENSES_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLE_ADDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RowIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.RowIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RowIndex' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.RowIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Pecentage() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOTHER_EXPENSES_DETAIL.PecentageColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pecentage' in table 'OTHER_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOTHER_EXPENSES_DETAIL.PecentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OTHER_EXPENSESRow() As OTHER_EXPENSESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL")),OTHER_EXPENSESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OTHER_EXPENSES_OTHER_EXPENSES_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_KEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_KEYNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_EXOKEYNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXOKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_EXOKEYNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_EXOKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_SOURCENONull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_DESCNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_DESCNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_DEDUCTIBLENull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_AMOUNTNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_NOTENull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_NOTENull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXOD_DEDUCTIBLE_ADDNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLE_ADDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXOD_DEDUCTIBLE_ADDNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.EXOD_DEDUCTIBLE_ADDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRowIndexNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.RowIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRowIndexNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.RowIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPecentageNull() As Boolean
            Return Me.IsNull(Me.tableOTHER_EXPENSES_DETAIL.PecentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPecentageNull()
            Me(Me.tableOTHER_EXPENSES_DETAIL.PecentageColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RENTAL_INCOMERow
        Inherits Global.System.Data.DataRow
        
        Private tableRENTAL_INCOME As RENTAL_INCOMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRENTAL_INCOME = CType(Me.Table,RENTAL_INCOMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_KEY' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_RENTKEY() As Integer
            Get
                Return CType(Me(Me.tableRENTAL_INCOME.RI_RENTKEYColumn),Integer)
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_RENTKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_TYPE' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_ADDRESS' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_DATE' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_AMOUNT' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_SOURCENO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_SOURCENOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_SOURCENO' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_STATUS4d() As String
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_STATUS4dColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_STATUS4d' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_STATUS4dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RI_DATE_END() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRENTAL_INCOME.RI_DATE_ENDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RI_DATE_END' in table 'RENTAL_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRENTAL_INCOME.RI_DATE_ENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_KEYNull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_KEYNull()
            Me(Me.tableRENTAL_INCOME.RI_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_TYPENull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_TYPENull()
            Me(Me.tableRENTAL_INCOME.RI_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_ADDRESSNull()
            Me(Me.tableRENTAL_INCOME.RI_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_DATENull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_DATENull()
            Me(Me.tableRENTAL_INCOME.RI_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_AMOUNTNull()
            Me(Me.tableRENTAL_INCOME.RI_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_SOURCENONull()
            Me(Me.tableRENTAL_INCOME.RI_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_STATUS4dNull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_STATUS4dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_STATUS4dNull()
            Me(Me.tableRENTAL_INCOME.RI_STATUS4dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRI_DATE_ENDNull() As Boolean
            Return Me.IsNull(Me.tableRENTAL_INCOME.RI_DATE_ENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRI_DATE_ENDNull()
            Me(Me.tableRENTAL_INCOME.RI_DATE_ENDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class NonAllowable_ExpensesRow
        Inherits Global.System.Data.DataRow
        
        Private tableNonAllowable_Expenses As NonAllowable_ExpensesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNonAllowable_Expenses = CType(Me.Table,NonAllowable_ExpensesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonAllowable_Expenses.IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'NonAllowable_Expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonAllowable_Expenses.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KeyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonAllowable_Expenses.KeyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyName' in table 'NonAllowable_Expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonAllowable_Expenses.KeyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonAllowable_Expenses.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'NonAllowable_Expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonAllowable_Expenses.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableNonAllowable_Expenses.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'NonAllowable_Expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonAllowable_Expenses.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TitleKeyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableNonAllowable_Expenses.TitleKeyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TitleKeyName' in table 'NonAllowable_Expenses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNonAllowable_Expenses.TitleKeyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableNonAllowable_Expenses.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableNonAllowable_Expenses.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKeyNameNull() As Boolean
            Return Me.IsNull(Me.tableNonAllowable_Expenses.KeyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKeyNameNull()
            Me(Me.tableNonAllowable_Expenses.KeyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableNonAllowable_Expenses.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableNonAllowable_Expenses.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableNonAllowable_Expenses.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAmountNull()
            Me(Me.tableNonAllowable_Expenses.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTitleKeyNameNull() As Boolean
            Return Me.IsNull(Me.tableNonAllowable_Expenses.TitleKeyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTitleKeyNameNull()
            Me(Me.tableNonAllowable_Expenses.TitleKeyNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_SALES_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_SALES_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_SALES_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_SALES_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_SALESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_SALESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_SALESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_SALESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class BUSINESS_SOURCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BUSINESS_SOURCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As BUSINESS_SOURCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As BUSINESS_SOURCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_OPENSTOCKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_OPENSTOCKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_OPENSTOCKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_OPENSTOCKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_OPENSTOCK_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_OPENSTOCK_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_OPENSTOCK_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_OPENSTOCK_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_PURCHASERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_PURCHASERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_PURCHASERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_PURCHASERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_PURCHASE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_PURCHASE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_PURCHASE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_PURCHASE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_DEPRECIATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_DEPRECIATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_DEPRECIATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_DEPRECIATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_DEPRECIATION_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_DEPRECIATION_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_DEPRECIATION_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_DEPRECIATION_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_ALLOWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_ALLOWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_ALLOWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_ALLOWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_ALLOW_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_ALLOW_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_ALLOW_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_ALLOW_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_NONALLOWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_NONALLOWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_NONALLOWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_NONALLOWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_NONALLOW_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_NONALLOW_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_NONALLOW_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_NONALLOW_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_CLOSESTOCKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_CLOSESTOCKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_CLOSESTOCKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_CLOSESTOCKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLFST_CLOSESTOCK_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLFST_CLOSESTOCK_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLFST_CLOSESTOCK_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLFST_CLOSESTOCK_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class NONSOURCE_BUSINESSINCOMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NONSOURCE_BUSINESSINCOMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As NONSOURCE_BUSINESSINCOMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As NONSOURCE_BUSINESSINCOMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class NONSOURCE_BUSINESSINCOME_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NONSOURCE_BUSINESSINCOME_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As NONSOURCE_BUSINESSINCOME_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As NONSOURCE_BUSINESSINCOME_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_REALFETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_REALFETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_REALFETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_REALFETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_REALFET_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_REALFET_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_REALFET_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_REALFET_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NBINTERESTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NBINTERESTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NBINTERESTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NBINTERESTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NBINTEREST_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NBINTEREST_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NBINTEREST_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NBINTEREST_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NBROYALTYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NBROYALTYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NBROYALTYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NBROYALTYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NBROYALTY_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NBROYALTY_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NBROYALTY_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NBROYALTY_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_INCOMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_INCOMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_INCOMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_INCOMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_INCOME_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_INCOME_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_INCOME_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_INCOME_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTDISPOSALFARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTDISPOSALFARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTDISPOSALFARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTDISPOSALFARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTDISPOSALFA_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTDISPOSALFA_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTDISPOSALFA_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTDISPOSALFA_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTDISPOSALINVESTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTDISPOSALINVESTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTDISPOSALINVESTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTDISPOSALINVESTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTDISPOSALINVEST_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTDISPOSALINVEST_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTDISPOSALINVEST_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTDISPOSALINVEST_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTFOREIGNINCREMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTFOREIGNINCREMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTFOREIGNINCREMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTFOREIGNINCREMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTFOREIGNINCREM_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTFOREIGNINCREM_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTFOREIGNINCREM_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTFOREIGNINCREM_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTREALFERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTREALFERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTREALFERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTREALFERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTREALFE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTREALFE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTREALFE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTREALFE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTUREALFENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTUREALFENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTUREALFENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTUREALFENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTUREALFENT_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTUREALFENT_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTUREALFENT_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTUREALFENT_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTUREALFETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTUREALFETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTUREALFETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTUREALFETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_NTUREALFET_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_NTUREALFET_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_NTUREALFET_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_NTUREALFET_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_INTERESTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_INTERESTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_INTERESTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_INTERESTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_INTEREST_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_INTEREST_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_INTEREST_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_INTEREST_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_LEGALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_LEGALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_LEGALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_LEGALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_LEGAL_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_LEGAL_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_LEGAL_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_LEGAL_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_TECH_FEERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_TECH_FEERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_TECH_FEERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_TECH_FEERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_TECH_FEE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_TECH_FEE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_TECH_FEE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_TECH_FEE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_CONTRACTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_CONTRACTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_CONTRACTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_CONTRACTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_CONTRACT_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_CONTRACT_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_CONTRACT_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_CONTRACT_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_DIRECTORS_FEERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_DIRECTORS_FEERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_DIRECTORS_FEERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_DIRECTORS_FEERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_DIRECTORS_FEE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_DIRECTORS_FEE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_DIRECTORS_FEE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_DIRECTORS_FEE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_SALARYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_SALARYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_SALARYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_SALARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_SALARY_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_SALARY_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_SALARY_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_SALARY_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_EMPLSTOCK_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_EMPLSTOCK_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_EMPLSTOCK_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_EMPLSTOCK_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_EMPL_STOCKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_EMPL_STOCKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_EMPL_STOCKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_EMPL_STOCKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_ROYALTYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_ROYALTYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_ROYALTYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_ROYALTYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_ROYALTY_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_ROYALTY_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_ROYALTY_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_ROYALTY_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_RENTALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_RENTALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_RENTALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_RENTALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_RENTAL_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_RENTAL_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_RENTAL_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_RENTAL_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_REPAIRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_REPAIRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_REPAIRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_REPAIRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_REPAIR_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_REPAIR_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_REPAIR_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_REPAIR_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_RESEARCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_RESEARCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_RESEARCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_RESEARCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_RESEARCH_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_RESEARCH_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_RESEARCH_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_RESEARCH_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_PROMOTERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_PROMOTERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_PROMOTERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_PROMOTERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_PROMOTE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_PROMOTE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_PROMOTE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_PROMOTE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_TRAVELRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_TRAVELRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_TRAVELRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_TRAVELRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_TRAVEL_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_TRAVEL_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_TRAVEL_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_TRAVEL_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_JKDMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_JKDMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_JKDMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_JKDMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EXPENSES_JKDM_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EXPENSES_JKDM_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EXPENSES_JKDM_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EXPENSES_JKDM_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXDEPRECIATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXDEPRECIATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXDEPRECIATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXDEPRECIATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXDEPRECIATION_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXDEPRECIATION_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXDEPRECIATION_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXDEPRECIATION_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXAPPRDONATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXAPPRDONATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXAPPRDONATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXAPPRDONATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXAPPRDONATION_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXAPPRDONATION_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXAPPRDONATION_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXAPPRDONATION_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXNAPPRDONATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXNAPPRDONATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXNAPPRDONATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXNAPPRDONATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXNAPPRDONATION_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXNAPPRDONATION_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXNAPPRDONATION_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXNAPPRDONATION_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXZAKATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXZAKATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXZAKATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXZAKATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXZAKAT_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXZAKAT_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXZAKAT_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXZAKAT_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXLOSSDISPOSALFARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXLOSSDISPOSALFARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXLOSSDISPOSALFARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXLOSSDISPOSALFARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXLOSSDISPOSALFA_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXLOSSDISPOSALFA_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXLOSSDISPOSALFA_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXLOSSDISPOSALFA_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_ENTERTAINNSTAFFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_ENTERTAINNSTAFFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_ENTERTAINNSTAFFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_ENTERTAINNSTAFFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_ENTERTAINNSTAFF_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_ENTERTAINNSTAFF_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_ENTERTAINNSTAFF_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_ENTERTAINNSTAFF_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_ENTERTAINSTAFFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_ENTERTAINSTAFFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_ENTERTAINSTAFFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_ENTERTAINSTAFFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_ENTERTAINSTAFF_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_ENTERTAINSTAFF_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_ENTERTAINSTAFF_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_ENTERTAINSTAFF_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXPENALTYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXPENALTYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXPENALTYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXPENALTYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXPENALTY_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXPENALTY_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXPENALTY_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXPENALTY_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXPROVISIONACCRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXPROVISIONACCRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXPROVISIONACCRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXPROVISIONACCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXPROVISIONACC_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXPROVISIONACC_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXPROVISIONACC_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXPROVISIONACC_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXLEAVEPASSAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXLEAVEPASSAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXLEAVEPASSAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXLEAVEPASSAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXLEAVEPASSAGE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXLEAVEPASSAGE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXLEAVEPASSAGE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXLEAVEPASSAGE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXFAWRITTENOFFRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXFAWRITTENOFFRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXFAWRITTENOFFRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXFAWRITTENOFFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXFAWRITTENOFF_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXFAWRITTENOFF_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXFAWRITTENOFF_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXFAWRITTENOFF_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXURLOSSFOREIGNRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXURLOSSFOREIGNRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXURLOSSFOREIGNRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXURLOSSFOREIGNRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXURLOSSFOREIGN_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXURLOSSFOREIGN_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXURLOSSFOREIGN_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXURLOSSFOREIGN_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXRLOSSFOREIGNTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXRLOSSFOREIGNTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXRLOSSFOREIGNTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXRLOSSFOREIGNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXRLOSSFOREIGNT_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXRLOSSFOREIGNT_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXRLOSSFOREIGNT_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXRLOSSFOREIGNT_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXRLOSSFOREIGNRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXRLOSSFOREIGNRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXRLOSSFOREIGNRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXRLOSSFOREIGNRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXRLOSSFOREIGN_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXRLOSSFOREIGN_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXRLOSSFOREIGN_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXRLOSSFOREIGN_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXINITIALSUBRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXINITIALSUBRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXINITIALSUBRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXINITIALSUBRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXINITIALSUB_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXINITIALSUB_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXINITIALSUB_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXINITIALSUB_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXCAPITALEXPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXCAPITALEXPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXCAPITALEXPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXCAPITALEXPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXCAPITALEXP_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXCAPITALEXP_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXCAPITALEXP_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXCAPITALEXP_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXPENSESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXPENSESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXPENSESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXPENSESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class OTHER_EXPENSES_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OTHER_EXPENSES_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As OTHER_EXPENSES_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As OTHER_EXPENSES_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RENTAL_INCOMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RENTAL_INCOMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RENTAL_INCOMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RENTAL_INCOMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class NonAllowable_ExpensesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NonAllowable_ExpensesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As NonAllowable_ExpensesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As NonAllowable_ExpensesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
