'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsPNL"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPNL
    Inherits Global.System.Data.DataSet
    
    Private tablePL_SALES As PL_SALESDataTable
    
    Private tablePL_SALES_DETAIL As PL_SALES_DETAILDataTable
    
    Private tablePNL_INFO As PNL_INFODataTable
    
    Private tablePL_OPENSTOCK As PL_OPENSTOCKDataTable
    
    Private tablePL_OPENSTOCK_DETAIL As PL_OPENSTOCK_DETAILDataTable
    
    Private tablePL_PRODUCTION_COST_DETAIL As PL_PRODUCTION_COST_DETAILDataTable
    
    Private tablePL_PRODUCTION_COST As PL_PRODUCTION_COSTDataTable
    
    Private tablePNL_SEARCH As PNL_SEARCHDataTable
    
    Private tablePL_CLOSESTOCK As PL_CLOSESTOCKDataTable
    
    Private tablePL_CLOSESTOCK_DETAIL As PL_CLOSESTOCK_DETAILDataTable
    
    Private tablePL_INCOME_OTHERBUSINESS As PL_INCOME_OTHERBUSINESSDataTable
    
    Private tablePL_INCOME_OTHERBUSINESS_DETAIL As PL_INCOME_OTHERBUSINESS_DETAILDataTable
    
    Private tablePL_INCOME_NONBUSINESS As PL_INCOME_NONBUSINESSDataTable
    
    Private tablePL_INCOME_NONBUSINESS_DETAIL As PL_INCOME_NONBUSINESS_DETAILDataTable
    
    Private tablePL_INCOME_NONTAXABLE As PL_INCOME_NONTAXABLEDataTable
    
    Private tablePL_INCOME_NONTAXABLE_DETAIL As PL_INCOME_NONTAXABLE_DETAILDataTable
    
    Private tablePL_EXPENSES As PL_EXPENSESDataTable
    
    Private tablePL_EXPENSES_DETAIL As PL_EXPENSES_DETAILDataTable
    
    Private tablePL_EXP_NONALLOWLOSS As PL_EXP_NONALLOWLOSSDataTable
    
    Private tablePL_EXP_NONALLOWLOSS_DETAIL As PL_EXP_NONALLOWLOSS_DETAILDataTable
    
    Private tablePL_EXP_NONALLOWEXPEND As PL_EXP_NONALLOWEXPENDDataTable
    
    Private tablePL_EXP_NONALLOWEXPEND_DETAIL As PL_EXP_NONALLOWEXPEND_DETAILDataTable
    
    Private tablePL_EXP_PERSONAL As PL_EXP_PERSONALDataTable
    
    Private tablePL_EXP_PERSONAL_DETAIL As PL_EXP_PERSONAL_DETAILDataTable
    
    Private tablePL_PURCHASE As PL_PURCHASEDataTable
    
    Private tablePL_PURCHASE_DETAIL As PL_PURCHASE_DETAILDataTable
    
    Private tablePROFIT_LOSS_ACCOUNT As PROFIT_LOSS_ACCOUNTDataTable
    
    Private tableAi As AiDataTable
    
    Private tableAi_Result As Ai_ResultDataTable
    
    Private tableINCOME_ADJ_NON_TAXABLE_INCOME As INCOME_ADJ_NON_TAXABLE_INCOMEDataTable
    
    Private relationFK_PL_SALES_PL_SALES_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_EXPENSES_PL_EXPENSES_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_PL_PURCHASE_PL_PURCHASE_DETAIL As Global.System.Data.DataRelation
    
    Private relationFK_Ai_Ai_Result As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PL_SALES")) Is Nothing) Then
                MyBase.Tables.Add(New PL_SALESDataTable(ds.Tables("PL_SALES")))
            End If
            If (Not (ds.Tables("PL_SALES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_SALES_DETAILDataTable(ds.Tables("PL_SALES_DETAIL")))
            End If
            If (Not (ds.Tables("PNL_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New PNL_INFODataTable(ds.Tables("PNL_INFO")))
            End If
            If (Not (ds.Tables("PL_OPENSTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PL_OPENSTOCKDataTable(ds.Tables("PL_OPENSTOCK")))
            End If
            If (Not (ds.Tables("PL_OPENSTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_OPENSTOCK_DETAILDataTable(ds.Tables("PL_OPENSTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("PL_PRODUCTION_COST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PRODUCTION_COST_DETAILDataTable(ds.Tables("PL_PRODUCTION_COST_DETAIL")))
            End If
            If (Not (ds.Tables("PL_PRODUCTION_COST")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PRODUCTION_COSTDataTable(ds.Tables("PL_PRODUCTION_COST")))
            End If
            If (Not (ds.Tables("PNL_SEARCH")) Is Nothing) Then
                MyBase.Tables.Add(New PNL_SEARCHDataTable(ds.Tables("PNL_SEARCH")))
            End If
            If (Not (ds.Tables("PL_CLOSESTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PL_CLOSESTOCKDataTable(ds.Tables("PL_CLOSESTOCK")))
            End If
            If (Not (ds.Tables("PL_CLOSESTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_CLOSESTOCK_DETAILDataTable(ds.Tables("PL_CLOSESTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("PL_INCOME_OTHERBUSINESS")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_OTHERBUSINESSDataTable(ds.Tables("PL_INCOME_OTHERBUSINESS")))
            End If
            If (Not (ds.Tables("PL_INCOME_OTHERBUSINESS_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_OTHERBUSINESS_DETAILDataTable(ds.Tables("PL_INCOME_OTHERBUSINESS_DETAIL")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONBUSINESS")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONBUSINESSDataTable(ds.Tables("PL_INCOME_NONBUSINESS")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONBUSINESS_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONBUSINESS_DETAILDataTable(ds.Tables("PL_INCOME_NONBUSINESS_DETAIL")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONTAXABLE")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONTAXABLEDataTable(ds.Tables("PL_INCOME_NONTAXABLE")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONTAXABLE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONTAXABLE_DETAILDataTable(ds.Tables("PL_INCOME_NONTAXABLE_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXPENSES")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXPENSESDataTable(ds.Tables("PL_EXPENSES")))
            End If
            If (Not (ds.Tables("PL_EXPENSES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXPENSES_DETAILDataTable(ds.Tables("PL_EXPENSES_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWLOSS")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWLOSSDataTable(ds.Tables("PL_EXP_NONALLOWLOSS")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWLOSS_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWLOSS_DETAILDataTable(ds.Tables("PL_EXP_NONALLOWLOSS_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWEXPEND")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWEXPENDDataTable(ds.Tables("PL_EXP_NONALLOWEXPEND")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWEXPEND_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWEXPEND_DETAILDataTable(ds.Tables("PL_EXP_NONALLOWEXPEND_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXP_PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_PERSONALDataTable(ds.Tables("PL_EXP_PERSONAL")))
            End If
            If (Not (ds.Tables("PL_EXP_PERSONAL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_PERSONAL_DETAILDataTable(ds.Tables("PL_EXP_PERSONAL_DETAIL")))
            End If
            If (Not (ds.Tables("PL_PURCHASE")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PURCHASEDataTable(ds.Tables("PL_PURCHASE")))
            End If
            If (Not (ds.Tables("PL_PURCHASE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PURCHASE_DETAILDataTable(ds.Tables("PL_PURCHASE_DETAIL")))
            End If
            If (Not (ds.Tables("PROFIT_LOSS_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New PROFIT_LOSS_ACCOUNTDataTable(ds.Tables("PROFIT_LOSS_ACCOUNT")))
            End If
            If (Not (ds.Tables("Ai")) Is Nothing) Then
                MyBase.Tables.Add(New AiDataTable(ds.Tables("Ai")))
            End If
            If (Not (ds.Tables("Ai_Result")) Is Nothing) Then
                MyBase.Tables.Add(New Ai_ResultDataTable(ds.Tables("Ai_Result")))
            End If
            If (Not (ds.Tables("INCOME_ADJ_NON_TAXABLE_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_ADJ_NON_TAXABLE_INCOMEDataTable(ds.Tables("INCOME_ADJ_NON_TAXABLE_INCOME")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_SALES() As PL_SALESDataTable
        Get
            Return Me.tablePL_SALES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_SALES_DETAIL() As PL_SALES_DETAILDataTable
        Get
            Return Me.tablePL_SALES_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PNL_INFO() As PNL_INFODataTable
        Get
            Return Me.tablePNL_INFO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_OPENSTOCK() As PL_OPENSTOCKDataTable
        Get
            Return Me.tablePL_OPENSTOCK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_OPENSTOCK_DETAIL() As PL_OPENSTOCK_DETAILDataTable
        Get
            Return Me.tablePL_OPENSTOCK_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_PRODUCTION_COST_DETAIL() As PL_PRODUCTION_COST_DETAILDataTable
        Get
            Return Me.tablePL_PRODUCTION_COST_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_PRODUCTION_COST() As PL_PRODUCTION_COSTDataTable
        Get
            Return Me.tablePL_PRODUCTION_COST
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PNL_SEARCH() As PNL_SEARCHDataTable
        Get
            Return Me.tablePNL_SEARCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_CLOSESTOCK() As PL_CLOSESTOCKDataTable
        Get
            Return Me.tablePL_CLOSESTOCK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_CLOSESTOCK_DETAIL() As PL_CLOSESTOCK_DETAILDataTable
        Get
            Return Me.tablePL_CLOSESTOCK_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_INCOME_OTHERBUSINESS() As PL_INCOME_OTHERBUSINESSDataTable
        Get
            Return Me.tablePL_INCOME_OTHERBUSINESS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_INCOME_OTHERBUSINESS_DETAIL() As PL_INCOME_OTHERBUSINESS_DETAILDataTable
        Get
            Return Me.tablePL_INCOME_OTHERBUSINESS_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_INCOME_NONBUSINESS() As PL_INCOME_NONBUSINESSDataTable
        Get
            Return Me.tablePL_INCOME_NONBUSINESS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_INCOME_NONBUSINESS_DETAIL() As PL_INCOME_NONBUSINESS_DETAILDataTable
        Get
            Return Me.tablePL_INCOME_NONBUSINESS_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_INCOME_NONTAXABLE() As PL_INCOME_NONTAXABLEDataTable
        Get
            Return Me.tablePL_INCOME_NONTAXABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_INCOME_NONTAXABLE_DETAIL() As PL_INCOME_NONTAXABLE_DETAILDataTable
        Get
            Return Me.tablePL_INCOME_NONTAXABLE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXPENSES() As PL_EXPENSESDataTable
        Get
            Return Me.tablePL_EXPENSES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXPENSES_DETAIL() As PL_EXPENSES_DETAILDataTable
        Get
            Return Me.tablePL_EXPENSES_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXP_NONALLOWLOSS() As PL_EXP_NONALLOWLOSSDataTable
        Get
            Return Me.tablePL_EXP_NONALLOWLOSS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXP_NONALLOWLOSS_DETAIL() As PL_EXP_NONALLOWLOSS_DETAILDataTable
        Get
            Return Me.tablePL_EXP_NONALLOWLOSS_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXP_NONALLOWEXPEND() As PL_EXP_NONALLOWEXPENDDataTable
        Get
            Return Me.tablePL_EXP_NONALLOWEXPEND
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXP_NONALLOWEXPEND_DETAIL() As PL_EXP_NONALLOWEXPEND_DETAILDataTable
        Get
            Return Me.tablePL_EXP_NONALLOWEXPEND_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXP_PERSONAL() As PL_EXP_PERSONALDataTable
        Get
            Return Me.tablePL_EXP_PERSONAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_EXP_PERSONAL_DETAIL() As PL_EXP_PERSONAL_DETAILDataTable
        Get
            Return Me.tablePL_EXP_PERSONAL_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_PURCHASE() As PL_PURCHASEDataTable
        Get
            Return Me.tablePL_PURCHASE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PL_PURCHASE_DETAIL() As PL_PURCHASE_DETAILDataTable
        Get
            Return Me.tablePL_PURCHASE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROFIT_LOSS_ACCOUNT() As PROFIT_LOSS_ACCOUNTDataTable
        Get
            Return Me.tablePROFIT_LOSS_ACCOUNT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ai() As AiDataTable
        Get
            Return Me.tableAi
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ai_Result() As Ai_ResultDataTable
        Get
            Return Me.tableAi_Result
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INCOME_ADJ_NON_TAXABLE_INCOME() As INCOME_ADJ_NON_TAXABLE_INCOMEDataTable
        Get
            Return Me.tableINCOME_ADJ_NON_TAXABLE_INCOME
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsPNL = CType(MyBase.Clone,dsPNL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("PL_SALES")) Is Nothing) Then
                MyBase.Tables.Add(New PL_SALESDataTable(ds.Tables("PL_SALES")))
            End If
            If (Not (ds.Tables("PL_SALES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_SALES_DETAILDataTable(ds.Tables("PL_SALES_DETAIL")))
            End If
            If (Not (ds.Tables("PNL_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New PNL_INFODataTable(ds.Tables("PNL_INFO")))
            End If
            If (Not (ds.Tables("PL_OPENSTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PL_OPENSTOCKDataTable(ds.Tables("PL_OPENSTOCK")))
            End If
            If (Not (ds.Tables("PL_OPENSTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_OPENSTOCK_DETAILDataTable(ds.Tables("PL_OPENSTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("PL_PRODUCTION_COST_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PRODUCTION_COST_DETAILDataTable(ds.Tables("PL_PRODUCTION_COST_DETAIL")))
            End If
            If (Not (ds.Tables("PL_PRODUCTION_COST")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PRODUCTION_COSTDataTable(ds.Tables("PL_PRODUCTION_COST")))
            End If
            If (Not (ds.Tables("PNL_SEARCH")) Is Nothing) Then
                MyBase.Tables.Add(New PNL_SEARCHDataTable(ds.Tables("PNL_SEARCH")))
            End If
            If (Not (ds.Tables("PL_CLOSESTOCK")) Is Nothing) Then
                MyBase.Tables.Add(New PL_CLOSESTOCKDataTable(ds.Tables("PL_CLOSESTOCK")))
            End If
            If (Not (ds.Tables("PL_CLOSESTOCK_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_CLOSESTOCK_DETAILDataTable(ds.Tables("PL_CLOSESTOCK_DETAIL")))
            End If
            If (Not (ds.Tables("PL_INCOME_OTHERBUSINESS")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_OTHERBUSINESSDataTable(ds.Tables("PL_INCOME_OTHERBUSINESS")))
            End If
            If (Not (ds.Tables("PL_INCOME_OTHERBUSINESS_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_OTHERBUSINESS_DETAILDataTable(ds.Tables("PL_INCOME_OTHERBUSINESS_DETAIL")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONBUSINESS")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONBUSINESSDataTable(ds.Tables("PL_INCOME_NONBUSINESS")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONBUSINESS_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONBUSINESS_DETAILDataTable(ds.Tables("PL_INCOME_NONBUSINESS_DETAIL")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONTAXABLE")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONTAXABLEDataTable(ds.Tables("PL_INCOME_NONTAXABLE")))
            End If
            If (Not (ds.Tables("PL_INCOME_NONTAXABLE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_INCOME_NONTAXABLE_DETAILDataTable(ds.Tables("PL_INCOME_NONTAXABLE_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXPENSES")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXPENSESDataTable(ds.Tables("PL_EXPENSES")))
            End If
            If (Not (ds.Tables("PL_EXPENSES_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXPENSES_DETAILDataTable(ds.Tables("PL_EXPENSES_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWLOSS")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWLOSSDataTable(ds.Tables("PL_EXP_NONALLOWLOSS")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWLOSS_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWLOSS_DETAILDataTable(ds.Tables("PL_EXP_NONALLOWLOSS_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWEXPEND")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWEXPENDDataTable(ds.Tables("PL_EXP_NONALLOWEXPEND")))
            End If
            If (Not (ds.Tables("PL_EXP_NONALLOWEXPEND_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_NONALLOWEXPEND_DETAILDataTable(ds.Tables("PL_EXP_NONALLOWEXPEND_DETAIL")))
            End If
            If (Not (ds.Tables("PL_EXP_PERSONAL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_PERSONALDataTable(ds.Tables("PL_EXP_PERSONAL")))
            End If
            If (Not (ds.Tables("PL_EXP_PERSONAL_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_EXP_PERSONAL_DETAILDataTable(ds.Tables("PL_EXP_PERSONAL_DETAIL")))
            End If
            If (Not (ds.Tables("PL_PURCHASE")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PURCHASEDataTable(ds.Tables("PL_PURCHASE")))
            End If
            If (Not (ds.Tables("PL_PURCHASE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New PL_PURCHASE_DETAILDataTable(ds.Tables("PL_PURCHASE_DETAIL")))
            End If
            If (Not (ds.Tables("PROFIT_LOSS_ACCOUNT")) Is Nothing) Then
                MyBase.Tables.Add(New PROFIT_LOSS_ACCOUNTDataTable(ds.Tables("PROFIT_LOSS_ACCOUNT")))
            End If
            If (Not (ds.Tables("Ai")) Is Nothing) Then
                MyBase.Tables.Add(New AiDataTable(ds.Tables("Ai")))
            End If
            If (Not (ds.Tables("Ai_Result")) Is Nothing) Then
                MyBase.Tables.Add(New Ai_ResultDataTable(ds.Tables("Ai_Result")))
            End If
            If (Not (ds.Tables("INCOME_ADJ_NON_TAXABLE_INCOME")) Is Nothing) Then
                MyBase.Tables.Add(New INCOME_ADJ_NON_TAXABLE_INCOMEDataTable(ds.Tables("INCOME_ADJ_NON_TAXABLE_INCOME")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePL_SALES = CType(MyBase.Tables("PL_SALES"),PL_SALESDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_SALES) Is Nothing) Then
                Me.tablePL_SALES.InitVars
            End If
        End If
        Me.tablePL_SALES_DETAIL = CType(MyBase.Tables("PL_SALES_DETAIL"),PL_SALES_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_SALES_DETAIL) Is Nothing) Then
                Me.tablePL_SALES_DETAIL.InitVars
            End If
        End If
        Me.tablePNL_INFO = CType(MyBase.Tables("PNL_INFO"),PNL_INFODataTable)
        If (initTable = true) Then
            If (Not (Me.tablePNL_INFO) Is Nothing) Then
                Me.tablePNL_INFO.InitVars
            End If
        End If
        Me.tablePL_OPENSTOCK = CType(MyBase.Tables("PL_OPENSTOCK"),PL_OPENSTOCKDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_OPENSTOCK) Is Nothing) Then
                Me.tablePL_OPENSTOCK.InitVars
            End If
        End If
        Me.tablePL_OPENSTOCK_DETAIL = CType(MyBase.Tables("PL_OPENSTOCK_DETAIL"),PL_OPENSTOCK_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_OPENSTOCK_DETAIL) Is Nothing) Then
                Me.tablePL_OPENSTOCK_DETAIL.InitVars
            End If
        End If
        Me.tablePL_PRODUCTION_COST_DETAIL = CType(MyBase.Tables("PL_PRODUCTION_COST_DETAIL"),PL_PRODUCTION_COST_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_PRODUCTION_COST_DETAIL) Is Nothing) Then
                Me.tablePL_PRODUCTION_COST_DETAIL.InitVars
            End If
        End If
        Me.tablePL_PRODUCTION_COST = CType(MyBase.Tables("PL_PRODUCTION_COST"),PL_PRODUCTION_COSTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_PRODUCTION_COST) Is Nothing) Then
                Me.tablePL_PRODUCTION_COST.InitVars
            End If
        End If
        Me.tablePNL_SEARCH = CType(MyBase.Tables("PNL_SEARCH"),PNL_SEARCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePNL_SEARCH) Is Nothing) Then
                Me.tablePNL_SEARCH.InitVars
            End If
        End If
        Me.tablePL_CLOSESTOCK = CType(MyBase.Tables("PL_CLOSESTOCK"),PL_CLOSESTOCKDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_CLOSESTOCK) Is Nothing) Then
                Me.tablePL_CLOSESTOCK.InitVars
            End If
        End If
        Me.tablePL_CLOSESTOCK_DETAIL = CType(MyBase.Tables("PL_CLOSESTOCK_DETAIL"),PL_CLOSESTOCK_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_CLOSESTOCK_DETAIL) Is Nothing) Then
                Me.tablePL_CLOSESTOCK_DETAIL.InitVars
            End If
        End If
        Me.tablePL_INCOME_OTHERBUSINESS = CType(MyBase.Tables("PL_INCOME_OTHERBUSINESS"),PL_INCOME_OTHERBUSINESSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_INCOME_OTHERBUSINESS) Is Nothing) Then
                Me.tablePL_INCOME_OTHERBUSINESS.InitVars
            End If
        End If
        Me.tablePL_INCOME_OTHERBUSINESS_DETAIL = CType(MyBase.Tables("PL_INCOME_OTHERBUSINESS_DETAIL"),PL_INCOME_OTHERBUSINESS_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_INCOME_OTHERBUSINESS_DETAIL) Is Nothing) Then
                Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.InitVars
            End If
        End If
        Me.tablePL_INCOME_NONBUSINESS = CType(MyBase.Tables("PL_INCOME_NONBUSINESS"),PL_INCOME_NONBUSINESSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_INCOME_NONBUSINESS) Is Nothing) Then
                Me.tablePL_INCOME_NONBUSINESS.InitVars
            End If
        End If
        Me.tablePL_INCOME_NONBUSINESS_DETAIL = CType(MyBase.Tables("PL_INCOME_NONBUSINESS_DETAIL"),PL_INCOME_NONBUSINESS_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_INCOME_NONBUSINESS_DETAIL) Is Nothing) Then
                Me.tablePL_INCOME_NONBUSINESS_DETAIL.InitVars
            End If
        End If
        Me.tablePL_INCOME_NONTAXABLE = CType(MyBase.Tables("PL_INCOME_NONTAXABLE"),PL_INCOME_NONTAXABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_INCOME_NONTAXABLE) Is Nothing) Then
                Me.tablePL_INCOME_NONTAXABLE.InitVars
            End If
        End If
        Me.tablePL_INCOME_NONTAXABLE_DETAIL = CType(MyBase.Tables("PL_INCOME_NONTAXABLE_DETAIL"),PL_INCOME_NONTAXABLE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_INCOME_NONTAXABLE_DETAIL) Is Nothing) Then
                Me.tablePL_INCOME_NONTAXABLE_DETAIL.InitVars
            End If
        End If
        Me.tablePL_EXPENSES = CType(MyBase.Tables("PL_EXPENSES"),PL_EXPENSESDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXPENSES) Is Nothing) Then
                Me.tablePL_EXPENSES.InitVars
            End If
        End If
        Me.tablePL_EXPENSES_DETAIL = CType(MyBase.Tables("PL_EXPENSES_DETAIL"),PL_EXPENSES_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXPENSES_DETAIL) Is Nothing) Then
                Me.tablePL_EXPENSES_DETAIL.InitVars
            End If
        End If
        Me.tablePL_EXP_NONALLOWLOSS = CType(MyBase.Tables("PL_EXP_NONALLOWLOSS"),PL_EXP_NONALLOWLOSSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXP_NONALLOWLOSS) Is Nothing) Then
                Me.tablePL_EXP_NONALLOWLOSS.InitVars
            End If
        End If
        Me.tablePL_EXP_NONALLOWLOSS_DETAIL = CType(MyBase.Tables("PL_EXP_NONALLOWLOSS_DETAIL"),PL_EXP_NONALLOWLOSS_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXP_NONALLOWLOSS_DETAIL) Is Nothing) Then
                Me.tablePL_EXP_NONALLOWLOSS_DETAIL.InitVars
            End If
        End If
        Me.tablePL_EXP_NONALLOWEXPEND = CType(MyBase.Tables("PL_EXP_NONALLOWEXPEND"),PL_EXP_NONALLOWEXPENDDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXP_NONALLOWEXPEND) Is Nothing) Then
                Me.tablePL_EXP_NONALLOWEXPEND.InitVars
            End If
        End If
        Me.tablePL_EXP_NONALLOWEXPEND_DETAIL = CType(MyBase.Tables("PL_EXP_NONALLOWEXPEND_DETAIL"),PL_EXP_NONALLOWEXPEND_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXP_NONALLOWEXPEND_DETAIL) Is Nothing) Then
                Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.InitVars
            End If
        End If
        Me.tablePL_EXP_PERSONAL = CType(MyBase.Tables("PL_EXP_PERSONAL"),PL_EXP_PERSONALDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXP_PERSONAL) Is Nothing) Then
                Me.tablePL_EXP_PERSONAL.InitVars
            End If
        End If
        Me.tablePL_EXP_PERSONAL_DETAIL = CType(MyBase.Tables("PL_EXP_PERSONAL_DETAIL"),PL_EXP_PERSONAL_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_EXP_PERSONAL_DETAIL) Is Nothing) Then
                Me.tablePL_EXP_PERSONAL_DETAIL.InitVars
            End If
        End If
        Me.tablePL_PURCHASE = CType(MyBase.Tables("PL_PURCHASE"),PL_PURCHASEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_PURCHASE) Is Nothing) Then
                Me.tablePL_PURCHASE.InitVars
            End If
        End If
        Me.tablePL_PURCHASE_DETAIL = CType(MyBase.Tables("PL_PURCHASE_DETAIL"),PL_PURCHASE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePL_PURCHASE_DETAIL) Is Nothing) Then
                Me.tablePL_PURCHASE_DETAIL.InitVars
            End If
        End If
        Me.tablePROFIT_LOSS_ACCOUNT = CType(MyBase.Tables("PROFIT_LOSS_ACCOUNT"),PROFIT_LOSS_ACCOUNTDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROFIT_LOSS_ACCOUNT) Is Nothing) Then
                Me.tablePROFIT_LOSS_ACCOUNT.InitVars
            End If
        End If
        Me.tableAi = CType(MyBase.Tables("Ai"),AiDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAi) Is Nothing) Then
                Me.tableAi.InitVars
            End If
        End If
        Me.tableAi_Result = CType(MyBase.Tables("Ai_Result"),Ai_ResultDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAi_Result) Is Nothing) Then
                Me.tableAi_Result.InitVars
            End If
        End If
        Me.tableINCOME_ADJ_NON_TAXABLE_INCOME = CType(MyBase.Tables("INCOME_ADJ_NON_TAXABLE_INCOME"),INCOME_ADJ_NON_TAXABLE_INCOMEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINCOME_ADJ_NON_TAXABLE_INCOME) Is Nothing) Then
                Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.InitVars
            End If
        End If
        Me.relationFK_PL_SALES_PL_SALES_DETAIL = Me.Relations("FK_PL_SALES_PL_SALES_DETAIL")
        Me.relationFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL = Me.Relations("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL")
        Me.relationFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL = Me.Relations("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL")
        Me.relationFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL = Me.Relations("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL")
        Me.relationFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL = Me.Relations("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL")
        Me.relationFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL = Me.Relations("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL")
        Me.relationFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL = Me.Relations("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL")
        Me.relationFK_PL_EXPENSES_PL_EXPENSES_DETAIL = Me.Relations("FK_PL_EXPENSES_PL_EXPENSES_DETAIL")
        Me.relationFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL = Me.Relations("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL")
        Me.relationFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL = Me.Relations("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL")
        Me.relationFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL = Me.Relations("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL")
        Me.relationFK_PL_PURCHASE_PL_PURCHASE_DETAIL = Me.Relations("FK_PL_PURCHASE_PL_PURCHASE_DETAIL")
        Me.relationFK_Ai_Ai_Result = Me.Relations("FK_Ai_Ai_Result")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPNL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsPNL.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePL_SALES = New PL_SALESDataTable()
        MyBase.Tables.Add(Me.tablePL_SALES)
        Me.tablePL_SALES_DETAIL = New PL_SALES_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_SALES_DETAIL)
        Me.tablePNL_INFO = New PNL_INFODataTable()
        MyBase.Tables.Add(Me.tablePNL_INFO)
        Me.tablePL_OPENSTOCK = New PL_OPENSTOCKDataTable()
        MyBase.Tables.Add(Me.tablePL_OPENSTOCK)
        Me.tablePL_OPENSTOCK_DETAIL = New PL_OPENSTOCK_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_OPENSTOCK_DETAIL)
        Me.tablePL_PRODUCTION_COST_DETAIL = New PL_PRODUCTION_COST_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_PRODUCTION_COST_DETAIL)
        Me.tablePL_PRODUCTION_COST = New PL_PRODUCTION_COSTDataTable()
        MyBase.Tables.Add(Me.tablePL_PRODUCTION_COST)
        Me.tablePNL_SEARCH = New PNL_SEARCHDataTable()
        MyBase.Tables.Add(Me.tablePNL_SEARCH)
        Me.tablePL_CLOSESTOCK = New PL_CLOSESTOCKDataTable()
        MyBase.Tables.Add(Me.tablePL_CLOSESTOCK)
        Me.tablePL_CLOSESTOCK_DETAIL = New PL_CLOSESTOCK_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_CLOSESTOCK_DETAIL)
        Me.tablePL_INCOME_OTHERBUSINESS = New PL_INCOME_OTHERBUSINESSDataTable()
        MyBase.Tables.Add(Me.tablePL_INCOME_OTHERBUSINESS)
        Me.tablePL_INCOME_OTHERBUSINESS_DETAIL = New PL_INCOME_OTHERBUSINESS_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL)
        Me.tablePL_INCOME_NONBUSINESS = New PL_INCOME_NONBUSINESSDataTable()
        MyBase.Tables.Add(Me.tablePL_INCOME_NONBUSINESS)
        Me.tablePL_INCOME_NONBUSINESS_DETAIL = New PL_INCOME_NONBUSINESS_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_INCOME_NONBUSINESS_DETAIL)
        Me.tablePL_INCOME_NONTAXABLE = New PL_INCOME_NONTAXABLEDataTable()
        MyBase.Tables.Add(Me.tablePL_INCOME_NONTAXABLE)
        Me.tablePL_INCOME_NONTAXABLE_DETAIL = New PL_INCOME_NONTAXABLE_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_INCOME_NONTAXABLE_DETAIL)
        Me.tablePL_EXPENSES = New PL_EXPENSESDataTable()
        MyBase.Tables.Add(Me.tablePL_EXPENSES)
        Me.tablePL_EXPENSES_DETAIL = New PL_EXPENSES_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_EXPENSES_DETAIL)
        Me.tablePL_EXP_NONALLOWLOSS = New PL_EXP_NONALLOWLOSSDataTable()
        MyBase.Tables.Add(Me.tablePL_EXP_NONALLOWLOSS)
        Me.tablePL_EXP_NONALLOWLOSS_DETAIL = New PL_EXP_NONALLOWLOSS_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_EXP_NONALLOWLOSS_DETAIL)
        Me.tablePL_EXP_NONALLOWEXPEND = New PL_EXP_NONALLOWEXPENDDataTable()
        MyBase.Tables.Add(Me.tablePL_EXP_NONALLOWEXPEND)
        Me.tablePL_EXP_NONALLOWEXPEND_DETAIL = New PL_EXP_NONALLOWEXPEND_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL)
        Me.tablePL_EXP_PERSONAL = New PL_EXP_PERSONALDataTable()
        MyBase.Tables.Add(Me.tablePL_EXP_PERSONAL)
        Me.tablePL_EXP_PERSONAL_DETAIL = New PL_EXP_PERSONAL_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_EXP_PERSONAL_DETAIL)
        Me.tablePL_PURCHASE = New PL_PURCHASEDataTable()
        MyBase.Tables.Add(Me.tablePL_PURCHASE)
        Me.tablePL_PURCHASE_DETAIL = New PL_PURCHASE_DETAILDataTable()
        MyBase.Tables.Add(Me.tablePL_PURCHASE_DETAIL)
        Me.tablePROFIT_LOSS_ACCOUNT = New PROFIT_LOSS_ACCOUNTDataTable()
        MyBase.Tables.Add(Me.tablePROFIT_LOSS_ACCOUNT)
        Me.tableAi = New AiDataTable()
        MyBase.Tables.Add(Me.tableAi)
        Me.tableAi_Result = New Ai_ResultDataTable()
        MyBase.Tables.Add(Me.tableAi_Result)
        Me.tableINCOME_ADJ_NON_TAXABLE_INCOME = New INCOME_ADJ_NON_TAXABLE_INCOMEDataTable()
        MyBase.Tables.Add(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_SALES_PL_SALES_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_SALES.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_SALES_DETAIL.PLD_PLFCSDKEYColumn})
        Me.tablePL_SALES_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_OPENSTOCK.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_OPENSTOCK_DETAIL.PLD_PLFCSKEYColumn})
        Me.tablePL_OPENSTOCK_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_PRODUCTION_COST.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_PRODUCTION_COST_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_CLOSESTOCK.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSKEYColumn})
        Me.tablePL_CLOSESTOCK_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_INCOME_OTHERBUSINESS.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONBUSINESS.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_INCOME_NONBUSINESS_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONTAXABLE.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_INCOME_NONTAXABLE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_EXPENSES_PL_EXPENSES_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXPENSES.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXPENSES_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_EXPENSES_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWLOSS.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_EXP_NONALLOWLOSS_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWEXPEND.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXP_PERSONAL.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXAKEYColumn})
        Me.tablePL_EXP_PERSONAL_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PL_PURCHASE_PL_PURCHASE_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_PURCHASE.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSKEYColumn})
        Me.tablePL_PURCHASE_DETAIL.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_Ai_Ai_Result", New Global.System.Data.DataColumn() {Me.tableAi.IDColumn}, New Global.System.Data.DataColumn() {Me.tableAi_Result.ParentIDColumn})
        Me.tableAi_Result.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationFK_PL_SALES_PL_SALES_DETAIL = New Global.System.Data.DataRelation("FK_PL_SALES_PL_SALES_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_SALES.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_SALES_DETAIL.PLD_PLFCSDKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_SALES_PL_SALES_DETAIL)
        Me.relationFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL = New Global.System.Data.DataRelation("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_OPENSTOCK.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_OPENSTOCK_DETAIL.PLD_PLFCSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL)
        Me.relationFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL = New Global.System.Data.DataRelation("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_PRODUCTION_COST.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL)
        Me.relationFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL = New Global.System.Data.DataRelation("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_CLOSESTOCK.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL)
        Me.relationFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL = New Global.System.Data.DataRelation("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_INCOME_OTHERBUSINESS.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL)
        Me.relationFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL = New Global.System.Data.DataRelation("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONBUSINESS.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL)
        Me.relationFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL = New Global.System.Data.DataRelation("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONTAXABLE.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL)
        Me.relationFK_PL_EXPENSES_PL_EXPENSES_DETAIL = New Global.System.Data.DataRelation("FK_PL_EXPENSES_PL_EXPENSES_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXPENSES.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXPENSES_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_EXPENSES_PL_EXPENSES_DETAIL)
        Me.relationFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL = New Global.System.Data.DataRelation("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWLOSS.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL)
        Me.relationFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL = New Global.System.Data.DataRelation("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWEXPEND.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL)
        Me.relationFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL = New Global.System.Data.DataRelation("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_EXP_PERSONAL.EXA_EXAKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXAKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL)
        Me.relationFK_PL_PURCHASE_PL_PURCHASE_DETAIL = New Global.System.Data.DataRelation("FK_PL_PURCHASE_PL_PURCHASE_DETAIL", New Global.System.Data.DataColumn() {Me.tablePL_PURCHASE.PL_PLFCSKEYColumn}, New Global.System.Data.DataColumn() {Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSKEYColumn}, false)
        Me.Relations.Add(Me.relationFK_PL_PURCHASE_PL_PURCHASE_DETAIL)
        Me.relationFK_Ai_Ai_Result = New Global.System.Data.DataRelation("FK_Ai_Ai_Result", New Global.System.Data.DataColumn() {Me.tableAi.IDColumn}, New Global.System.Data.DataColumn() {Me.tableAi_Result.ParentIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Ai_Ai_Result)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_SALES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_SALES_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePNL_INFO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_OPENSTOCK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_OPENSTOCK_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_PRODUCTION_COST_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_PRODUCTION_COST() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePNL_SEARCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_CLOSESTOCK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_CLOSESTOCK_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_INCOME_OTHERBUSINESS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_INCOME_OTHERBUSINESS_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_INCOME_NONBUSINESS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_INCOME_NONBUSINESS_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_INCOME_NONTAXABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_INCOME_NONTAXABLE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXPENSES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXPENSES_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXP_NONALLOWLOSS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXP_NONALLOWLOSS_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXP_NONALLOWEXPEND() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXP_NONALLOWEXPEND_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXP_PERSONAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_EXP_PERSONAL_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_PURCHASE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePL_PURCHASE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePROFIT_LOSS_ACCOUNT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAi() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAi_Result() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeINCOME_ADJ_NON_TAXABLE_INCOME() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPNL = New dsPNL()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_SALESRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_SALESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_SALES_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_SALES_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PNL_INFORowChangeEventHandler(ByVal sender As Object, ByVal e As PNL_INFORowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_OPENSTOCKRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_OPENSTOCKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_OPENSTOCK_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_OPENSTOCK_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_PRODUCTION_COST_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_PRODUCTION_COST_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_PRODUCTION_COSTRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_PRODUCTION_COSTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PNL_SEARCHRowChangeEventHandler(ByVal sender As Object, ByVal e As PNL_SEARCHRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_CLOSESTOCKRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_CLOSESTOCKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_CLOSESTOCK_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_CLOSESTOCK_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_INCOME_OTHERBUSINESSRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_INCOME_OTHERBUSINESSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_INCOME_OTHERBUSINESS_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_INCOME_OTHERBUSINESS_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_INCOME_NONBUSINESSRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_INCOME_NONBUSINESSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_INCOME_NONBUSINESS_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_INCOME_NONBUSINESS_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_INCOME_NONTAXABLERowChangeEventHandler(ByVal sender As Object, ByVal e As PL_INCOME_NONTAXABLERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_INCOME_NONTAXABLE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_INCOME_NONTAXABLE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXPENSESRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXPENSESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXPENSES_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXPENSES_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXP_NONALLOWLOSSRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXP_NONALLOWLOSSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXP_NONALLOWLOSS_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXP_NONALLOWLOSS_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXP_NONALLOWEXPENDRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXP_NONALLOWEXPENDRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXP_NONALLOWEXPEND_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXP_NONALLOWEXPEND_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXP_PERSONALRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXP_PERSONALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_EXP_PERSONAL_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_EXP_PERSONAL_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_PURCHASERowChangeEventHandler(ByVal sender As Object, ByVal e As PL_PURCHASERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PL_PURCHASE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PL_PURCHASE_DETAILRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PROFIT_LOSS_ACCOUNTRowChangeEventHandler(ByVal sender As Object, ByVal e As PROFIT_LOSS_ACCOUNTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AiRowChangeEventHandler(ByVal sender As Object, ByVal e As AiRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Ai_ResultRowChangeEventHandler(ByVal sender As Object, ByVal e As Ai_ResultRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEventHandler(ByVal sender As Object, ByVal e As INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_SALESDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_SALESRow)
        
        Private columnPL_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPL_KEY As Global.System.Data.DataColumn
        
        Private columnPL_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPL_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPL_DESC As Global.System.Data.DataColumn
        
        Private columnPL_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPL_NOTE As Global.System.Data.DataColumn
        
        Private columnPL_DETAIL As Global.System.Data.DataColumn
        
        Private columnPL_1 As Global.System.Data.DataColumn
        
        Private columnPL_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_SALES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_SALESRow
            Get
                Return CType(Me.Rows(index),PL_SALESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALESRowChanging As PL_SALESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALESRowChanged As PL_SALESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALESRowDeleting As PL_SALESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALESRowDeleted As PL_SALESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_SALESRow(ByVal row As PL_SALESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_SALESRow(ByVal PL_PLTYPE As Short, ByVal PL_KEY As Integer, ByVal PL_SOURCENO As String, ByVal PL_DESC As String, ByVal PL_AMOUNT As Decimal, ByVal PL_NOTE As String, ByVal PL_DETAIL As String, ByVal PL_1 As String, ByVal PL_2 As String) As PL_SALESRow
            Dim rowPL_SALESRow As PL_SALESRow = CType(Me.NewRow,PL_SALESRow)
            Dim columnValuesArray() As Object = New Object() {PL_PLTYPE, PL_KEY, Nothing, PL_SOURCENO, PL_DESC, PL_AMOUNT, PL_NOTE, PL_DETAIL, PL_1, PL_2}
            rowPL_SALESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_SALESRow)
            Return rowPL_SALESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPL_PLFCSKEY(ByVal PL_PLFCSKEY As Integer) As PL_SALESRow
            Return CType(Me.Rows.Find(New Object() {PL_PLFCSKEY}),PL_SALESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_SALESDataTable = CType(MyBase.Clone,PL_SALESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_SALESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPL_PLTYPE = MyBase.Columns("PL_PLTYPE")
            Me.columnPL_KEY = MyBase.Columns("PL_KEY")
            Me.columnPL_PLFCSKEY = MyBase.Columns("PL_PLFCSKEY")
            Me.columnPL_SOURCENO = MyBase.Columns("PL_SOURCENO")
            Me.columnPL_DESC = MyBase.Columns("PL_DESC")
            Me.columnPL_AMOUNT = MyBase.Columns("PL_AMOUNT")
            Me.columnPL_NOTE = MyBase.Columns("PL_NOTE")
            Me.columnPL_DETAIL = MyBase.Columns("PL_DETAIL")
            Me.columnPL_1 = MyBase.Columns("PL_1")
            Me.columnPL_2 = MyBase.Columns("PL_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPL_PLTYPE = New Global.System.Data.DataColumn("PL_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLTYPE)
            Me.columnPL_KEY = New Global.System.Data.DataColumn("PL_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_KEY)
            Me.columnPL_PLFCSKEY = New Global.System.Data.DataColumn("PL_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLFCSKEY)
            Me.columnPL_SOURCENO = New Global.System.Data.DataColumn("PL_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_SOURCENO)
            Me.columnPL_DESC = New Global.System.Data.DataColumn("PL_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DESC)
            Me.columnPL_AMOUNT = New Global.System.Data.DataColumn("PL_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_AMOUNT)
            Me.columnPL_NOTE = New Global.System.Data.DataColumn("PL_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NOTE)
            Me.columnPL_DETAIL = New Global.System.Data.DataColumn("PL_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DETAIL)
            Me.columnPL_1 = New Global.System.Data.DataColumn("PL_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_1)
            Me.columnPL_2 = New Global.System.Data.DataColumn("PL_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPL_PLFCSKEY}, true))
            Me.columnPL_PLFCSKEY.AutoIncrement = true
            Me.columnPL_PLFCSKEY.AllowDBNull = false
            Me.columnPL_PLFCSKEY.Unique = true
            Me.columnPL_SOURCENO.MaxLength = 12
            Me.columnPL_DESC.MaxLength = 255
            Me.columnPL_NOTE.MaxLength = 1073741823
            Me.columnPL_DETAIL.MaxLength = 30
            Me.columnPL_1.MaxLength = 50
            Me.columnPL_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_SALESRow() As PL_SALESRow
            Return CType(Me.NewRow,PL_SALESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_SALESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_SALESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_SALESRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_SALESRowChanged(Me, New PL_SALESRowChangeEvent(CType(e.Row,PL_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_SALESRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_SALESRowChanging(Me, New PL_SALESRowChangeEvent(CType(e.Row,PL_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_SALESRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_SALESRowDeleted(Me, New PL_SALESRowChangeEvent(CType(e.Row,PL_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_SALESRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_SALESRowDeleting(Me, New PL_SALESRowChangeEvent(CType(e.Row,PL_SALESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_SALESRow(ByVal row As PL_SALESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_SALESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_SALES_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_SALES_DETAILRow)
        
        Private columnPLD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPLD_KEY As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPLD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSDKEY As Global.System.Data.DataColumn
        
        Private columnPLD_DESC As Global.System.Data.DataColumn
        
        Private columnPLD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_SALES_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_SALES_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_SALES_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALES_DETAILRowChanging As PL_SALES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALES_DETAILRowChanged As PL_SALES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALES_DETAILRowDeleting As PL_SALES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_SALES_DETAILRowDeleted As PL_SALES_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_SALES_DETAILRow(ByVal row As PL_SALES_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_SALES_DETAILRow(ByVal PLD_PLTYPE As Short, ByVal PLD_KEY As Integer, ByVal PLD_PLFCSKEY As Integer, ByVal PLD_SOURCENO As String, ByVal PLD_DESC As String, ByVal PLD_AMOUNT As Decimal, ByVal PLD_NOTE As String) As PL_SALES_DETAILRow
            Dim rowPL_SALES_DETAILRow As PL_SALES_DETAILRow = CType(Me.NewRow,PL_SALES_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {PLD_PLTYPE, PLD_KEY, PLD_PLFCSKEY, PLD_SOURCENO, Nothing, PLD_DESC, PLD_AMOUNT, PLD_NOTE}
            rowPL_SALES_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_SALES_DETAILRow)
            Return rowPL_SALES_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_SALES_DETAILDataTable = CType(MyBase.Clone,PL_SALES_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_SALES_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLD_PLTYPE = MyBase.Columns("PLD_PLTYPE")
            Me.columnPLD_KEY = MyBase.Columns("PLD_KEY")
            Me.columnPLD_PLFCSKEY = MyBase.Columns("PLD_PLFCSKEY")
            Me.columnPLD_SOURCENO = MyBase.Columns("PLD_SOURCENO")
            Me.columnPLD_PLFCSDKEY = MyBase.Columns("PLD_PLFCSDKEY")
            Me.columnPLD_DESC = MyBase.Columns("PLD_DESC")
            Me.columnPLD_AMOUNT = MyBase.Columns("PLD_AMOUNT")
            Me.columnPLD_NOTE = MyBase.Columns("PLD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLD_PLTYPE = New Global.System.Data.DataColumn("PLD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLTYPE)
            Me.columnPLD_KEY = New Global.System.Data.DataColumn("PLD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_KEY)
            Me.columnPLD_PLFCSKEY = New Global.System.Data.DataColumn("PLD_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSKEY)
            Me.columnPLD_SOURCENO = New Global.System.Data.DataColumn("PLD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_SOURCENO)
            Me.columnPLD_PLFCSDKEY = New Global.System.Data.DataColumn("PLD_PLFCSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSDKEY)
            Me.columnPLD_DESC = New Global.System.Data.DataColumn("PLD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_DESC)
            Me.columnPLD_AMOUNT = New Global.System.Data.DataColumn("PLD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_AMOUNT)
            Me.columnPLD_NOTE = New Global.System.Data.DataColumn("PLD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_NOTE)
            Me.columnPLD_PLFCSKEY.AllowDBNull = false
            Me.columnPLD_SOURCENO.MaxLength = 12
            Me.columnPLD_PLFCSDKEY.AutoIncrement = true
            Me.columnPLD_PLFCSDKEY.AllowDBNull = false
            Me.columnPLD_DESC.MaxLength = 255
            Me.columnPLD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_SALES_DETAILRow() As PL_SALES_DETAILRow
            Return CType(Me.NewRow,PL_SALES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_SALES_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_SALES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_SALES_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_SALES_DETAILRowChanged(Me, New PL_SALES_DETAILRowChangeEvent(CType(e.Row,PL_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_SALES_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_SALES_DETAILRowChanging(Me, New PL_SALES_DETAILRowChangeEvent(CType(e.Row,PL_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_SALES_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_SALES_DETAILRowDeleted(Me, New PL_SALES_DETAILRowChangeEvent(CType(e.Row,PL_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_SALES_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_SALES_DETAILRowDeleting(Me, New PL_SALES_DETAILRowChangeEvent(CType(e.Row,PL_SALES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_SALES_DETAILRow(ByVal row As PL_SALES_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_SALES_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PNL_INFODataTable
        Inherits Global.System.Data.TypedTableBase(Of PNL_INFORow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnKeyName As Global.System.Data.DataColumn
        
        Private columnLabelID As Global.System.Data.DataColumn
        
        Private columnTableName As Global.System.Data.DataColumn
        
        Private columnTableName_Details As Global.System.Data.DataColumn
        
        Private columnColumnName As Global.System.Data.DataColumn
        
        Private columnColumnKey As Global.System.Data.DataColumn
        
        Private columnColumnKey_Details As Global.System.Data.DataColumn
        
        Private columnColumnAmount As Global.System.Data.DataColumn
        
        Private columnColumnAmount_Details As Global.System.Data.DataColumn
        
        Private columnOldKey As Global.System.Data.DataColumn
        
        Private columnColumnOldKey As Global.System.Data.DataColumn
        
        Private columnColumnOldKey_Details As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnSequence As Global.System.Data.DataColumn
        
        Private columnColumnSource As Global.System.Data.DataColumn
        
        Private columnColumnSource_Details As Global.System.Data.DataColumn
        
        Private columnPrefixName As Global.System.Data.DataColumn
        
        Private columnPrefixName_Details As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PNL_INFO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KeyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LabelIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabelID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TableNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TableName_DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableName_Details
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnKey_DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnKey_Details
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnAmount_DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnAmount_Details
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OldKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnOldKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnOldKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnOldKey_DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnOldKey_Details
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SequenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSequence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnSourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnSource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ColumnSource_DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumnSource_Details
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PrefixNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefixName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PrefixName_DetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrefixName_Details
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PNL_INFORow
            Get
                Return CType(Me.Rows(index),PNL_INFORow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_INFORowChanging As PNL_INFORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_INFORowChanged As PNL_INFORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_INFORowDeleting As PNL_INFORowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_INFORowDeleted As PNL_INFORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPNL_INFORow(ByVal row As PNL_INFORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPNL_INFORow( _
                    ByVal KeyName As String,  _
                    ByVal LabelID As String,  _
                    ByVal TableName As String,  _
                    ByVal TableName_Details As String,  _
                    ByVal ColumnName As String,  _
                    ByVal ColumnKey As String,  _
                    ByVal ColumnKey_Details As String,  _
                    ByVal ColumnAmount As String,  _
                    ByVal ColumnAmount_Details As String,  _
                    ByVal OldKey As Integer,  _
                    ByVal ColumnOldKey As String,  _
                    ByVal ColumnOldKey_Details As String,  _
                    ByVal Description As String,  _
                    ByVal Sequence As Integer,  _
                    ByVal ColumnSource As String,  _
                    ByVal ColumnSource_Details As String,  _
                    ByVal PrefixName As String,  _
                    ByVal PrefixName_Details As String,  _
                    ByVal Amount As Decimal) As PNL_INFORow
            Dim rowPNL_INFORow As PNL_INFORow = CType(Me.NewRow,PNL_INFORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, KeyName, LabelID, TableName, TableName_Details, ColumnName, ColumnKey, ColumnKey_Details, ColumnAmount, ColumnAmount_Details, OldKey, ColumnOldKey, ColumnOldKey_Details, Description, Sequence, ColumnSource, ColumnSource_Details, PrefixName, PrefixName_Details, Amount}
            rowPNL_INFORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPNL_INFORow)
            Return rowPNL_INFORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PNL_INFODataTable = CType(MyBase.Clone,PNL_INFODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PNL_INFODataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnKeyName = MyBase.Columns("KeyName")
            Me.columnLabelID = MyBase.Columns("LabelID")
            Me.columnTableName = MyBase.Columns("TableName")
            Me.columnTableName_Details = MyBase.Columns("TableName_Details")
            Me.columnColumnName = MyBase.Columns("ColumnName")
            Me.columnColumnKey = MyBase.Columns("ColumnKey")
            Me.columnColumnKey_Details = MyBase.Columns("ColumnKey_Details")
            Me.columnColumnAmount = MyBase.Columns("ColumnAmount")
            Me.columnColumnAmount_Details = MyBase.Columns("ColumnAmount_Details")
            Me.columnOldKey = MyBase.Columns("OldKey")
            Me.columnColumnOldKey = MyBase.Columns("ColumnOldKey")
            Me.columnColumnOldKey_Details = MyBase.Columns("ColumnOldKey_Details")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnSequence = MyBase.Columns("Sequence")
            Me.columnColumnSource = MyBase.Columns("ColumnSource")
            Me.columnColumnSource_Details = MyBase.Columns("ColumnSource_Details")
            Me.columnPrefixName = MyBase.Columns("PrefixName")
            Me.columnPrefixName_Details = MyBase.Columns("PrefixName_Details")
            Me.columnAmount = MyBase.Columns("Amount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnKeyName = New Global.System.Data.DataColumn("KeyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyName)
            Me.columnLabelID = New Global.System.Data.DataColumn("LabelID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabelID)
            Me.columnTableName = New Global.System.Data.DataColumn("TableName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableName)
            Me.columnTableName_Details = New Global.System.Data.DataColumn("TableName_Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableName_Details)
            Me.columnColumnName = New Global.System.Data.DataColumn("ColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnName)
            Me.columnColumnKey = New Global.System.Data.DataColumn("ColumnKey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnKey)
            Me.columnColumnKey_Details = New Global.System.Data.DataColumn("ColumnKey_Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnKey_Details)
            Me.columnColumnAmount = New Global.System.Data.DataColumn("ColumnAmount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnAmount)
            Me.columnColumnAmount_Details = New Global.System.Data.DataColumn("ColumnAmount_Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnAmount_Details)
            Me.columnOldKey = New Global.System.Data.DataColumn("OldKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldKey)
            Me.columnColumnOldKey = New Global.System.Data.DataColumn("ColumnOldKey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnOldKey)
            Me.columnColumnOldKey_Details = New Global.System.Data.DataColumn("ColumnOldKey_Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnOldKey_Details)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnSequence = New Global.System.Data.DataColumn("Sequence", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSequence)
            Me.columnColumnSource = New Global.System.Data.DataColumn("ColumnSource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnSource)
            Me.columnColumnSource_Details = New Global.System.Data.DataColumn("ColumnSource_Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumnSource_Details)
            Me.columnPrefixName = New Global.System.Data.DataColumn("PrefixName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefixName)
            Me.columnPrefixName_Details = New Global.System.Data.DataColumn("PrefixName_Details", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefixName_Details)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnKeyName.MaxLength = 100
            Me.columnLabelID.MaxLength = 300
            Me.columnTableName.MaxLength = 300
            Me.columnTableName_Details.MaxLength = 300
            Me.columnColumnName.MaxLength = 300
            Me.columnColumnKey.MaxLength = 300
            Me.columnColumnKey_Details.MaxLength = 300
            Me.columnColumnAmount.MaxLength = 300
            Me.columnColumnAmount_Details.MaxLength = 300
            Me.columnColumnOldKey.MaxLength = 300
            Me.columnColumnOldKey_Details.MaxLength = 300
            Me.columnDescription.MaxLength = 300
            Me.columnColumnSource.MaxLength = 300
            Me.columnColumnSource_Details.MaxLength = 300
            Me.columnPrefixName.MaxLength = 50
            Me.columnPrefixName_Details.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPNL_INFORow() As PNL_INFORow
            Return CType(Me.NewRow,PNL_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PNL_INFORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PNL_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PNL_INFORowChangedEvent) Is Nothing) Then
                RaiseEvent PNL_INFORowChanged(Me, New PNL_INFORowChangeEvent(CType(e.Row,PNL_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PNL_INFORowChangingEvent) Is Nothing) Then
                RaiseEvent PNL_INFORowChanging(Me, New PNL_INFORowChangeEvent(CType(e.Row,PNL_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PNL_INFORowDeletedEvent) Is Nothing) Then
                RaiseEvent PNL_INFORowDeleted(Me, New PNL_INFORowChangeEvent(CType(e.Row,PNL_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PNL_INFORowDeletingEvent) Is Nothing) Then
                RaiseEvent PNL_INFORowDeleting(Me, New PNL_INFORowChangeEvent(CType(e.Row,PNL_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePNL_INFORow(ByVal row As PNL_INFORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PNL_INFODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_OPENSTOCKDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_OPENSTOCKRow)
        
        Private columnPL_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPL_KEY As Global.System.Data.DataColumn
        
        Private columnPL_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPL_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPL_DESC As Global.System.Data.DataColumn
        
        Private columnPL_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPL_NOTE As Global.System.Data.DataColumn
        
        Private columnPL_DETAIL As Global.System.Data.DataColumn
        
        Private columnPL_1 As Global.System.Data.DataColumn
        
        Private columnPL_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_OPENSTOCK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_OPENSTOCKRow
            Get
                Return CType(Me.Rows(index),PL_OPENSTOCKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCKRowChanging As PL_OPENSTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCKRowChanged As PL_OPENSTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCKRowDeleting As PL_OPENSTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCKRowDeleted As PL_OPENSTOCKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_OPENSTOCKRow(ByVal row As PL_OPENSTOCKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_OPENSTOCKRow(ByVal PL_PLTYPE As Short, ByVal PL_KEY As Integer, ByVal PL_SOURCENO As String, ByVal PL_DESC As String, ByVal PL_AMOUNT As Decimal, ByVal PL_NOTE As String, ByVal PL_DETAIL As String, ByVal PL_1 As String, ByVal PL_2 As String) As PL_OPENSTOCKRow
            Dim rowPL_OPENSTOCKRow As PL_OPENSTOCKRow = CType(Me.NewRow,PL_OPENSTOCKRow)
            Dim columnValuesArray() As Object = New Object() {PL_PLTYPE, PL_KEY, Nothing, PL_SOURCENO, PL_DESC, PL_AMOUNT, PL_NOTE, PL_DETAIL, PL_1, PL_2}
            rowPL_OPENSTOCKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_OPENSTOCKRow)
            Return rowPL_OPENSTOCKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPL_PLFCSKEY(ByVal PL_PLFCSKEY As Integer) As PL_OPENSTOCKRow
            Return CType(Me.Rows.Find(New Object() {PL_PLFCSKEY}),PL_OPENSTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_OPENSTOCKDataTable = CType(MyBase.Clone,PL_OPENSTOCKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_OPENSTOCKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPL_PLTYPE = MyBase.Columns("PL_PLTYPE")
            Me.columnPL_KEY = MyBase.Columns("PL_KEY")
            Me.columnPL_PLFCSKEY = MyBase.Columns("PL_PLFCSKEY")
            Me.columnPL_SOURCENO = MyBase.Columns("PL_SOURCENO")
            Me.columnPL_DESC = MyBase.Columns("PL_DESC")
            Me.columnPL_AMOUNT = MyBase.Columns("PL_AMOUNT")
            Me.columnPL_NOTE = MyBase.Columns("PL_NOTE")
            Me.columnPL_DETAIL = MyBase.Columns("PL_DETAIL")
            Me.columnPL_1 = MyBase.Columns("PL_1")
            Me.columnPL_2 = MyBase.Columns("PL_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPL_PLTYPE = New Global.System.Data.DataColumn("PL_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLTYPE)
            Me.columnPL_KEY = New Global.System.Data.DataColumn("PL_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_KEY)
            Me.columnPL_PLFCSKEY = New Global.System.Data.DataColumn("PL_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLFCSKEY)
            Me.columnPL_SOURCENO = New Global.System.Data.DataColumn("PL_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_SOURCENO)
            Me.columnPL_DESC = New Global.System.Data.DataColumn("PL_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DESC)
            Me.columnPL_AMOUNT = New Global.System.Data.DataColumn("PL_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_AMOUNT)
            Me.columnPL_NOTE = New Global.System.Data.DataColumn("PL_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NOTE)
            Me.columnPL_DETAIL = New Global.System.Data.DataColumn("PL_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DETAIL)
            Me.columnPL_1 = New Global.System.Data.DataColumn("PL_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_1)
            Me.columnPL_2 = New Global.System.Data.DataColumn("PL_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPL_PLFCSKEY}, true))
            Me.columnPL_PLFCSKEY.AutoIncrement = true
            Me.columnPL_PLFCSKEY.AllowDBNull = false
            Me.columnPL_PLFCSKEY.Unique = true
            Me.columnPL_SOURCENO.MaxLength = 12
            Me.columnPL_DESC.MaxLength = 255
            Me.columnPL_NOTE.MaxLength = 1073741823
            Me.columnPL_DETAIL.MaxLength = 30
            Me.columnPL_1.MaxLength = 50
            Me.columnPL_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_OPENSTOCKRow() As PL_OPENSTOCKRow
            Return CType(Me.NewRow,PL_OPENSTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_OPENSTOCKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_OPENSTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_OPENSTOCKRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCKRowChanged(Me, New PL_OPENSTOCKRowChangeEvent(CType(e.Row,PL_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_OPENSTOCKRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCKRowChanging(Me, New PL_OPENSTOCKRowChangeEvent(CType(e.Row,PL_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_OPENSTOCKRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCKRowDeleted(Me, New PL_OPENSTOCKRowChangeEvent(CType(e.Row,PL_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_OPENSTOCKRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCKRowDeleting(Me, New PL_OPENSTOCKRowChangeEvent(CType(e.Row,PL_OPENSTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_OPENSTOCKRow(ByVal row As PL_OPENSTOCKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_OPENSTOCKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_OPENSTOCK_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_OPENSTOCK_DETAILRow)
        
        Private columnPLD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPLD_KEY As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPLD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSDKEY As Global.System.Data.DataColumn
        
        Private columnPLD_DESC As Global.System.Data.DataColumn
        
        Private columnPLD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_OPENSTOCK_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_OPENSTOCK_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_OPENSTOCK_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCK_DETAILRowChanging As PL_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCK_DETAILRowChanged As PL_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCK_DETAILRowDeleting As PL_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_OPENSTOCK_DETAILRowDeleted As PL_OPENSTOCK_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_OPENSTOCK_DETAILRow(ByVal row As PL_OPENSTOCK_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_OPENSTOCK_DETAILRow(ByVal PLD_PLTYPE As Short, ByVal PLD_KEY As Integer, ByVal parentPL_OPENSTOCKRowByFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL As PL_OPENSTOCKRow, ByVal PLD_SOURCENO As String, ByVal PLD_DESC As String, ByVal PLD_AMOUNT As Decimal, ByVal PLD_NOTE As String) As PL_OPENSTOCK_DETAILRow
            Dim rowPL_OPENSTOCK_DETAILRow As PL_OPENSTOCK_DETAILRow = CType(Me.NewRow,PL_OPENSTOCK_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {PLD_PLTYPE, PLD_KEY, Nothing, PLD_SOURCENO, Nothing, PLD_DESC, PLD_AMOUNT, PLD_NOTE}
            If (Not (parentPL_OPENSTOCKRowByFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_OPENSTOCKRowByFK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL(2)
            End If
            rowPL_OPENSTOCK_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_OPENSTOCK_DETAILRow)
            Return rowPL_OPENSTOCK_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_OPENSTOCK_DETAILDataTable = CType(MyBase.Clone,PL_OPENSTOCK_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_OPENSTOCK_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLD_PLTYPE = MyBase.Columns("PLD_PLTYPE")
            Me.columnPLD_KEY = MyBase.Columns("PLD_KEY")
            Me.columnPLD_PLFCSKEY = MyBase.Columns("PLD_PLFCSKEY")
            Me.columnPLD_SOURCENO = MyBase.Columns("PLD_SOURCENO")
            Me.columnPLD_PLFCSDKEY = MyBase.Columns("PLD_PLFCSDKEY")
            Me.columnPLD_DESC = MyBase.Columns("PLD_DESC")
            Me.columnPLD_AMOUNT = MyBase.Columns("PLD_AMOUNT")
            Me.columnPLD_NOTE = MyBase.Columns("PLD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLD_PLTYPE = New Global.System.Data.DataColumn("PLD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLTYPE)
            Me.columnPLD_KEY = New Global.System.Data.DataColumn("PLD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_KEY)
            Me.columnPLD_PLFCSKEY = New Global.System.Data.DataColumn("PLD_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSKEY)
            Me.columnPLD_SOURCENO = New Global.System.Data.DataColumn("PLD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_SOURCENO)
            Me.columnPLD_PLFCSDKEY = New Global.System.Data.DataColumn("PLD_PLFCSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSDKEY)
            Me.columnPLD_DESC = New Global.System.Data.DataColumn("PLD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_DESC)
            Me.columnPLD_AMOUNT = New Global.System.Data.DataColumn("PLD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_AMOUNT)
            Me.columnPLD_NOTE = New Global.System.Data.DataColumn("PLD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_NOTE)
            Me.columnPLD_PLFCSKEY.AllowDBNull = false
            Me.columnPLD_SOURCENO.MaxLength = 12
            Me.columnPLD_PLFCSDKEY.AutoIncrement = true
            Me.columnPLD_PLFCSDKEY.AllowDBNull = false
            Me.columnPLD_DESC.MaxLength = 255
            Me.columnPLD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_OPENSTOCK_DETAILRow() As PL_OPENSTOCK_DETAILRow
            Return CType(Me.NewRow,PL_OPENSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_OPENSTOCK_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_OPENSTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_OPENSTOCK_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCK_DETAILRowChanged(Me, New PL_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PL_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_OPENSTOCK_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCK_DETAILRowChanging(Me, New PL_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PL_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_OPENSTOCK_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCK_DETAILRowDeleted(Me, New PL_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PL_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_OPENSTOCK_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_OPENSTOCK_DETAILRowDeleting(Me, New PL_OPENSTOCK_DETAILRowChangeEvent(CType(e.Row,PL_OPENSTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_OPENSTOCK_DETAILRow(ByVal row As PL_OPENSTOCK_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_OPENSTOCK_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_PRODUCTION_COST_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_PRODUCTION_COST_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_PRODUCTION_COST_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_PRODUCTION_COST_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_PRODUCTION_COST_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COST_DETAILRowChanging As PL_PRODUCTION_COST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COST_DETAILRowChanged As PL_PRODUCTION_COST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COST_DETAILRowDeleting As PL_PRODUCTION_COST_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COST_DETAILRowDeleted As PL_PRODUCTION_COST_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_PRODUCTION_COST_DETAILRow(ByVal row As PL_PRODUCTION_COST_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_PRODUCTION_COST_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_PRODUCTION_COSTRowByFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL As PL_PRODUCTION_COSTRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_DESC As String, ByVal EXAD_DEDUCTIBLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_PRODUCTION_COST_DETAILRow
            Dim rowPL_PRODUCTION_COST_DETAILRow As PL_PRODUCTION_COST_DETAILRow = CType(Me.NewRow,PL_PRODUCTION_COST_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, Nothing, EXAD_DESC, EXAD_DEDUCTIBLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_PRODUCTION_COSTRowByFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_PRODUCTION_COSTRowByFK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL(2)
            End If
            rowPL_PRODUCTION_COST_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_PRODUCTION_COST_DETAILRow)
            Return rowPL_PRODUCTION_COST_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_PRODUCTION_COST_DETAILDataTable = CType(MyBase.Clone,PL_PRODUCTION_COST_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_PRODUCTION_COST_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_DEDUCTIBLE = MyBase.Columns("EXAD_DEDUCTIBLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DEDUCTIBLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_EXADKEY.AutoIncrement = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_PRODUCTION_COST_DETAILRow() As PL_PRODUCTION_COST_DETAILRow
            Return CType(Me.NewRow,PL_PRODUCTION_COST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_PRODUCTION_COST_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_PRODUCTION_COST_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_PRODUCTION_COST_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COST_DETAILRowChanged(Me, New PL_PRODUCTION_COST_DETAILRowChangeEvent(CType(e.Row,PL_PRODUCTION_COST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_PRODUCTION_COST_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COST_DETAILRowChanging(Me, New PL_PRODUCTION_COST_DETAILRowChangeEvent(CType(e.Row,PL_PRODUCTION_COST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_PRODUCTION_COST_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COST_DETAILRowDeleted(Me, New PL_PRODUCTION_COST_DETAILRowChangeEvent(CType(e.Row,PL_PRODUCTION_COST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_PRODUCTION_COST_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COST_DETAILRowDeleting(Me, New PL_PRODUCTION_COST_DETAILRowChangeEvent(CType(e.Row,PL_PRODUCTION_COST_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_PRODUCTION_COST_DETAILRow(ByVal row As PL_PRODUCTION_COST_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_PRODUCTION_COST_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_PRODUCTION_COSTDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_PRODUCTION_COSTRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_PRODUCTION_COST"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_PRODUCTION_COSTRow
            Get
                Return CType(Me.Rows(index),PL_PRODUCTION_COSTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COSTRowChanging As PL_PRODUCTION_COSTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COSTRowChanged As PL_PRODUCTION_COSTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COSTRowDeleting As PL_PRODUCTION_COSTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PRODUCTION_COSTRowDeleted As PL_PRODUCTION_COSTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_PRODUCTION_COSTRow(ByVal row As PL_PRODUCTION_COSTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_PRODUCTION_COSTRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_DEDUCTIBLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_PRODUCTION_COSTRow
            Dim rowPL_PRODUCTION_COSTRow As PL_PRODUCTION_COSTRow = CType(Me.NewRow,PL_PRODUCTION_COSTRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_DEDUCTIBLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_PRODUCTION_COSTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_PRODUCTION_COSTRow)
            Return rowPL_PRODUCTION_COSTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_PRODUCTION_COSTRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_PRODUCTION_COSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_PRODUCTION_COSTDataTable = CType(MyBase.Clone,PL_PRODUCTION_COSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_PRODUCTION_COSTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_DEDUCTIBLE = MyBase.Columns("EXA_DEDUCTIBLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DEDUCTIBLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_PRODUCTION_COSTRow() As PL_PRODUCTION_COSTRow
            Return CType(Me.NewRow,PL_PRODUCTION_COSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_PRODUCTION_COSTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_PRODUCTION_COSTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_PRODUCTION_COSTRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COSTRowChanged(Me, New PL_PRODUCTION_COSTRowChangeEvent(CType(e.Row,PL_PRODUCTION_COSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_PRODUCTION_COSTRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COSTRowChanging(Me, New PL_PRODUCTION_COSTRowChangeEvent(CType(e.Row,PL_PRODUCTION_COSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_PRODUCTION_COSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COSTRowDeleted(Me, New PL_PRODUCTION_COSTRowChangeEvent(CType(e.Row,PL_PRODUCTION_COSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_PRODUCTION_COSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_PRODUCTION_COSTRowDeleting(Me, New PL_PRODUCTION_COSTRowChangeEvent(CType(e.Row,PL_PRODUCTION_COSTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_PRODUCTION_COSTRow(ByVal row As PL_PRODUCTION_COSTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_PRODUCTION_COSTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PNL_SEARCHDataTable
        Inherits Global.System.Data.TypedTableBase(Of PNL_SEARCHRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnAmount As Global.System.Data.DataColumn
        
        Private columnOldKey As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PNL_SEARCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OldKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PNL_SEARCHRow
            Get
                Return CType(Me.Rows(index),PNL_SEARCHRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_SEARCHRowChanging As PNL_SEARCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_SEARCHRowChanged As PNL_SEARCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_SEARCHRowDeleting As PNL_SEARCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PNL_SEARCHRowDeleted As PNL_SEARCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPNL_SEARCHRow(ByVal row As PNL_SEARCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPNL_SEARCHRow(ByVal Description As String, ByVal Amount As Decimal, ByVal OldKey As Integer, ByVal Title As String) As PNL_SEARCHRow
            Dim rowPNL_SEARCHRow As PNL_SEARCHRow = CType(Me.NewRow,PNL_SEARCHRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Description, Amount, OldKey, Title}
            rowPNL_SEARCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPNL_SEARCHRow)
            Return rowPNL_SEARCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PNL_SEARCHDataTable = CType(MyBase.Clone,PNL_SEARCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PNL_SEARCHDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnOldKey = MyBase.Columns("OldKey")
            Me.columnTitle = MyBase.Columns("Title")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnOldKey = New Global.System.Data.DataColumn("OldKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldKey)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnID.AutoIncrement = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPNL_SEARCHRow() As PNL_SEARCHRow
            Return CType(Me.NewRow,PNL_SEARCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PNL_SEARCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PNL_SEARCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PNL_SEARCHRowChangedEvent) Is Nothing) Then
                RaiseEvent PNL_SEARCHRowChanged(Me, New PNL_SEARCHRowChangeEvent(CType(e.Row,PNL_SEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PNL_SEARCHRowChangingEvent) Is Nothing) Then
                RaiseEvent PNL_SEARCHRowChanging(Me, New PNL_SEARCHRowChangeEvent(CType(e.Row,PNL_SEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PNL_SEARCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent PNL_SEARCHRowDeleted(Me, New PNL_SEARCHRowChangeEvent(CType(e.Row,PNL_SEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PNL_SEARCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent PNL_SEARCHRowDeleting(Me, New PNL_SEARCHRowChangeEvent(CType(e.Row,PNL_SEARCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePNL_SEARCHRow(ByVal row As PNL_SEARCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PNL_SEARCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_CLOSESTOCKDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_CLOSESTOCKRow)
        
        Private columnPL_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPL_KEY As Global.System.Data.DataColumn
        
        Private columnPL_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPL_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPL_DESC As Global.System.Data.DataColumn
        
        Private columnPL_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPL_NOTE As Global.System.Data.DataColumn
        
        Private columnPL_DETAIL As Global.System.Data.DataColumn
        
        Private columnPL_1 As Global.System.Data.DataColumn
        
        Private columnPL_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_CLOSESTOCK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_CLOSESTOCKRow
            Get
                Return CType(Me.Rows(index),PL_CLOSESTOCKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCKRowChanging As PL_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCKRowChanged As PL_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCKRowDeleting As PL_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCKRowDeleted As PL_CLOSESTOCKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_CLOSESTOCKRow(ByVal row As PL_CLOSESTOCKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_CLOSESTOCKRow(ByVal PL_PLTYPE As Short, ByVal PL_KEY As Integer, ByVal PL_SOURCENO As String, ByVal PL_DESC As String, ByVal PL_AMOUNT As Decimal, ByVal PL_NOTE As String, ByVal PL_DETAIL As String, ByVal PL_1 As String, ByVal PL_2 As String) As PL_CLOSESTOCKRow
            Dim rowPL_CLOSESTOCKRow As PL_CLOSESTOCKRow = CType(Me.NewRow,PL_CLOSESTOCKRow)
            Dim columnValuesArray() As Object = New Object() {PL_PLTYPE, PL_KEY, Nothing, PL_SOURCENO, PL_DESC, PL_AMOUNT, PL_NOTE, PL_DETAIL, PL_1, PL_2}
            rowPL_CLOSESTOCKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_CLOSESTOCKRow)
            Return rowPL_CLOSESTOCKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPL_PLFCSKEY(ByVal PL_PLFCSKEY As Integer) As PL_CLOSESTOCKRow
            Return CType(Me.Rows.Find(New Object() {PL_PLFCSKEY}),PL_CLOSESTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_CLOSESTOCKDataTable = CType(MyBase.Clone,PL_CLOSESTOCKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_CLOSESTOCKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPL_PLTYPE = MyBase.Columns("PL_PLTYPE")
            Me.columnPL_KEY = MyBase.Columns("PL_KEY")
            Me.columnPL_PLFCSKEY = MyBase.Columns("PL_PLFCSKEY")
            Me.columnPL_SOURCENO = MyBase.Columns("PL_SOURCENO")
            Me.columnPL_DESC = MyBase.Columns("PL_DESC")
            Me.columnPL_AMOUNT = MyBase.Columns("PL_AMOUNT")
            Me.columnPL_NOTE = MyBase.Columns("PL_NOTE")
            Me.columnPL_DETAIL = MyBase.Columns("PL_DETAIL")
            Me.columnPL_1 = MyBase.Columns("PL_1")
            Me.columnPL_2 = MyBase.Columns("PL_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPL_PLTYPE = New Global.System.Data.DataColumn("PL_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLTYPE)
            Me.columnPL_KEY = New Global.System.Data.DataColumn("PL_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_KEY)
            Me.columnPL_PLFCSKEY = New Global.System.Data.DataColumn("PL_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLFCSKEY)
            Me.columnPL_SOURCENO = New Global.System.Data.DataColumn("PL_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_SOURCENO)
            Me.columnPL_DESC = New Global.System.Data.DataColumn("PL_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DESC)
            Me.columnPL_AMOUNT = New Global.System.Data.DataColumn("PL_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_AMOUNT)
            Me.columnPL_NOTE = New Global.System.Data.DataColumn("PL_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NOTE)
            Me.columnPL_DETAIL = New Global.System.Data.DataColumn("PL_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DETAIL)
            Me.columnPL_1 = New Global.System.Data.DataColumn("PL_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_1)
            Me.columnPL_2 = New Global.System.Data.DataColumn("PL_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPL_PLFCSKEY}, true))
            Me.columnPL_PLFCSKEY.AutoIncrement = true
            Me.columnPL_PLFCSKEY.AllowDBNull = false
            Me.columnPL_PLFCSKEY.Unique = true
            Me.columnPL_SOURCENO.MaxLength = 12
            Me.columnPL_DESC.MaxLength = 255
            Me.columnPL_NOTE.MaxLength = 1073741823
            Me.columnPL_DETAIL.MaxLength = 30
            Me.columnPL_1.MaxLength = 50
            Me.columnPL_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_CLOSESTOCKRow() As PL_CLOSESTOCKRow
            Return CType(Me.NewRow,PL_CLOSESTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_CLOSESTOCKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_CLOSESTOCKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_CLOSESTOCKRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCKRowChanged(Me, New PL_CLOSESTOCKRowChangeEvent(CType(e.Row,PL_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_CLOSESTOCKRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCKRowChanging(Me, New PL_CLOSESTOCKRowChangeEvent(CType(e.Row,PL_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_CLOSESTOCKRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCKRowDeleted(Me, New PL_CLOSESTOCKRowChangeEvent(CType(e.Row,PL_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_CLOSESTOCKRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCKRowDeleting(Me, New PL_CLOSESTOCKRowChangeEvent(CType(e.Row,PL_CLOSESTOCKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_CLOSESTOCKRow(ByVal row As PL_CLOSESTOCKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_CLOSESTOCKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_CLOSESTOCK_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_CLOSESTOCK_DETAILRow)
        
        Private columnPLD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPLD_KEY As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPLD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSDKEY As Global.System.Data.DataColumn
        
        Private columnPLD_DESC As Global.System.Data.DataColumn
        
        Private columnPLD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_CLOSESTOCK_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_CLOSESTOCK_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_CLOSESTOCK_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCK_DETAILRowChanging As PL_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCK_DETAILRowChanged As PL_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCK_DETAILRowDeleting As PL_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_CLOSESTOCK_DETAILRowDeleted As PL_CLOSESTOCK_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_CLOSESTOCK_DETAILRow(ByVal row As PL_CLOSESTOCK_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_CLOSESTOCK_DETAILRow(ByVal PLD_PLTYPE As Short, ByVal PLD_KEY As Integer, ByVal parentPL_CLOSESTOCKRowByFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL As PL_CLOSESTOCKRow, ByVal PLD_SOURCENO As String, ByVal PLD_DESC As String, ByVal PLD_AMOUNT As Decimal, ByVal PLD_NOTE As String) As PL_CLOSESTOCK_DETAILRow
            Dim rowPL_CLOSESTOCK_DETAILRow As PL_CLOSESTOCK_DETAILRow = CType(Me.NewRow,PL_CLOSESTOCK_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {PLD_PLTYPE, PLD_KEY, Nothing, PLD_SOURCENO, Nothing, PLD_DESC, PLD_AMOUNT, PLD_NOTE}
            If (Not (parentPL_CLOSESTOCKRowByFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_CLOSESTOCKRowByFK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL(2)
            End If
            rowPL_CLOSESTOCK_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_CLOSESTOCK_DETAILRow)
            Return rowPL_CLOSESTOCK_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_CLOSESTOCK_DETAILDataTable = CType(MyBase.Clone,PL_CLOSESTOCK_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_CLOSESTOCK_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLD_PLTYPE = MyBase.Columns("PLD_PLTYPE")
            Me.columnPLD_KEY = MyBase.Columns("PLD_KEY")
            Me.columnPLD_PLFCSKEY = MyBase.Columns("PLD_PLFCSKEY")
            Me.columnPLD_SOURCENO = MyBase.Columns("PLD_SOURCENO")
            Me.columnPLD_PLFCSDKEY = MyBase.Columns("PLD_PLFCSDKEY")
            Me.columnPLD_DESC = MyBase.Columns("PLD_DESC")
            Me.columnPLD_AMOUNT = MyBase.Columns("PLD_AMOUNT")
            Me.columnPLD_NOTE = MyBase.Columns("PLD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLD_PLTYPE = New Global.System.Data.DataColumn("PLD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLTYPE)
            Me.columnPLD_KEY = New Global.System.Data.DataColumn("PLD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_KEY)
            Me.columnPLD_PLFCSKEY = New Global.System.Data.DataColumn("PLD_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSKEY)
            Me.columnPLD_SOURCENO = New Global.System.Data.DataColumn("PLD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_SOURCENO)
            Me.columnPLD_PLFCSDKEY = New Global.System.Data.DataColumn("PLD_PLFCSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSDKEY)
            Me.columnPLD_DESC = New Global.System.Data.DataColumn("PLD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_DESC)
            Me.columnPLD_AMOUNT = New Global.System.Data.DataColumn("PLD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_AMOUNT)
            Me.columnPLD_NOTE = New Global.System.Data.DataColumn("PLD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_NOTE)
            Me.columnPLD_SOURCENO.MaxLength = 12
            Me.columnPLD_PLFCSDKEY.AutoIncrement = true
            Me.columnPLD_PLFCSDKEY.AllowDBNull = false
            Me.columnPLD_DESC.MaxLength = 255
            Me.columnPLD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_CLOSESTOCK_DETAILRow() As PL_CLOSESTOCK_DETAILRow
            Return CType(Me.NewRow,PL_CLOSESTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_CLOSESTOCK_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_CLOSESTOCK_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_CLOSESTOCK_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCK_DETAILRowChanged(Me, New PL_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PL_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_CLOSESTOCK_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCK_DETAILRowChanging(Me, New PL_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PL_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_CLOSESTOCK_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCK_DETAILRowDeleted(Me, New PL_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PL_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_CLOSESTOCK_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_CLOSESTOCK_DETAILRowDeleting(Me, New PL_CLOSESTOCK_DETAILRowChangeEvent(CType(e.Row,PL_CLOSESTOCK_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_CLOSESTOCK_DETAILRow(ByVal row As PL_CLOSESTOCK_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_CLOSESTOCK_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_INCOME_OTHERBUSINESSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_INCOME_OTHERBUSINESSRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_TAXABLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_INCOME_OTHERBUSINESS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_TAXABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_TAXABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_INCOME_OTHERBUSINESSRow
            Get
                Return CType(Me.Rows(index),PL_INCOME_OTHERBUSINESSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESSRowChanging As PL_INCOME_OTHERBUSINESSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESSRowChanged As PL_INCOME_OTHERBUSINESSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESSRowDeleting As PL_INCOME_OTHERBUSINESSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESSRowDeleted As PL_INCOME_OTHERBUSINESSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_INCOME_OTHERBUSINESSRow(ByVal row As PL_INCOME_OTHERBUSINESSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_INCOME_OTHERBUSINESSRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_TAXABLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_INCOME_OTHERBUSINESSRow
            Dim rowPL_INCOME_OTHERBUSINESSRow As PL_INCOME_OTHERBUSINESSRow = CType(Me.NewRow,PL_INCOME_OTHERBUSINESSRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_TAXABLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_INCOME_OTHERBUSINESSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_INCOME_OTHERBUSINESSRow)
            Return rowPL_INCOME_OTHERBUSINESSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_INCOME_OTHERBUSINESSRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_INCOME_OTHERBUSINESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_INCOME_OTHERBUSINESSDataTable = CType(MyBase.Clone,PL_INCOME_OTHERBUSINESSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_INCOME_OTHERBUSINESSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_TAXABLE = MyBase.Columns("EXA_TAXABLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_TAXABLE = New Global.System.Data.DataColumn("EXA_TAXABLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_TAXABLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_INCOME_OTHERBUSINESSRow() As PL_INCOME_OTHERBUSINESSRow
            Return CType(Me.NewRow,PL_INCOME_OTHERBUSINESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_INCOME_OTHERBUSINESSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_INCOME_OTHERBUSINESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESSRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESSRowChanged(Me, New PL_INCOME_OTHERBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESSRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESSRowChanging(Me, New PL_INCOME_OTHERBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESSRowDeleted(Me, New PL_INCOME_OTHERBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESSRowDeleting(Me, New PL_INCOME_OTHERBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_INCOME_OTHERBUSINESSRow(ByVal row As PL_INCOME_OTHERBUSINESSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_INCOME_OTHERBUSINESSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_INCOME_OTHERBUSINESS_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_INCOME_OTHERBUSINESS_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_TAXABLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_INCOME_OTHERBUSINESS_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_TAXABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_TAXABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_INCOME_OTHERBUSINESS_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_INCOME_OTHERBUSINESS_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESS_DETAILRowChanging As PL_INCOME_OTHERBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESS_DETAILRowChanged As PL_INCOME_OTHERBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESS_DETAILRowDeleting As PL_INCOME_OTHERBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_OTHERBUSINESS_DETAILRowDeleted As PL_INCOME_OTHERBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_INCOME_OTHERBUSINESS_DETAILRow(ByVal row As PL_INCOME_OTHERBUSINESS_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_INCOME_OTHERBUSINESS_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_INCOME_OTHERBUSINESSRowByFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL As PL_INCOME_OTHERBUSINESSRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_EXADKEY As Integer, ByVal EXAD_DESC As String, ByVal EXAD_TAXABLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_INCOME_OTHERBUSINESS_DETAILRow
            Dim rowPL_INCOME_OTHERBUSINESS_DETAILRow As PL_INCOME_OTHERBUSINESS_DETAILRow = CType(Me.NewRow,PL_INCOME_OTHERBUSINESS_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, EXAD_EXADKEY, EXAD_DESC, EXAD_TAXABLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_INCOME_OTHERBUSINESSRowByFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_INCOME_OTHERBUSINESSRowByFK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL(2)
            End If
            rowPL_INCOME_OTHERBUSINESS_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_INCOME_OTHERBUSINESS_DETAILRow)
            Return rowPL_INCOME_OTHERBUSINESS_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_INCOME_OTHERBUSINESS_DETAILDataTable = CType(MyBase.Clone,PL_INCOME_OTHERBUSINESS_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_INCOME_OTHERBUSINESS_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_TAXABLE = MyBase.Columns("EXAD_TAXABLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_TAXABLE = New Global.System.Data.DataColumn("EXAD_TAXABLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_TAXABLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_INCOME_OTHERBUSINESS_DETAILRow() As PL_INCOME_OTHERBUSINESS_DETAILRow
            Return CType(Me.NewRow,PL_INCOME_OTHERBUSINESS_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_INCOME_OTHERBUSINESS_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_INCOME_OTHERBUSINESS_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESS_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESS_DETAILRowChanged(Me, New PL_INCOME_OTHERBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESS_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESS_DETAILRowChanging(Me, New PL_INCOME_OTHERBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESS_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESS_DETAILRowDeleted(Me, New PL_INCOME_OTHERBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_INCOME_OTHERBUSINESS_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_OTHERBUSINESS_DETAILRowDeleting(Me, New PL_INCOME_OTHERBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_OTHERBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_INCOME_OTHERBUSINESS_DETAILRow(ByVal row As PL_INCOME_OTHERBUSINESS_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_INCOME_OTHERBUSINESS_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_INCOME_NONBUSINESSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_INCOME_NONBUSINESSRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_TAXABLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_INCOME_NONBUSINESS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_TAXABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_TAXABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_INCOME_NONBUSINESSRow
            Get
                Return CType(Me.Rows(index),PL_INCOME_NONBUSINESSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESSRowChanging As PL_INCOME_NONBUSINESSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESSRowChanged As PL_INCOME_NONBUSINESSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESSRowDeleting As PL_INCOME_NONBUSINESSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESSRowDeleted As PL_INCOME_NONBUSINESSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_INCOME_NONBUSINESSRow(ByVal row As PL_INCOME_NONBUSINESSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_INCOME_NONBUSINESSRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_TAXABLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_INCOME_NONBUSINESSRow
            Dim rowPL_INCOME_NONBUSINESSRow As PL_INCOME_NONBUSINESSRow = CType(Me.NewRow,PL_INCOME_NONBUSINESSRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_TAXABLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_INCOME_NONBUSINESSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_INCOME_NONBUSINESSRow)
            Return rowPL_INCOME_NONBUSINESSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_INCOME_NONBUSINESSRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_INCOME_NONBUSINESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_INCOME_NONBUSINESSDataTable = CType(MyBase.Clone,PL_INCOME_NONBUSINESSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_INCOME_NONBUSINESSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_TAXABLE = MyBase.Columns("EXA_TAXABLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_TAXABLE = New Global.System.Data.DataColumn("EXA_TAXABLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_TAXABLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_INCOME_NONBUSINESSRow() As PL_INCOME_NONBUSINESSRow
            Return CType(Me.NewRow,PL_INCOME_NONBUSINESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_INCOME_NONBUSINESSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_INCOME_NONBUSINESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_INCOME_NONBUSINESSRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESSRowChanged(Me, New PL_INCOME_NONBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_INCOME_NONBUSINESSRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESSRowChanging(Me, New PL_INCOME_NONBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_INCOME_NONBUSINESSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESSRowDeleted(Me, New PL_INCOME_NONBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_INCOME_NONBUSINESSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESSRowDeleting(Me, New PL_INCOME_NONBUSINESSRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_INCOME_NONBUSINESSRow(ByVal row As PL_INCOME_NONBUSINESSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_INCOME_NONBUSINESSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_INCOME_NONBUSINESS_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_INCOME_NONBUSINESS_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_TAXABLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_INCOME_NONBUSINESS_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_TAXABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_TAXABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_INCOME_NONBUSINESS_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_INCOME_NONBUSINESS_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESS_DETAILRowChanging As PL_INCOME_NONBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESS_DETAILRowChanged As PL_INCOME_NONBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESS_DETAILRowDeleting As PL_INCOME_NONBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONBUSINESS_DETAILRowDeleted As PL_INCOME_NONBUSINESS_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_INCOME_NONBUSINESS_DETAILRow(ByVal row As PL_INCOME_NONBUSINESS_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_INCOME_NONBUSINESS_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_INCOME_NONBUSINESSRowByFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL As PL_INCOME_NONBUSINESSRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_EXADKEY As Integer, ByVal EXAD_DESC As String, ByVal EXAD_TAXABLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_INCOME_NONBUSINESS_DETAILRow
            Dim rowPL_INCOME_NONBUSINESS_DETAILRow As PL_INCOME_NONBUSINESS_DETAILRow = CType(Me.NewRow,PL_INCOME_NONBUSINESS_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, EXAD_EXADKEY, EXAD_DESC, EXAD_TAXABLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_INCOME_NONBUSINESSRowByFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_INCOME_NONBUSINESSRowByFK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL(2)
            End If
            rowPL_INCOME_NONBUSINESS_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_INCOME_NONBUSINESS_DETAILRow)
            Return rowPL_INCOME_NONBUSINESS_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_INCOME_NONBUSINESS_DETAILDataTable = CType(MyBase.Clone,PL_INCOME_NONBUSINESS_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_INCOME_NONBUSINESS_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_TAXABLE = MyBase.Columns("EXAD_TAXABLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_TAXABLE = New Global.System.Data.DataColumn("EXAD_TAXABLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_TAXABLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_INCOME_NONBUSINESS_DETAILRow() As PL_INCOME_NONBUSINESS_DETAILRow
            Return CType(Me.NewRow,PL_INCOME_NONBUSINESS_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_INCOME_NONBUSINESS_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_INCOME_NONBUSINESS_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_INCOME_NONBUSINESS_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESS_DETAILRowChanged(Me, New PL_INCOME_NONBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_INCOME_NONBUSINESS_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESS_DETAILRowChanging(Me, New PL_INCOME_NONBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_INCOME_NONBUSINESS_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESS_DETAILRowDeleted(Me, New PL_INCOME_NONBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_INCOME_NONBUSINESS_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONBUSINESS_DETAILRowDeleting(Me, New PL_INCOME_NONBUSINESS_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONBUSINESS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_INCOME_NONBUSINESS_DETAILRow(ByVal row As PL_INCOME_NONBUSINESS_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_INCOME_NONBUSINESS_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_INCOME_NONTAXABLEDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_INCOME_NONTAXABLERow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_TAXABLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_INCOME_NONTAXABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_TAXABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_TAXABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_INCOME_NONTAXABLERow
            Get
                Return CType(Me.Rows(index),PL_INCOME_NONTAXABLERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLERowChanging As PL_INCOME_NONTAXABLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLERowChanged As PL_INCOME_NONTAXABLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLERowDeleting As PL_INCOME_NONTAXABLERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLERowDeleted As PL_INCOME_NONTAXABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_INCOME_NONTAXABLERow(ByVal row As PL_INCOME_NONTAXABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_INCOME_NONTAXABLERow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_TAXABLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_INCOME_NONTAXABLERow
            Dim rowPL_INCOME_NONTAXABLERow As PL_INCOME_NONTAXABLERow = CType(Me.NewRow,PL_INCOME_NONTAXABLERow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_TAXABLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_INCOME_NONTAXABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_INCOME_NONTAXABLERow)
            Return rowPL_INCOME_NONTAXABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_INCOME_NONTAXABLERow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_INCOME_NONTAXABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_INCOME_NONTAXABLEDataTable = CType(MyBase.Clone,PL_INCOME_NONTAXABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_INCOME_NONTAXABLEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_TAXABLE = MyBase.Columns("EXA_TAXABLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_TAXABLE = New Global.System.Data.DataColumn("EXA_TAXABLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_TAXABLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_INCOME_NONTAXABLERow() As PL_INCOME_NONTAXABLERow
            Return CType(Me.NewRow,PL_INCOME_NONTAXABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_INCOME_NONTAXABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_INCOME_NONTAXABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_INCOME_NONTAXABLERowChangedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLERowChanged(Me, New PL_INCOME_NONTAXABLERowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_INCOME_NONTAXABLERowChangingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLERowChanging(Me, New PL_INCOME_NONTAXABLERowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_INCOME_NONTAXABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLERowDeleted(Me, New PL_INCOME_NONTAXABLERowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_INCOME_NONTAXABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLERowDeleting(Me, New PL_INCOME_NONTAXABLERowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_INCOME_NONTAXABLERow(ByVal row As PL_INCOME_NONTAXABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_INCOME_NONTAXABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_INCOME_NONTAXABLE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_INCOME_NONTAXABLE_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_TAXABLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_INCOME_NONTAXABLE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_TAXABLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_TAXABLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_INCOME_NONTAXABLE_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_INCOME_NONTAXABLE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLE_DETAILRowChanging As PL_INCOME_NONTAXABLE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLE_DETAILRowChanged As PL_INCOME_NONTAXABLE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLE_DETAILRowDeleting As PL_INCOME_NONTAXABLE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_INCOME_NONTAXABLE_DETAILRowDeleted As PL_INCOME_NONTAXABLE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_INCOME_NONTAXABLE_DETAILRow(ByVal row As PL_INCOME_NONTAXABLE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_INCOME_NONTAXABLE_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_INCOME_NONTAXABLERowByFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL As PL_INCOME_NONTAXABLERow, ByVal EXAD_SOURCENO As String, ByVal EXAD_DESC As String, ByVal EXAD_TAXABLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_INCOME_NONTAXABLE_DETAILRow
            Dim rowPL_INCOME_NONTAXABLE_DETAILRow As PL_INCOME_NONTAXABLE_DETAILRow = CType(Me.NewRow,PL_INCOME_NONTAXABLE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, Nothing, EXAD_DESC, EXAD_TAXABLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_INCOME_NONTAXABLERowByFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_INCOME_NONTAXABLERowByFK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL(2)
            End If
            rowPL_INCOME_NONTAXABLE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_INCOME_NONTAXABLE_DETAILRow)
            Return rowPL_INCOME_NONTAXABLE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_INCOME_NONTAXABLE_DETAILDataTable = CType(MyBase.Clone,PL_INCOME_NONTAXABLE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_INCOME_NONTAXABLE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_TAXABLE = MyBase.Columns("EXAD_TAXABLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_TAXABLE = New Global.System.Data.DataColumn("EXAD_TAXABLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_TAXABLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_EXADKEY.AutoIncrement = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_INCOME_NONTAXABLE_DETAILRow() As PL_INCOME_NONTAXABLE_DETAILRow
            Return CType(Me.NewRow,PL_INCOME_NONTAXABLE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_INCOME_NONTAXABLE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_INCOME_NONTAXABLE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_INCOME_NONTAXABLE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLE_DETAILRowChanged(Me, New PL_INCOME_NONTAXABLE_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_INCOME_NONTAXABLE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLE_DETAILRowChanging(Me, New PL_INCOME_NONTAXABLE_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_INCOME_NONTAXABLE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLE_DETAILRowDeleted(Me, New PL_INCOME_NONTAXABLE_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_INCOME_NONTAXABLE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_INCOME_NONTAXABLE_DETAILRowDeleting(Me, New PL_INCOME_NONTAXABLE_DETAILRowChangeEvent(CType(e.Row,PL_INCOME_NONTAXABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_INCOME_NONTAXABLE_DETAILRow(ByVal row As PL_INCOME_NONTAXABLE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_INCOME_NONTAXABLE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXPENSESDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXPENSESRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXPENSES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXPENSESRow
            Get
                Return CType(Me.Rows(index),PL_EXPENSESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSESRowChanging As PL_EXPENSESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSESRowChanged As PL_EXPENSESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSESRowDeleting As PL_EXPENSESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSESRowDeleted As PL_EXPENSESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXPENSESRow(ByVal row As PL_EXPENSESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXPENSESRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_DEDUCTIBLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_EXPENSESRow
            Dim rowPL_EXPENSESRow As PL_EXPENSESRow = CType(Me.NewRow,PL_EXPENSESRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_DEDUCTIBLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_EXPENSESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXPENSESRow)
            Return rowPL_EXPENSESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_EXPENSESRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_EXPENSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXPENSESDataTable = CType(MyBase.Clone,PL_EXPENSESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXPENSESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_DEDUCTIBLE = MyBase.Columns("EXA_DEDUCTIBLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DEDUCTIBLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXPENSESRow() As PL_EXPENSESRow
            Return CType(Me.NewRow,PL_EXPENSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXPENSESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXPENSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXPENSESRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSESRowChanged(Me, New PL_EXPENSESRowChangeEvent(CType(e.Row,PL_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXPENSESRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSESRowChanging(Me, New PL_EXPENSESRowChangeEvent(CType(e.Row,PL_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXPENSESRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSESRowDeleted(Me, New PL_EXPENSESRowChangeEvent(CType(e.Row,PL_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXPENSESRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSESRowDeleting(Me, New PL_EXPENSESRowChangeEvent(CType(e.Row,PL_EXPENSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXPENSESRow(ByVal row As PL_EXPENSESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXPENSESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXPENSES_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXPENSES_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXPENSES_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXPENSES_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_EXPENSES_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSES_DETAILRowChanging As PL_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSES_DETAILRowChanged As PL_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSES_DETAILRowDeleting As PL_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXPENSES_DETAILRowDeleted As PL_EXPENSES_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXPENSES_DETAILRow(ByVal row As PL_EXPENSES_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXPENSES_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_EXPENSESRowByFK_PL_EXPENSES_PL_EXPENSES_DETAIL As PL_EXPENSESRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_DESC As String, ByVal EXAD_DEDUCTIBLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_EXPENSES_DETAILRow
            Dim rowPL_EXPENSES_DETAILRow As PL_EXPENSES_DETAILRow = CType(Me.NewRow,PL_EXPENSES_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, Nothing, EXAD_DESC, EXAD_DEDUCTIBLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_EXPENSESRowByFK_PL_EXPENSES_PL_EXPENSES_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_EXPENSESRowByFK_PL_EXPENSES_PL_EXPENSES_DETAIL(2)
            End If
            rowPL_EXPENSES_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXPENSES_DETAILRow)
            Return rowPL_EXPENSES_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXPENSES_DETAILDataTable = CType(MyBase.Clone,PL_EXPENSES_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXPENSES_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_DEDUCTIBLE = MyBase.Columns("EXAD_DEDUCTIBLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DEDUCTIBLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_EXADKEY.AutoIncrement = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXPENSES_DETAILRow() As PL_EXPENSES_DETAILRow
            Return CType(Me.NewRow,PL_EXPENSES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXPENSES_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXPENSES_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXPENSES_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSES_DETAILRowChanged(Me, New PL_EXPENSES_DETAILRowChangeEvent(CType(e.Row,PL_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXPENSES_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSES_DETAILRowChanging(Me, New PL_EXPENSES_DETAILRowChangeEvent(CType(e.Row,PL_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXPENSES_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSES_DETAILRowDeleted(Me, New PL_EXPENSES_DETAILRowChangeEvent(CType(e.Row,PL_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXPENSES_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXPENSES_DETAILRowDeleting(Me, New PL_EXPENSES_DETAILRowChangeEvent(CType(e.Row,PL_EXPENSES_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXPENSES_DETAILRow(ByVal row As PL_EXPENSES_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXPENSES_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXP_NONALLOWLOSSDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXP_NONALLOWLOSSRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXP_NONALLOWLOSS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXP_NONALLOWLOSSRow
            Get
                Return CType(Me.Rows(index),PL_EXP_NONALLOWLOSSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSSRowChanging As PL_EXP_NONALLOWLOSSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSSRowChanged As PL_EXP_NONALLOWLOSSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSSRowDeleting As PL_EXP_NONALLOWLOSSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSSRowDeleted As PL_EXP_NONALLOWLOSSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXP_NONALLOWLOSSRow(ByVal row As PL_EXP_NONALLOWLOSSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXP_NONALLOWLOSSRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_DEDUCTIBLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_EXP_NONALLOWLOSSRow
            Dim rowPL_EXP_NONALLOWLOSSRow As PL_EXP_NONALLOWLOSSRow = CType(Me.NewRow,PL_EXP_NONALLOWLOSSRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_DEDUCTIBLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_EXP_NONALLOWLOSSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXP_NONALLOWLOSSRow)
            Return rowPL_EXP_NONALLOWLOSSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_EXP_NONALLOWLOSSRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_EXP_NONALLOWLOSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXP_NONALLOWLOSSDataTable = CType(MyBase.Clone,PL_EXP_NONALLOWLOSSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXP_NONALLOWLOSSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_DEDUCTIBLE = MyBase.Columns("EXA_DEDUCTIBLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DEDUCTIBLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXP_NONALLOWLOSSRow() As PL_EXP_NONALLOWLOSSRow
            Return CType(Me.NewRow,PL_EXP_NONALLOWLOSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXP_NONALLOWLOSSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXP_NONALLOWLOSSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXP_NONALLOWLOSSRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSSRowChanged(Me, New PL_EXP_NONALLOWLOSSRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXP_NONALLOWLOSSRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSSRowChanging(Me, New PL_EXP_NONALLOWLOSSRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXP_NONALLOWLOSSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSSRowDeleted(Me, New PL_EXP_NONALLOWLOSSRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXP_NONALLOWLOSSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSSRowDeleting(Me, New PL_EXP_NONALLOWLOSSRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXP_NONALLOWLOSSRow(ByVal row As PL_EXP_NONALLOWLOSSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXP_NONALLOWLOSSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXP_NONALLOWLOSS_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXP_NONALLOWLOSS_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXP_NONALLOWLOSS_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXP_NONALLOWLOSS_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_EXP_NONALLOWLOSS_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSS_DETAILRowChanging As PL_EXP_NONALLOWLOSS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSS_DETAILRowChanged As PL_EXP_NONALLOWLOSS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSS_DETAILRowDeleting As PL_EXP_NONALLOWLOSS_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWLOSS_DETAILRowDeleted As PL_EXP_NONALLOWLOSS_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXP_NONALLOWLOSS_DETAILRow(ByVal row As PL_EXP_NONALLOWLOSS_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXP_NONALLOWLOSS_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_EXP_NONALLOWLOSSRowByFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL As PL_EXP_NONALLOWLOSSRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_DESC As String, ByVal EXAD_DEDUCTIBLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_EXP_NONALLOWLOSS_DETAILRow
            Dim rowPL_EXP_NONALLOWLOSS_DETAILRow As PL_EXP_NONALLOWLOSS_DETAILRow = CType(Me.NewRow,PL_EXP_NONALLOWLOSS_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, Nothing, EXAD_DESC, EXAD_DEDUCTIBLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_EXP_NONALLOWLOSSRowByFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_EXP_NONALLOWLOSSRowByFK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL(2)
            End If
            rowPL_EXP_NONALLOWLOSS_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXP_NONALLOWLOSS_DETAILRow)
            Return rowPL_EXP_NONALLOWLOSS_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXP_NONALLOWLOSS_DETAILDataTable = CType(MyBase.Clone,PL_EXP_NONALLOWLOSS_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXP_NONALLOWLOSS_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_DEDUCTIBLE = MyBase.Columns("EXAD_DEDUCTIBLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DEDUCTIBLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_EXADKEY.AutoIncrement = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXP_NONALLOWLOSS_DETAILRow() As PL_EXP_NONALLOWLOSS_DETAILRow
            Return CType(Me.NewRow,PL_EXP_NONALLOWLOSS_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXP_NONALLOWLOSS_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXP_NONALLOWLOSS_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXP_NONALLOWLOSS_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSS_DETAILRowChanged(Me, New PL_EXP_NONALLOWLOSS_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXP_NONALLOWLOSS_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSS_DETAILRowChanging(Me, New PL_EXP_NONALLOWLOSS_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXP_NONALLOWLOSS_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSS_DETAILRowDeleted(Me, New PL_EXP_NONALLOWLOSS_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXP_NONALLOWLOSS_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWLOSS_DETAILRowDeleting(Me, New PL_EXP_NONALLOWLOSS_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWLOSS_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXP_NONALLOWLOSS_DETAILRow(ByVal row As PL_EXP_NONALLOWLOSS_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXP_NONALLOWLOSS_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXP_NONALLOWEXPENDDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXP_NONALLOWEXPENDRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXP_NONALLOWEXPEND"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXP_NONALLOWEXPENDRow
            Get
                Return CType(Me.Rows(index),PL_EXP_NONALLOWEXPENDRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPENDRowChanging As PL_EXP_NONALLOWEXPENDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPENDRowChanged As PL_EXP_NONALLOWEXPENDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPENDRowDeleting As PL_EXP_NONALLOWEXPENDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPENDRowDeleted As PL_EXP_NONALLOWEXPENDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXP_NONALLOWEXPENDRow(ByVal row As PL_EXP_NONALLOWEXPENDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXP_NONALLOWEXPENDRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_DEDUCTIBLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_EXP_NONALLOWEXPENDRow
            Dim rowPL_EXP_NONALLOWEXPENDRow As PL_EXP_NONALLOWEXPENDRow = CType(Me.NewRow,PL_EXP_NONALLOWEXPENDRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_DEDUCTIBLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_EXP_NONALLOWEXPENDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXP_NONALLOWEXPENDRow)
            Return rowPL_EXP_NONALLOWEXPENDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_EXP_NONALLOWEXPENDRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_EXP_NONALLOWEXPENDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXP_NONALLOWEXPENDDataTable = CType(MyBase.Clone,PL_EXP_NONALLOWEXPENDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXP_NONALLOWEXPENDDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_DEDUCTIBLE = MyBase.Columns("EXA_DEDUCTIBLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DEDUCTIBLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXP_NONALLOWEXPENDRow() As PL_EXP_NONALLOWEXPENDRow
            Return CType(Me.NewRow,PL_EXP_NONALLOWEXPENDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXP_NONALLOWEXPENDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXP_NONALLOWEXPENDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXP_NONALLOWEXPENDRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPENDRowChanged(Me, New PL_EXP_NONALLOWEXPENDRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPENDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXP_NONALLOWEXPENDRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPENDRowChanging(Me, New PL_EXP_NONALLOWEXPENDRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPENDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXP_NONALLOWEXPENDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPENDRowDeleted(Me, New PL_EXP_NONALLOWEXPENDRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPENDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXP_NONALLOWEXPENDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPENDRowDeleting(Me, New PL_EXP_NONALLOWEXPENDRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPENDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXP_NONALLOWEXPENDRow(ByVal row As PL_EXP_NONALLOWEXPENDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXP_NONALLOWEXPENDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXP_NONALLOWEXPEND_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXP_NONALLOWEXPEND_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXP_NONALLOWEXPEND_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXP_NONALLOWEXPEND_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_EXP_NONALLOWEXPEND_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPEND_DETAILRowChanging As PL_EXP_NONALLOWEXPEND_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPEND_DETAILRowChanged As PL_EXP_NONALLOWEXPEND_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPEND_DETAILRowDeleting As PL_EXP_NONALLOWEXPEND_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_NONALLOWEXPEND_DETAILRowDeleted As PL_EXP_NONALLOWEXPEND_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXP_NONALLOWEXPEND_DETAILRow(ByVal row As PL_EXP_NONALLOWEXPEND_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXP_NONALLOWEXPEND_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_EXP_NONALLOWEXPENDRowByFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL As PL_EXP_NONALLOWEXPENDRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_DESC As String, ByVal EXAD_DEDUCTIBLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_EXP_NONALLOWEXPEND_DETAILRow
            Dim rowPL_EXP_NONALLOWEXPEND_DETAILRow As PL_EXP_NONALLOWEXPEND_DETAILRow = CType(Me.NewRow,PL_EXP_NONALLOWEXPEND_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, Nothing, EXAD_DESC, EXAD_DEDUCTIBLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_EXP_NONALLOWEXPENDRowByFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_EXP_NONALLOWEXPENDRowByFK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL(2)
            End If
            rowPL_EXP_NONALLOWEXPEND_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXP_NONALLOWEXPEND_DETAILRow)
            Return rowPL_EXP_NONALLOWEXPEND_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXP_NONALLOWEXPEND_DETAILDataTable = CType(MyBase.Clone,PL_EXP_NONALLOWEXPEND_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXP_NONALLOWEXPEND_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_DEDUCTIBLE = MyBase.Columns("EXAD_DEDUCTIBLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DEDUCTIBLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_EXADKEY.AutoIncrement = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXP_NONALLOWEXPEND_DETAILRow() As PL_EXP_NONALLOWEXPEND_DETAILRow
            Return CType(Me.NewRow,PL_EXP_NONALLOWEXPEND_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXP_NONALLOWEXPEND_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXP_NONALLOWEXPEND_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXP_NONALLOWEXPEND_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPEND_DETAILRowChanged(Me, New PL_EXP_NONALLOWEXPEND_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPEND_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXP_NONALLOWEXPEND_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPEND_DETAILRowChanging(Me, New PL_EXP_NONALLOWEXPEND_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPEND_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXP_NONALLOWEXPEND_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPEND_DETAILRowDeleted(Me, New PL_EXP_NONALLOWEXPEND_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPEND_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXP_NONALLOWEXPEND_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_NONALLOWEXPEND_DETAILRowDeleting(Me, New PL_EXP_NONALLOWEXPEND_DETAILRowChangeEvent(CType(e.Row,PL_EXP_NONALLOWEXPEND_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXP_NONALLOWEXPEND_DETAILRow(ByVal row As PL_EXP_NONALLOWEXPEND_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXP_NONALLOWEXPEND_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXP_PERSONALDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXP_PERSONALRow)
        
        Private columnEXA_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXA_KEY As Global.System.Data.DataColumn
        
        Private columnEXA_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXA_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXA_DESC As Global.System.Data.DataColumn
        
        Private columnEXA_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXA_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXA_NOTE As Global.System.Data.DataColumn
        
        Private columnEXA_DETAIL As Global.System.Data.DataColumn
        
        Private columnEXA_1 As Global.System.Data.DataColumn
        
        Private columnEXA_2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXP_PERSONAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXA_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXA_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXP_PERSONALRow
            Get
                Return CType(Me.Rows(index),PL_EXP_PERSONALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONALRowChanging As PL_EXP_PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONALRowChanged As PL_EXP_PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONALRowDeleting As PL_EXP_PERSONALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONALRowDeleted As PL_EXP_PERSONALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXP_PERSONALRow(ByVal row As PL_EXP_PERSONALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXP_PERSONALRow(ByVal EXA_PLTYPE As Short, ByVal EXA_KEY As Integer, ByVal EXA_SOURCENO As String, ByVal EXA_DESC As String, ByVal EXA_AMOUNT As Decimal, ByVal EXA_DEDUCTIBLE As Boolean, ByVal EXA_NOTE As String, ByVal EXA_DETAIL As String, ByVal EXA_1 As String, ByVal EXA_2 As String) As PL_EXP_PERSONALRow
            Dim rowPL_EXP_PERSONALRow As PL_EXP_PERSONALRow = CType(Me.NewRow,PL_EXP_PERSONALRow)
            Dim columnValuesArray() As Object = New Object() {EXA_PLTYPE, EXA_KEY, Nothing, EXA_SOURCENO, EXA_DESC, EXA_AMOUNT, EXA_DEDUCTIBLE, EXA_NOTE, EXA_DETAIL, EXA_1, EXA_2}
            rowPL_EXP_PERSONALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXP_PERSONALRow)
            Return rowPL_EXP_PERSONALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEXA_EXAKEY(ByVal EXA_EXAKEY As Integer) As PL_EXP_PERSONALRow
            Return CType(Me.Rows.Find(New Object() {EXA_EXAKEY}),PL_EXP_PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXP_PERSONALDataTable = CType(MyBase.Clone,PL_EXP_PERSONALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXP_PERSONALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXA_PLTYPE = MyBase.Columns("EXA_PLTYPE")
            Me.columnEXA_KEY = MyBase.Columns("EXA_KEY")
            Me.columnEXA_EXAKEY = MyBase.Columns("EXA_EXAKEY")
            Me.columnEXA_SOURCENO = MyBase.Columns("EXA_SOURCENO")
            Me.columnEXA_DESC = MyBase.Columns("EXA_DESC")
            Me.columnEXA_AMOUNT = MyBase.Columns("EXA_AMOUNT")
            Me.columnEXA_DEDUCTIBLE = MyBase.Columns("EXA_DEDUCTIBLE")
            Me.columnEXA_NOTE = MyBase.Columns("EXA_NOTE")
            Me.columnEXA_DETAIL = MyBase.Columns("EXA_DETAIL")
            Me.columnEXA_1 = MyBase.Columns("EXA_1")
            Me.columnEXA_2 = MyBase.Columns("EXA_2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXA_PLTYPE = New Global.System.Data.DataColumn("EXA_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_PLTYPE)
            Me.columnEXA_KEY = New Global.System.Data.DataColumn("EXA_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_KEY)
            Me.columnEXA_EXAKEY = New Global.System.Data.DataColumn("EXA_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_EXAKEY)
            Me.columnEXA_SOURCENO = New Global.System.Data.DataColumn("EXA_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_SOURCENO)
            Me.columnEXA_DESC = New Global.System.Data.DataColumn("EXA_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DESC)
            Me.columnEXA_AMOUNT = New Global.System.Data.DataColumn("EXA_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_AMOUNT)
            Me.columnEXA_DEDUCTIBLE = New Global.System.Data.DataColumn("EXA_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DEDUCTIBLE)
            Me.columnEXA_NOTE = New Global.System.Data.DataColumn("EXA_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_NOTE)
            Me.columnEXA_DETAIL = New Global.System.Data.DataColumn("EXA_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_DETAIL)
            Me.columnEXA_1 = New Global.System.Data.DataColumn("EXA_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_1)
            Me.columnEXA_2 = New Global.System.Data.DataColumn("EXA_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXA_2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEXA_EXAKEY}, true))
            Me.columnEXA_EXAKEY.AutoIncrement = true
            Me.columnEXA_EXAKEY.AllowDBNull = false
            Me.columnEXA_EXAKEY.Unique = true
            Me.columnEXA_SOURCENO.MaxLength = 12
            Me.columnEXA_DESC.MaxLength = 255
            Me.columnEXA_NOTE.MaxLength = 1073741823
            Me.columnEXA_DETAIL.MaxLength = 50
            Me.columnEXA_1.MaxLength = 50
            Me.columnEXA_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXP_PERSONALRow() As PL_EXP_PERSONALRow
            Return CType(Me.NewRow,PL_EXP_PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXP_PERSONALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXP_PERSONALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXP_PERSONALRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONALRowChanged(Me, New PL_EXP_PERSONALRowChangeEvent(CType(e.Row,PL_EXP_PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXP_PERSONALRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONALRowChanging(Me, New PL_EXP_PERSONALRowChangeEvent(CType(e.Row,PL_EXP_PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXP_PERSONALRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONALRowDeleted(Me, New PL_EXP_PERSONALRowChangeEvent(CType(e.Row,PL_EXP_PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXP_PERSONALRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONALRowDeleting(Me, New PL_EXP_PERSONALRowChangeEvent(CType(e.Row,PL_EXP_PERSONALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXP_PERSONALRow(ByVal row As PL_EXP_PERSONALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXP_PERSONALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_EXP_PERSONAL_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_EXP_PERSONAL_DETAILRow)
        
        Private columnEXAD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnEXAD_KEY As Global.System.Data.DataColumn
        
        Private columnEXAD_EXAKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnEXAD_EXADKEY As Global.System.Data.DataColumn
        
        Private columnEXAD_DESC As Global.System.Data.DataColumn
        
        Private columnEXAD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        Private columnEXAD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnEXAD_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_EXP_PERSONAL_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXAKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXAKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_EXADKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_EXADKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXAD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXAD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_EXP_PERSONAL_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_EXP_PERSONAL_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONAL_DETAILRowChanging As PL_EXP_PERSONAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONAL_DETAILRowChanged As PL_EXP_PERSONAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONAL_DETAILRowDeleting As PL_EXP_PERSONAL_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_EXP_PERSONAL_DETAILRowDeleted As PL_EXP_PERSONAL_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_EXP_PERSONAL_DETAILRow(ByVal row As PL_EXP_PERSONAL_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_EXP_PERSONAL_DETAILRow(ByVal EXAD_PLTYPE As Short, ByVal EXAD_KEY As Integer, ByVal parentPL_EXP_PERSONALRowByFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL As PL_EXP_PERSONALRow, ByVal EXAD_SOURCENO As String, ByVal EXAD_DESC As String, ByVal EXAD_DEDUCTIBLE As Boolean, ByVal EXAD_AMOUNT As Decimal, ByVal EXAD_NOTE As String) As PL_EXP_PERSONAL_DETAILRow
            Dim rowPL_EXP_PERSONAL_DETAILRow As PL_EXP_PERSONAL_DETAILRow = CType(Me.NewRow,PL_EXP_PERSONAL_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {EXAD_PLTYPE, EXAD_KEY, Nothing, EXAD_SOURCENO, Nothing, EXAD_DESC, EXAD_DEDUCTIBLE, EXAD_AMOUNT, EXAD_NOTE}
            If (Not (parentPL_EXP_PERSONALRowByFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_EXP_PERSONALRowByFK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL(2)
            End If
            rowPL_EXP_PERSONAL_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_EXP_PERSONAL_DETAILRow)
            Return rowPL_EXP_PERSONAL_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_EXP_PERSONAL_DETAILDataTable = CType(MyBase.Clone,PL_EXP_PERSONAL_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_EXP_PERSONAL_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEXAD_PLTYPE = MyBase.Columns("EXAD_PLTYPE")
            Me.columnEXAD_KEY = MyBase.Columns("EXAD_KEY")
            Me.columnEXAD_EXAKEY = MyBase.Columns("EXAD_EXAKEY")
            Me.columnEXAD_SOURCENO = MyBase.Columns("EXAD_SOURCENO")
            Me.columnEXAD_EXADKEY = MyBase.Columns("EXAD_EXADKEY")
            Me.columnEXAD_DESC = MyBase.Columns("EXAD_DESC")
            Me.columnEXAD_DEDUCTIBLE = MyBase.Columns("EXAD_DEDUCTIBLE")
            Me.columnEXAD_AMOUNT = MyBase.Columns("EXAD_AMOUNT")
            Me.columnEXAD_NOTE = MyBase.Columns("EXAD_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEXAD_PLTYPE = New Global.System.Data.DataColumn("EXAD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_PLTYPE)
            Me.columnEXAD_KEY = New Global.System.Data.DataColumn("EXAD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_KEY)
            Me.columnEXAD_EXAKEY = New Global.System.Data.DataColumn("EXAD_EXAKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXAKEY)
            Me.columnEXAD_SOURCENO = New Global.System.Data.DataColumn("EXAD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_SOURCENO)
            Me.columnEXAD_EXADKEY = New Global.System.Data.DataColumn("EXAD_EXADKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_EXADKEY)
            Me.columnEXAD_DESC = New Global.System.Data.DataColumn("EXAD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DESC)
            Me.columnEXAD_DEDUCTIBLE = New Global.System.Data.DataColumn("EXAD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_DEDUCTIBLE)
            Me.columnEXAD_AMOUNT = New Global.System.Data.DataColumn("EXAD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_AMOUNT)
            Me.columnEXAD_NOTE = New Global.System.Data.DataColumn("EXAD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXAD_NOTE)
            Me.columnEXAD_SOURCENO.MaxLength = 12
            Me.columnEXAD_EXADKEY.AutoIncrement = true
            Me.columnEXAD_DESC.MaxLength = 255
            Me.columnEXAD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_EXP_PERSONAL_DETAILRow() As PL_EXP_PERSONAL_DETAILRow
            Return CType(Me.NewRow,PL_EXP_PERSONAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_EXP_PERSONAL_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_EXP_PERSONAL_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_EXP_PERSONAL_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONAL_DETAILRowChanged(Me, New PL_EXP_PERSONAL_DETAILRowChangeEvent(CType(e.Row,PL_EXP_PERSONAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_EXP_PERSONAL_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONAL_DETAILRowChanging(Me, New PL_EXP_PERSONAL_DETAILRowChangeEvent(CType(e.Row,PL_EXP_PERSONAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_EXP_PERSONAL_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONAL_DETAILRowDeleted(Me, New PL_EXP_PERSONAL_DETAILRowChangeEvent(CType(e.Row,PL_EXP_PERSONAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_EXP_PERSONAL_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_EXP_PERSONAL_DETAILRowDeleting(Me, New PL_EXP_PERSONAL_DETAILRowChangeEvent(CType(e.Row,PL_EXP_PERSONAL_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_EXP_PERSONAL_DETAILRow(ByVal row As PL_EXP_PERSONAL_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_EXP_PERSONAL_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_PURCHASEDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_PURCHASERow)
        
        Private columnPL_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPL_KEY As Global.System.Data.DataColumn
        
        Private columnPL_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPL_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPL_DESC As Global.System.Data.DataColumn
        
        Private columnPL_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPL_NOTE As Global.System.Data.DataColumn
        
        Private columnPL_DETAIL As Global.System.Data.DataColumn
        
        Private columnPL_1 As Global.System.Data.DataColumn
        
        Private columnPL_2 As Global.System.Data.DataColumn
        
        Private columnPL_DEDUCTIBLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_PURCHASE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DETAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DETAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_PURCHASERow
            Get
                Return CType(Me.Rows(index),PL_PURCHASERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASERowChanging As PL_PURCHASERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASERowChanged As PL_PURCHASERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASERowDeleting As PL_PURCHASERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASERowDeleted As PL_PURCHASERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_PURCHASERow(ByVal row As PL_PURCHASERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_PURCHASERow(ByVal PL_PLTYPE As Short, ByVal PL_KEY As Integer, ByVal PL_SOURCENO As String, ByVal PL_DESC As String, ByVal PL_AMOUNT As Decimal, ByVal PL_NOTE As String, ByVal PL_DETAIL As String, ByVal PL_1 As String, ByVal PL_2 As String, ByVal PL_DEDUCTIBLE As Boolean) As PL_PURCHASERow
            Dim rowPL_PURCHASERow As PL_PURCHASERow = CType(Me.NewRow,PL_PURCHASERow)
            Dim columnValuesArray() As Object = New Object() {PL_PLTYPE, PL_KEY, Nothing, PL_SOURCENO, PL_DESC, PL_AMOUNT, PL_NOTE, PL_DETAIL, PL_1, PL_2, PL_DEDUCTIBLE}
            rowPL_PURCHASERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_PURCHASERow)
            Return rowPL_PURCHASERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPL_PLFCSKEY(ByVal PL_PLFCSKEY As Integer) As PL_PURCHASERow
            Return CType(Me.Rows.Find(New Object() {PL_PLFCSKEY}),PL_PURCHASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_PURCHASEDataTable = CType(MyBase.Clone,PL_PURCHASEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_PURCHASEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPL_PLTYPE = MyBase.Columns("PL_PLTYPE")
            Me.columnPL_KEY = MyBase.Columns("PL_KEY")
            Me.columnPL_PLFCSKEY = MyBase.Columns("PL_PLFCSKEY")
            Me.columnPL_SOURCENO = MyBase.Columns("PL_SOURCENO")
            Me.columnPL_DESC = MyBase.Columns("PL_DESC")
            Me.columnPL_AMOUNT = MyBase.Columns("PL_AMOUNT")
            Me.columnPL_NOTE = MyBase.Columns("PL_NOTE")
            Me.columnPL_DETAIL = MyBase.Columns("PL_DETAIL")
            Me.columnPL_1 = MyBase.Columns("PL_1")
            Me.columnPL_2 = MyBase.Columns("PL_2")
            Me.columnPL_DEDUCTIBLE = MyBase.Columns("PL_DEDUCTIBLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPL_PLTYPE = New Global.System.Data.DataColumn("PL_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLTYPE)
            Me.columnPL_KEY = New Global.System.Data.DataColumn("PL_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_KEY)
            Me.columnPL_PLFCSKEY = New Global.System.Data.DataColumn("PL_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PLFCSKEY)
            Me.columnPL_SOURCENO = New Global.System.Data.DataColumn("PL_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_SOURCENO)
            Me.columnPL_DESC = New Global.System.Data.DataColumn("PL_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DESC)
            Me.columnPL_AMOUNT = New Global.System.Data.DataColumn("PL_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_AMOUNT)
            Me.columnPL_NOTE = New Global.System.Data.DataColumn("PL_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NOTE)
            Me.columnPL_DETAIL = New Global.System.Data.DataColumn("PL_DETAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DETAIL)
            Me.columnPL_1 = New Global.System.Data.DataColumn("PL_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_1)
            Me.columnPL_2 = New Global.System.Data.DataColumn("PL_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_2)
            Me.columnPL_DEDUCTIBLE = New Global.System.Data.DataColumn("PL_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DEDUCTIBLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPL_PLFCSKEY}, true))
            Me.columnPL_PLFCSKEY.AutoIncrement = true
            Me.columnPL_PLFCSKEY.AllowDBNull = false
            Me.columnPL_PLFCSKEY.Unique = true
            Me.columnPL_SOURCENO.MaxLength = 12
            Me.columnPL_DESC.MaxLength = 255
            Me.columnPL_NOTE.MaxLength = 1073741823
            Me.columnPL_DETAIL.MaxLength = 30
            Me.columnPL_1.MaxLength = 50
            Me.columnPL_2.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_PURCHASERow() As PL_PURCHASERow
            Return CType(Me.NewRow,PL_PURCHASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_PURCHASERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_PURCHASERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_PURCHASERowChangedEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASERowChanged(Me, New PL_PURCHASERowChangeEvent(CType(e.Row,PL_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_PURCHASERowChangingEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASERowChanging(Me, New PL_PURCHASERowChangeEvent(CType(e.Row,PL_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_PURCHASERowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASERowDeleted(Me, New PL_PURCHASERowChangeEvent(CType(e.Row,PL_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_PURCHASERowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASERowDeleting(Me, New PL_PURCHASERowChangeEvent(CType(e.Row,PL_PURCHASERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_PURCHASERow(ByVal row As PL_PURCHASERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_PURCHASEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PL_PURCHASE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of PL_PURCHASE_DETAILRow)
        
        Private columnPLD_PLTYPE As Global.System.Data.DataColumn
        
        Private columnPLD_KEY As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSKEY As Global.System.Data.DataColumn
        
        Private columnPLD_SOURCENO As Global.System.Data.DataColumn
        
        Private columnPLD_PLFCSDKEY As Global.System.Data.DataColumn
        
        Private columnPLD_DESC As Global.System.Data.DataColumn
        
        Private columnPLD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPLD_NOTE As Global.System.Data.DataColumn
        
        Private columnPLD_DEDUCTIBLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PL_PURCHASE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_SOURCENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_SOURCENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_PLFCSDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_PLFCSDKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLD_DEDUCTIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLD_DEDUCTIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PL_PURCHASE_DETAILRow
            Get
                Return CType(Me.Rows(index),PL_PURCHASE_DETAILRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASE_DETAILRowChanging As PL_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASE_DETAILRowChanged As PL_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASE_DETAILRowDeleting As PL_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PL_PURCHASE_DETAILRowDeleted As PL_PURCHASE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPL_PURCHASE_DETAILRow(ByVal row As PL_PURCHASE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPL_PURCHASE_DETAILRow(ByVal PLD_PLTYPE As Short, ByVal PLD_KEY As Integer, ByVal parentPL_PURCHASERowByFK_PL_PURCHASE_PL_PURCHASE_DETAIL As PL_PURCHASERow, ByVal PLD_SOURCENO As String, ByVal PLD_DESC As String, ByVal PLD_AMOUNT As Decimal, ByVal PLD_NOTE As String, ByVal PLD_DEDUCTIBLE As Boolean) As PL_PURCHASE_DETAILRow
            Dim rowPL_PURCHASE_DETAILRow As PL_PURCHASE_DETAILRow = CType(Me.NewRow,PL_PURCHASE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {PLD_PLTYPE, PLD_KEY, Nothing, PLD_SOURCENO, Nothing, PLD_DESC, PLD_AMOUNT, PLD_NOTE, PLD_DEDUCTIBLE}
            If (Not (parentPL_PURCHASERowByFK_PL_PURCHASE_PL_PURCHASE_DETAIL) Is Nothing) Then
                columnValuesArray(2) = parentPL_PURCHASERowByFK_PL_PURCHASE_PL_PURCHASE_DETAIL(2)
            End If
            rowPL_PURCHASE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPL_PURCHASE_DETAILRow)
            Return rowPL_PURCHASE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PL_PURCHASE_DETAILDataTable = CType(MyBase.Clone,PL_PURCHASE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PL_PURCHASE_DETAILDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLD_PLTYPE = MyBase.Columns("PLD_PLTYPE")
            Me.columnPLD_KEY = MyBase.Columns("PLD_KEY")
            Me.columnPLD_PLFCSKEY = MyBase.Columns("PLD_PLFCSKEY")
            Me.columnPLD_SOURCENO = MyBase.Columns("PLD_SOURCENO")
            Me.columnPLD_PLFCSDKEY = MyBase.Columns("PLD_PLFCSDKEY")
            Me.columnPLD_DESC = MyBase.Columns("PLD_DESC")
            Me.columnPLD_AMOUNT = MyBase.Columns("PLD_AMOUNT")
            Me.columnPLD_NOTE = MyBase.Columns("PLD_NOTE")
            Me.columnPLD_DEDUCTIBLE = MyBase.Columns("PLD_DEDUCTIBLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLD_PLTYPE = New Global.System.Data.DataColumn("PLD_PLTYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLTYPE)
            Me.columnPLD_KEY = New Global.System.Data.DataColumn("PLD_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_KEY)
            Me.columnPLD_PLFCSKEY = New Global.System.Data.DataColumn("PLD_PLFCSKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSKEY)
            Me.columnPLD_SOURCENO = New Global.System.Data.DataColumn("PLD_SOURCENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_SOURCENO)
            Me.columnPLD_PLFCSDKEY = New Global.System.Data.DataColumn("PLD_PLFCSDKEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_PLFCSDKEY)
            Me.columnPLD_DESC = New Global.System.Data.DataColumn("PLD_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_DESC)
            Me.columnPLD_AMOUNT = New Global.System.Data.DataColumn("PLD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_AMOUNT)
            Me.columnPLD_NOTE = New Global.System.Data.DataColumn("PLD_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_NOTE)
            Me.columnPLD_DEDUCTIBLE = New Global.System.Data.DataColumn("PLD_DEDUCTIBLE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLD_DEDUCTIBLE)
            Me.columnPLD_SOURCENO.MaxLength = 12
            Me.columnPLD_PLFCSDKEY.AutoIncrement = true
            Me.columnPLD_DESC.MaxLength = 255
            Me.columnPLD_NOTE.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPL_PURCHASE_DETAILRow() As PL_PURCHASE_DETAILRow
            Return CType(Me.NewRow,PL_PURCHASE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PL_PURCHASE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PL_PURCHASE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PL_PURCHASE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASE_DETAILRowChanged(Me, New PL_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PL_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PL_PURCHASE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASE_DETAILRowChanging(Me, New PL_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PL_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PL_PURCHASE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASE_DETAILRowDeleted(Me, New PL_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PL_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PL_PURCHASE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PL_PURCHASE_DETAILRowDeleting(Me, New PL_PURCHASE_DETAILRowChangeEvent(CType(e.Row,PL_PURCHASE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePL_PURCHASE_DETAILRow(ByVal row As PL_PURCHASE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PL_PURCHASE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROFIT_LOSS_ACCOUNTDataTable
        Inherits Global.System.Data.TypedTableBase(Of PROFIT_LOSS_ACCOUNTRow)
        
        Private columnPL_KEY As Global.System.Data.DataColumn
        
        Private columnPL_REF_PREFIX As Global.System.Data.DataColumn
        
        Private columnPL_REF_NO As Global.System.Data.DataColumn
        
        Private columnPL_FILENO As Global.System.Data.DataColumn
        
        Private columnPL_NAME As Global.System.Data.DataColumn
        
        Private columnPL_YA As Global.System.Data.DataColumn
        
        Private columnPL_MAIN_BUSINESS As Global.System.Data.DataColumn
        
        Private columnPL_SALES As Global.System.Data.DataColumn
        
        Private columnPL_OP_STK As Global.System.Data.DataColumn
        
        Private columnPL_PURCHASES As Global.System.Data.DataColumn
        
        Private columnPL_PRO_COST As Global.System.Data.DataColumn
        
        Private columnPL_PRO_COST_DPC As Global.System.Data.DataColumn
        
        Private columnPL_PRO_COST_OAE As Global.System.Data.DataColumn
        
        Private columnPL_PRO_COST_ONAE As Global.System.Data.DataColumn
        
        Private columnPL_PURCHASES_PRO_COST As Global.System.Data.DataColumn
        
        Private columnPL_CLS_STK As Global.System.Data.DataColumn
        
        Private columnPL_COGS As Global.System.Data.DataColumn
        
        Private columnPL_GROSS_PROFIT As Global.System.Data.DataColumn
        
        Private columnPL_OTH_BSIN As Global.System.Data.DataColumn
        
        Private columnPL_OTH_IN As Global.System.Data.DataColumn
        
        Private columnPL_OTH_IN_DIVIDEND As Global.System.Data.DataColumn
        
        Private columnPL_OTH_IN_INTEREST As Global.System.Data.DataColumn
        
        Private columnPL_OTH_IN_RENTAL_ROYALTY As Global.System.Data.DataColumn
        
        Private columnPL_OTH_IN_OTHER As Global.System.Data.DataColumn
        
        Private columnPL_NT_INCOME As Global.System.Data.DataColumn
        
        Private columnPL_NT_GAIN_DISPOSAL As Global.System.Data.DataColumn
        
        Private columnPL_NT_GAIN_FOREXCHANGE As Global.System.Data.DataColumn
        
        Private columnPL_NT_GAIN_INVEST As Global.System.Data.DataColumn
        
        Private columnPL_NT_OTHERS As Global.System.Data.DataColumn
        
        Private columnPL_EXP_LOANINTEREST As Global.System.Data.DataColumn
        
        Private columnPL_EXP_SALARY As Global.System.Data.DataColumn
        
        Private columnPL_EXP_RENTAL As Global.System.Data.DataColumn
        
        Private columnPL_EXP_CONTRACT As Global.System.Data.DataColumn
        
        Private columnPL_EXP_COMMISSION As Global.System.Data.DataColumn
        
        Private columnPL_BAD_DEBTS As Global.System.Data.DataColumn
        
        Private columnPL_TRAVEL As Global.System.Data.DataColumn
        
        Private columnPL_NAE_EPF_PER As Global.System.Data.DataColumn
        
        Private columnPL_NAE_EPF_STAFF As Global.System.Data.DataColumn
        
        Private columnPL_NAE_LEGALFEE As Global.System.Data.DataColumn
        
        Private columnPL_NON_ALLOW_LOSS As Global.System.Data.DataColumn
        
        Private columnPL_NAL_LOSS_DISPOSAL As Global.System.Data.DataColumn
        
        Private columnPL_NAL_LOSS_FOREXCHANGE As Global.System.Data.DataColumn
        
        Private columnPL_NAL_LOSS_INVEST As Global.System.Data.DataColumn
        
        Private columnPL_NAL_OTHERS As Global.System.Data.DataColumn
        
        Private columnPL_NAE_DEPERECIATION As Global.System.Data.DataColumn
        
        Private columnPL_NAE_ENTERTAINMENT As Global.System.Data.DataColumn
        
        Private columnPL_NAE_GIFT As Global.System.Data.DataColumn
        
        Private columnPL_NAE_DONATION As Global.System.Data.DataColumn
        
        Private columnPL_NAE_PENALTY As Global.System.Data.DataColumn
        
        Private columnPL_NAE_STOCKDRAWING As Global.System.Data.DataColumn
        
        Private columnPL_NAE_CASHDRAWING As Global.System.Data.DataColumn
        
        Private columnPL_NAE_PROVISION As Global.System.Data.DataColumn
        
        Private columnPL_NAE_PRELIMINARY As Global.System.Data.DataColumn
        
        Private columnPL_NAE_CAPITALEXP As Global.System.Data.DataColumn
        
        Private columnPL_NAE_INTERESTEXP As Global.System.Data.DataColumn
        
        Private columnPL_NAE_ASSETWOFF As Global.System.Data.DataColumn
        
        Private columnPL_NAEP_MOTORVEH As Global.System.Data.DataColumn
        
        Private columnPL_NAEP_RESIDENTIAL As Global.System.Data.DataColumn
        
        Private columnPL_NAEP_TEL As Global.System.Data.DataColumn
        
        Private columnPL_NAEP_SUBSCRIPTION As Global.System.Data.DataColumn
        
        Private columnPL_NAEP_SEMILAR As Global.System.Data.DataColumn
        
        Private columnPL_NAEP_MEDICALEXP As Global.System.Data.DataColumn
        
        Private columnPL_NAE_OTHEREXP As Global.System.Data.DataColumn
        
        Private columnPL_NAE_TOTALEXP As Global.System.Data.DataColumn
        
        Private columnPL_TOT_EXP As Global.System.Data.DataColumn
        
        Private columnPL_NET_PROFIT_LOSS As Global.System.Data.DataColumn
        
        Private columnPL_DISALLOWED_EXP As Global.System.Data.DataColumn
        
        Private columnPL_TOTALX As Global.System.Data.DataColumn
        
        Private columnPL_TOTALY As Global.System.Data.DataColumn
        
        Private columnPL_1 As Global.System.Data.DataColumn
        
        Private columnPL_2 As Global.System.Data.DataColumn
        
        Private columnPL_3 As Global.System.Data.DataColumn
        
        Private columnPL_4 As Global.System.Data.DataColumn
        
        Private columnPL_5 As Global.System.Data.DataColumn
        
        Private columnPL_COMPANY As Global.System.Data.DataColumn
        
        Private columnPL_MAINCOMPANY As Global.System.Data.DataColumn
        
        Private columnPL_REP_MAINT As Global.System.Data.DataColumn
        
        Private columnPL_PRO_ADV As Global.System.Data.DataColumn
        
        Private columnPL_JKDM As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROFIT_LOSS_ACCOUNT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_REF_PREFIXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_REF_PREFIX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_REF_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_REF_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_FILENOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_FILENO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_YAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_YA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_MAIN_BUSINESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_MAIN_BUSINESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_SALESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_SALES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OP_STKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OP_STK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PURCHASESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PURCHASES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PRO_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PRO_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PRO_COST_DPCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PRO_COST_DPC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PRO_COST_OAEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PRO_COST_OAE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PRO_COST_ONAEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PRO_COST_ONAE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PURCHASES_PRO_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PURCHASES_PRO_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_CLS_STKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_CLS_STK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_COGSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_COGS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_GROSS_PROFITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_GROSS_PROFIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OTH_BSINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OTH_BSIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OTH_INColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OTH_IN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OTH_IN_DIVIDENDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OTH_IN_DIVIDEND
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OTH_IN_INTERESTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OTH_IN_INTEREST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OTH_IN_RENTAL_ROYALTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OTH_IN_RENTAL_ROYALTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_OTH_IN_OTHERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_OTH_IN_OTHER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NT_INCOMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NT_INCOME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NT_GAIN_DISPOSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NT_GAIN_DISPOSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NT_GAIN_FOREXCHANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NT_GAIN_FOREXCHANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NT_GAIN_INVESTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NT_GAIN_INVEST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NT_OTHERSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NT_OTHERS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_EXP_LOANINTERESTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_EXP_LOANINTEREST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_EXP_SALARYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_EXP_SALARY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_EXP_RENTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_EXP_RENTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_EXP_CONTRACTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_EXP_CONTRACT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_EXP_COMMISSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_EXP_COMMISSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_BAD_DEBTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_BAD_DEBTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_TRAVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_TRAVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_EPF_PERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_EPF_PER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_EPF_STAFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_EPF_STAFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_LEGALFEEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_LEGALFEE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NON_ALLOW_LOSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NON_ALLOW_LOSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAL_LOSS_DISPOSALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAL_LOSS_DISPOSAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAL_LOSS_FOREXCHANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAL_LOSS_FOREXCHANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAL_LOSS_INVESTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAL_LOSS_INVEST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAL_OTHERSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAL_OTHERS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_DEPERECIATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_DEPERECIATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_ENTERTAINMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_ENTERTAINMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_GIFTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_GIFT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_DONATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_DONATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_PENALTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_PENALTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_STOCKDRAWINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_STOCKDRAWING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_CASHDRAWINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_CASHDRAWING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_PROVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_PROVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_PRELIMINARYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_PRELIMINARY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_CAPITALEXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_CAPITALEXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_INTERESTEXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_INTERESTEXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_ASSETWOFFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_ASSETWOFF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAEP_MOTORVEHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAEP_MOTORVEH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAEP_RESIDENTIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAEP_RESIDENTIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAEP_TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAEP_TEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAEP_SUBSCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAEP_SUBSCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAEP_SEMILARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAEP_SEMILAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAEP_MEDICALEXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAEP_MEDICALEXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_OTHEREXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_OTHEREXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NAE_TOTALEXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NAE_TOTALEXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_TOT_EXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_TOT_EXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_NET_PROFIT_LOSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_NET_PROFIT_LOSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_DISALLOWED_EXPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_DISALLOWED_EXP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_TOTALXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_TOTALX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_TOTALYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_TOTALY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_COMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_COMPANY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_MAINCOMPANYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_MAINCOMPANY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_REP_MAINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_REP_MAINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_PRO_ADVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_PRO_ADV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PL_JKDMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPL_JKDM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROFIT_LOSS_ACCOUNTRow
            Get
                Return CType(Me.Rows(index),PROFIT_LOSS_ACCOUNTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFIT_LOSS_ACCOUNTRowChanging As PROFIT_LOSS_ACCOUNTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFIT_LOSS_ACCOUNTRowChanged As PROFIT_LOSS_ACCOUNTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFIT_LOSS_ACCOUNTRowDeleting As PROFIT_LOSS_ACCOUNTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROFIT_LOSS_ACCOUNTRowDeleted As PROFIT_LOSS_ACCOUNTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPROFIT_LOSS_ACCOUNTRow(ByVal row As PROFIT_LOSS_ACCOUNTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPROFIT_LOSS_ACCOUNTRow( _
                    ByVal PL_KEY As Integer,  _
                    ByVal PL_REF_PREFIX As String,  _
                    ByVal PL_REF_NO As String,  _
                    ByVal PL_FILENO As String,  _
                    ByVal PL_NAME As String,  _
                    ByVal PL_YA As String,  _
                    ByVal PL_MAIN_BUSINESS As String,  _
                    ByVal PL_SALES As String,  _
                    ByVal PL_OP_STK As String,  _
                    ByVal PL_PURCHASES As String,  _
                    ByVal PL_PRO_COST As String,  _
                    ByVal PL_PRO_COST_DPC As String,  _
                    ByVal PL_PRO_COST_OAE As String,  _
                    ByVal PL_PRO_COST_ONAE As String,  _
                    ByVal PL_PURCHASES_PRO_COST As String,  _
                    ByVal PL_CLS_STK As String,  _
                    ByVal PL_COGS As String,  _
                    ByVal PL_GROSS_PROFIT As String,  _
                    ByVal PL_OTH_BSIN As String,  _
                    ByVal PL_OTH_IN As String,  _
                    ByVal PL_OTH_IN_DIVIDEND As String,  _
                    ByVal PL_OTH_IN_INTEREST As String,  _
                    ByVal PL_OTH_IN_RENTAL_ROYALTY As String,  _
                    ByVal PL_OTH_IN_OTHER As String,  _
                    ByVal PL_NT_INCOME As String,  _
                    ByVal PL_NT_GAIN_DISPOSAL As String,  _
                    ByVal PL_NT_GAIN_FOREXCHANGE As String,  _
                    ByVal PL_NT_GAIN_INVEST As String,  _
                    ByVal PL_NT_OTHERS As String,  _
                    ByVal PL_EXP_LOANINTEREST As String,  _
                    ByVal PL_EXP_SALARY As String,  _
                    ByVal PL_EXP_RENTAL As String,  _
                    ByVal PL_EXP_CONTRACT As String,  _
                    ByVal PL_EXP_COMMISSION As String,  _
                    ByVal PL_BAD_DEBTS As String,  _
                    ByVal PL_TRAVEL As String,  _
                    ByVal PL_NAE_EPF_PER As String,  _
                    ByVal PL_NAE_EPF_STAFF As String,  _
                    ByVal PL_NAE_LEGALFEE As String,  _
                    ByVal PL_NON_ALLOW_LOSS As String,  _
                    ByVal PL_NAL_LOSS_DISPOSAL As String,  _
                    ByVal PL_NAL_LOSS_FOREXCHANGE As String,  _
                    ByVal PL_NAL_LOSS_INVEST As String,  _
                    ByVal PL_NAL_OTHERS As String,  _
                    ByVal PL_NAE_DEPERECIATION As String,  _
                    ByVal PL_NAE_ENTERTAINMENT As String,  _
                    ByVal PL_NAE_GIFT As String,  _
                    ByVal PL_NAE_DONATION As String,  _
                    ByVal PL_NAE_PENALTY As String,  _
                    ByVal PL_NAE_STOCKDRAWING As String,  _
                    ByVal PL_NAE_CASHDRAWING As String,  _
                    ByVal PL_NAE_PROVISION As String,  _
                    ByVal PL_NAE_PRELIMINARY As String,  _
                    ByVal PL_NAE_CAPITALEXP As String,  _
                    ByVal PL_NAE_INTERESTEXP As String,  _
                    ByVal PL_NAE_ASSETWOFF As String,  _
                    ByVal PL_NAEP_MOTORVEH As String,  _
                    ByVal PL_NAEP_RESIDENTIAL As String,  _
                    ByVal PL_NAEP_TEL As String,  _
                    ByVal PL_NAEP_SUBSCRIPTION As String,  _
                    ByVal PL_NAEP_SEMILAR As String,  _
                    ByVal PL_NAEP_MEDICALEXP As String,  _
                    ByVal PL_NAE_OTHEREXP As String,  _
                    ByVal PL_NAE_TOTALEXP As String,  _
                    ByVal PL_TOT_EXP As String,  _
                    ByVal PL_NET_PROFIT_LOSS As String,  _
                    ByVal PL_DISALLOWED_EXP As String,  _
                    ByVal PL_TOTALX As String,  _
                    ByVal PL_TOTALY As String,  _
                    ByVal PL_1 As String,  _
                    ByVal PL_2 As String,  _
                    ByVal PL_3 As String,  _
                    ByVal PL_4 As String,  _
                    ByVal PL_5 As String,  _
                    ByVal PL_COMPANY As String,  _
                    ByVal PL_MAINCOMPANY As String,  _
                    ByVal PL_REP_MAINT As String,  _
                    ByVal PL_PRO_ADV As String,  _
                    ByVal PL_JKDM As String) As PROFIT_LOSS_ACCOUNTRow
            Dim rowPROFIT_LOSS_ACCOUNTRow As PROFIT_LOSS_ACCOUNTRow = CType(Me.NewRow,PROFIT_LOSS_ACCOUNTRow)
            Dim columnValuesArray() As Object = New Object() {PL_KEY, PL_REF_PREFIX, PL_REF_NO, PL_FILENO, PL_NAME, PL_YA, PL_MAIN_BUSINESS, PL_SALES, PL_OP_STK, PL_PURCHASES, PL_PRO_COST, PL_PRO_COST_DPC, PL_PRO_COST_OAE, PL_PRO_COST_ONAE, PL_PURCHASES_PRO_COST, PL_CLS_STK, PL_COGS, PL_GROSS_PROFIT, PL_OTH_BSIN, PL_OTH_IN, PL_OTH_IN_DIVIDEND, PL_OTH_IN_INTEREST, PL_OTH_IN_RENTAL_ROYALTY, PL_OTH_IN_OTHER, PL_NT_INCOME, PL_NT_GAIN_DISPOSAL, PL_NT_GAIN_FOREXCHANGE, PL_NT_GAIN_INVEST, PL_NT_OTHERS, PL_EXP_LOANINTEREST, PL_EXP_SALARY, PL_EXP_RENTAL, PL_EXP_CONTRACT, PL_EXP_COMMISSION, PL_BAD_DEBTS, PL_TRAVEL, PL_NAE_EPF_PER, PL_NAE_EPF_STAFF, PL_NAE_LEGALFEE, PL_NON_ALLOW_LOSS, PL_NAL_LOSS_DISPOSAL, PL_NAL_LOSS_FOREXCHANGE, PL_NAL_LOSS_INVEST, PL_NAL_OTHERS, PL_NAE_DEPERECIATION, PL_NAE_ENTERTAINMENT, PL_NAE_GIFT, PL_NAE_DONATION, PL_NAE_PENALTY, PL_NAE_STOCKDRAWING, PL_NAE_CASHDRAWING, PL_NAE_PROVISION, PL_NAE_PRELIMINARY, PL_NAE_CAPITALEXP, PL_NAE_INTERESTEXP, PL_NAE_ASSETWOFF, PL_NAEP_MOTORVEH, PL_NAEP_RESIDENTIAL, PL_NAEP_TEL, PL_NAEP_SUBSCRIPTION, PL_NAEP_SEMILAR, PL_NAEP_MEDICALEXP, PL_NAE_OTHEREXP, PL_NAE_TOTALEXP, PL_TOT_EXP, PL_NET_PROFIT_LOSS, PL_DISALLOWED_EXP, PL_TOTALX, PL_TOTALY, PL_1, PL_2, PL_3, PL_4, PL_5, PL_COMPANY, PL_MAINCOMPANY, PL_REP_MAINT, PL_PRO_ADV, PL_JKDM}
            rowPROFIT_LOSS_ACCOUNTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROFIT_LOSS_ACCOUNTRow)
            Return rowPROFIT_LOSS_ACCOUNTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPL_KEY(ByVal PL_KEY As Integer) As PROFIT_LOSS_ACCOUNTRow
            Return CType(Me.Rows.Find(New Object() {PL_KEY}),PROFIT_LOSS_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROFIT_LOSS_ACCOUNTDataTable = CType(MyBase.Clone,PROFIT_LOSS_ACCOUNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROFIT_LOSS_ACCOUNTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPL_KEY = MyBase.Columns("PL_KEY")
            Me.columnPL_REF_PREFIX = MyBase.Columns("PL_REF_PREFIX")
            Me.columnPL_REF_NO = MyBase.Columns("PL_REF_NO")
            Me.columnPL_FILENO = MyBase.Columns("PL_FILENO")
            Me.columnPL_NAME = MyBase.Columns("PL_NAME")
            Me.columnPL_YA = MyBase.Columns("PL_YA")
            Me.columnPL_MAIN_BUSINESS = MyBase.Columns("PL_MAIN_BUSINESS")
            Me.columnPL_SALES = MyBase.Columns("PL_SALES")
            Me.columnPL_OP_STK = MyBase.Columns("PL_OP_STK")
            Me.columnPL_PURCHASES = MyBase.Columns("PL_PURCHASES")
            Me.columnPL_PRO_COST = MyBase.Columns("PL_PRO_COST")
            Me.columnPL_PRO_COST_DPC = MyBase.Columns("PL_PRO_COST_DPC")
            Me.columnPL_PRO_COST_OAE = MyBase.Columns("PL_PRO_COST_OAE")
            Me.columnPL_PRO_COST_ONAE = MyBase.Columns("PL_PRO_COST_ONAE")
            Me.columnPL_PURCHASES_PRO_COST = MyBase.Columns("PL_PURCHASES_PRO_COST")
            Me.columnPL_CLS_STK = MyBase.Columns("PL_CLS_STK")
            Me.columnPL_COGS = MyBase.Columns("PL_COGS")
            Me.columnPL_GROSS_PROFIT = MyBase.Columns("PL_GROSS_PROFIT")
            Me.columnPL_OTH_BSIN = MyBase.Columns("PL_OTH_BSIN")
            Me.columnPL_OTH_IN = MyBase.Columns("PL_OTH_IN")
            Me.columnPL_OTH_IN_DIVIDEND = MyBase.Columns("PL_OTH_IN_DIVIDEND")
            Me.columnPL_OTH_IN_INTEREST = MyBase.Columns("PL_OTH_IN_INTEREST")
            Me.columnPL_OTH_IN_RENTAL_ROYALTY = MyBase.Columns("PL_OTH_IN_RENTAL_ROYALTY")
            Me.columnPL_OTH_IN_OTHER = MyBase.Columns("PL_OTH_IN_OTHER")
            Me.columnPL_NT_INCOME = MyBase.Columns("PL_NT_INCOME")
            Me.columnPL_NT_GAIN_DISPOSAL = MyBase.Columns("PL_NT_GAIN_DISPOSAL")
            Me.columnPL_NT_GAIN_FOREXCHANGE = MyBase.Columns("PL_NT_GAIN_FOREXCHANGE")
            Me.columnPL_NT_GAIN_INVEST = MyBase.Columns("PL_NT_GAIN_INVEST")
            Me.columnPL_NT_OTHERS = MyBase.Columns("PL_NT_OTHERS")
            Me.columnPL_EXP_LOANINTEREST = MyBase.Columns("PL_EXP_LOANINTEREST")
            Me.columnPL_EXP_SALARY = MyBase.Columns("PL_EXP_SALARY")
            Me.columnPL_EXP_RENTAL = MyBase.Columns("PL_EXP_RENTAL")
            Me.columnPL_EXP_CONTRACT = MyBase.Columns("PL_EXP_CONTRACT")
            Me.columnPL_EXP_COMMISSION = MyBase.Columns("PL_EXP_COMMISSION")
            Me.columnPL_BAD_DEBTS = MyBase.Columns("PL_BAD_DEBTS")
            Me.columnPL_TRAVEL = MyBase.Columns("PL_TRAVEL")
            Me.columnPL_NAE_EPF_PER = MyBase.Columns("PL_NAE_EPF_PER")
            Me.columnPL_NAE_EPF_STAFF = MyBase.Columns("PL_NAE_EPF_STAFF")
            Me.columnPL_NAE_LEGALFEE = MyBase.Columns("PL_NAE_LEGALFEE")
            Me.columnPL_NON_ALLOW_LOSS = MyBase.Columns("PL_NON_ALLOW_LOSS")
            Me.columnPL_NAL_LOSS_DISPOSAL = MyBase.Columns("PL_NAL_LOSS_DISPOSAL")
            Me.columnPL_NAL_LOSS_FOREXCHANGE = MyBase.Columns("PL_NAL_LOSS_FOREXCHANGE")
            Me.columnPL_NAL_LOSS_INVEST = MyBase.Columns("PL_NAL_LOSS_INVEST")
            Me.columnPL_NAL_OTHERS = MyBase.Columns("PL_NAL_OTHERS")
            Me.columnPL_NAE_DEPERECIATION = MyBase.Columns("PL_NAE_DEPERECIATION")
            Me.columnPL_NAE_ENTERTAINMENT = MyBase.Columns("PL_NAE_ENTERTAINMENT")
            Me.columnPL_NAE_GIFT = MyBase.Columns("PL_NAE_GIFT")
            Me.columnPL_NAE_DONATION = MyBase.Columns("PL_NAE_DONATION")
            Me.columnPL_NAE_PENALTY = MyBase.Columns("PL_NAE_PENALTY")
            Me.columnPL_NAE_STOCKDRAWING = MyBase.Columns("PL_NAE_STOCKDRAWING")
            Me.columnPL_NAE_CASHDRAWING = MyBase.Columns("PL_NAE_CASHDRAWING")
            Me.columnPL_NAE_PROVISION = MyBase.Columns("PL_NAE_PROVISION")
            Me.columnPL_NAE_PRELIMINARY = MyBase.Columns("PL_NAE_PRELIMINARY")
            Me.columnPL_NAE_CAPITALEXP = MyBase.Columns("PL_NAE_CAPITALEXP")
            Me.columnPL_NAE_INTERESTEXP = MyBase.Columns("PL_NAE_INTERESTEXP")
            Me.columnPL_NAE_ASSETWOFF = MyBase.Columns("PL_NAE_ASSETWOFF")
            Me.columnPL_NAEP_MOTORVEH = MyBase.Columns("PL_NAEP_MOTORVEH")
            Me.columnPL_NAEP_RESIDENTIAL = MyBase.Columns("PL_NAEP_RESIDENTIAL")
            Me.columnPL_NAEP_TEL = MyBase.Columns("PL_NAEP_TEL")
            Me.columnPL_NAEP_SUBSCRIPTION = MyBase.Columns("PL_NAEP_SUBSCRIPTION")
            Me.columnPL_NAEP_SEMILAR = MyBase.Columns("PL_NAEP_SEMILAR")
            Me.columnPL_NAEP_MEDICALEXP = MyBase.Columns("PL_NAEP_MEDICALEXP")
            Me.columnPL_NAE_OTHEREXP = MyBase.Columns("PL_NAE_OTHEREXP")
            Me.columnPL_NAE_TOTALEXP = MyBase.Columns("PL_NAE_TOTALEXP")
            Me.columnPL_TOT_EXP = MyBase.Columns("PL_TOT_EXP")
            Me.columnPL_NET_PROFIT_LOSS = MyBase.Columns("PL_NET_PROFIT_LOSS")
            Me.columnPL_DISALLOWED_EXP = MyBase.Columns("PL_DISALLOWED_EXP")
            Me.columnPL_TOTALX = MyBase.Columns("PL_TOTALX")
            Me.columnPL_TOTALY = MyBase.Columns("PL_TOTALY")
            Me.columnPL_1 = MyBase.Columns("PL_1")
            Me.columnPL_2 = MyBase.Columns("PL_2")
            Me.columnPL_3 = MyBase.Columns("PL_3")
            Me.columnPL_4 = MyBase.Columns("PL_4")
            Me.columnPL_5 = MyBase.Columns("PL_5")
            Me.columnPL_COMPANY = MyBase.Columns("PL_COMPANY")
            Me.columnPL_MAINCOMPANY = MyBase.Columns("PL_MAINCOMPANY")
            Me.columnPL_REP_MAINT = MyBase.Columns("PL_REP_MAINT")
            Me.columnPL_PRO_ADV = MyBase.Columns("PL_PRO_ADV")
            Me.columnPL_JKDM = MyBase.Columns("PL_JKDM")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPL_KEY = New Global.System.Data.DataColumn("PL_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_KEY)
            Me.columnPL_REF_PREFIX = New Global.System.Data.DataColumn("PL_REF_PREFIX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_REF_PREFIX)
            Me.columnPL_REF_NO = New Global.System.Data.DataColumn("PL_REF_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_REF_NO)
            Me.columnPL_FILENO = New Global.System.Data.DataColumn("PL_FILENO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_FILENO)
            Me.columnPL_NAME = New Global.System.Data.DataColumn("PL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAME)
            Me.columnPL_YA = New Global.System.Data.DataColumn("PL_YA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_YA)
            Me.columnPL_MAIN_BUSINESS = New Global.System.Data.DataColumn("PL_MAIN_BUSINESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_MAIN_BUSINESS)
            Me.columnPL_SALES = New Global.System.Data.DataColumn("PL_SALES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_SALES)
            Me.columnPL_OP_STK = New Global.System.Data.DataColumn("PL_OP_STK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OP_STK)
            Me.columnPL_PURCHASES = New Global.System.Data.DataColumn("PL_PURCHASES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PURCHASES)
            Me.columnPL_PRO_COST = New Global.System.Data.DataColumn("PL_PRO_COST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PRO_COST)
            Me.columnPL_PRO_COST_DPC = New Global.System.Data.DataColumn("PL_PRO_COST_DPC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PRO_COST_DPC)
            Me.columnPL_PRO_COST_OAE = New Global.System.Data.DataColumn("PL_PRO_COST_OAE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PRO_COST_OAE)
            Me.columnPL_PRO_COST_ONAE = New Global.System.Data.DataColumn("PL_PRO_COST_ONAE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PRO_COST_ONAE)
            Me.columnPL_PURCHASES_PRO_COST = New Global.System.Data.DataColumn("PL_PURCHASES_PRO_COST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PURCHASES_PRO_COST)
            Me.columnPL_CLS_STK = New Global.System.Data.DataColumn("PL_CLS_STK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_CLS_STK)
            Me.columnPL_COGS = New Global.System.Data.DataColumn("PL_COGS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_COGS)
            Me.columnPL_GROSS_PROFIT = New Global.System.Data.DataColumn("PL_GROSS_PROFIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_GROSS_PROFIT)
            Me.columnPL_OTH_BSIN = New Global.System.Data.DataColumn("PL_OTH_BSIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OTH_BSIN)
            Me.columnPL_OTH_IN = New Global.System.Data.DataColumn("PL_OTH_IN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OTH_IN)
            Me.columnPL_OTH_IN_DIVIDEND = New Global.System.Data.DataColumn("PL_OTH_IN_DIVIDEND", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OTH_IN_DIVIDEND)
            Me.columnPL_OTH_IN_INTEREST = New Global.System.Data.DataColumn("PL_OTH_IN_INTEREST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OTH_IN_INTEREST)
            Me.columnPL_OTH_IN_RENTAL_ROYALTY = New Global.System.Data.DataColumn("PL_OTH_IN_RENTAL_ROYALTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OTH_IN_RENTAL_ROYALTY)
            Me.columnPL_OTH_IN_OTHER = New Global.System.Data.DataColumn("PL_OTH_IN_OTHER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_OTH_IN_OTHER)
            Me.columnPL_NT_INCOME = New Global.System.Data.DataColumn("PL_NT_INCOME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NT_INCOME)
            Me.columnPL_NT_GAIN_DISPOSAL = New Global.System.Data.DataColumn("PL_NT_GAIN_DISPOSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NT_GAIN_DISPOSAL)
            Me.columnPL_NT_GAIN_FOREXCHANGE = New Global.System.Data.DataColumn("PL_NT_GAIN_FOREXCHANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NT_GAIN_FOREXCHANGE)
            Me.columnPL_NT_GAIN_INVEST = New Global.System.Data.DataColumn("PL_NT_GAIN_INVEST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NT_GAIN_INVEST)
            Me.columnPL_NT_OTHERS = New Global.System.Data.DataColumn("PL_NT_OTHERS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NT_OTHERS)
            Me.columnPL_EXP_LOANINTEREST = New Global.System.Data.DataColumn("PL_EXP_LOANINTEREST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_EXP_LOANINTEREST)
            Me.columnPL_EXP_SALARY = New Global.System.Data.DataColumn("PL_EXP_SALARY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_EXP_SALARY)
            Me.columnPL_EXP_RENTAL = New Global.System.Data.DataColumn("PL_EXP_RENTAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_EXP_RENTAL)
            Me.columnPL_EXP_CONTRACT = New Global.System.Data.DataColumn("PL_EXP_CONTRACT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_EXP_CONTRACT)
            Me.columnPL_EXP_COMMISSION = New Global.System.Data.DataColumn("PL_EXP_COMMISSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_EXP_COMMISSION)
            Me.columnPL_BAD_DEBTS = New Global.System.Data.DataColumn("PL_BAD_DEBTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_BAD_DEBTS)
            Me.columnPL_TRAVEL = New Global.System.Data.DataColumn("PL_TRAVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_TRAVEL)
            Me.columnPL_NAE_EPF_PER = New Global.System.Data.DataColumn("PL_NAE_EPF_PER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_EPF_PER)
            Me.columnPL_NAE_EPF_STAFF = New Global.System.Data.DataColumn("PL_NAE_EPF_STAFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_EPF_STAFF)
            Me.columnPL_NAE_LEGALFEE = New Global.System.Data.DataColumn("PL_NAE_LEGALFEE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_LEGALFEE)
            Me.columnPL_NON_ALLOW_LOSS = New Global.System.Data.DataColumn("PL_NON_ALLOW_LOSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NON_ALLOW_LOSS)
            Me.columnPL_NAL_LOSS_DISPOSAL = New Global.System.Data.DataColumn("PL_NAL_LOSS_DISPOSAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAL_LOSS_DISPOSAL)
            Me.columnPL_NAL_LOSS_FOREXCHANGE = New Global.System.Data.DataColumn("PL_NAL_LOSS_FOREXCHANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAL_LOSS_FOREXCHANGE)
            Me.columnPL_NAL_LOSS_INVEST = New Global.System.Data.DataColumn("PL_NAL_LOSS_INVEST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAL_LOSS_INVEST)
            Me.columnPL_NAL_OTHERS = New Global.System.Data.DataColumn("PL_NAL_OTHERS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAL_OTHERS)
            Me.columnPL_NAE_DEPERECIATION = New Global.System.Data.DataColumn("PL_NAE_DEPERECIATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_DEPERECIATION)
            Me.columnPL_NAE_ENTERTAINMENT = New Global.System.Data.DataColumn("PL_NAE_ENTERTAINMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_ENTERTAINMENT)
            Me.columnPL_NAE_GIFT = New Global.System.Data.DataColumn("PL_NAE_GIFT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_GIFT)
            Me.columnPL_NAE_DONATION = New Global.System.Data.DataColumn("PL_NAE_DONATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_DONATION)
            Me.columnPL_NAE_PENALTY = New Global.System.Data.DataColumn("PL_NAE_PENALTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_PENALTY)
            Me.columnPL_NAE_STOCKDRAWING = New Global.System.Data.DataColumn("PL_NAE_STOCKDRAWING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_STOCKDRAWING)
            Me.columnPL_NAE_CASHDRAWING = New Global.System.Data.DataColumn("PL_NAE_CASHDRAWING", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_CASHDRAWING)
            Me.columnPL_NAE_PROVISION = New Global.System.Data.DataColumn("PL_NAE_PROVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_PROVISION)
            Me.columnPL_NAE_PRELIMINARY = New Global.System.Data.DataColumn("PL_NAE_PRELIMINARY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_PRELIMINARY)
            Me.columnPL_NAE_CAPITALEXP = New Global.System.Data.DataColumn("PL_NAE_CAPITALEXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_CAPITALEXP)
            Me.columnPL_NAE_INTERESTEXP = New Global.System.Data.DataColumn("PL_NAE_INTERESTEXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_INTERESTEXP)
            Me.columnPL_NAE_ASSETWOFF = New Global.System.Data.DataColumn("PL_NAE_ASSETWOFF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_ASSETWOFF)
            Me.columnPL_NAEP_MOTORVEH = New Global.System.Data.DataColumn("PL_NAEP_MOTORVEH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAEP_MOTORVEH)
            Me.columnPL_NAEP_RESIDENTIAL = New Global.System.Data.DataColumn("PL_NAEP_RESIDENTIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAEP_RESIDENTIAL)
            Me.columnPL_NAEP_TEL = New Global.System.Data.DataColumn("PL_NAEP_TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAEP_TEL)
            Me.columnPL_NAEP_SUBSCRIPTION = New Global.System.Data.DataColumn("PL_NAEP_SUBSCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAEP_SUBSCRIPTION)
            Me.columnPL_NAEP_SEMILAR = New Global.System.Data.DataColumn("PL_NAEP_SEMILAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAEP_SEMILAR)
            Me.columnPL_NAEP_MEDICALEXP = New Global.System.Data.DataColumn("PL_NAEP_MEDICALEXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAEP_MEDICALEXP)
            Me.columnPL_NAE_OTHEREXP = New Global.System.Data.DataColumn("PL_NAE_OTHEREXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_OTHEREXP)
            Me.columnPL_NAE_TOTALEXP = New Global.System.Data.DataColumn("PL_NAE_TOTALEXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NAE_TOTALEXP)
            Me.columnPL_TOT_EXP = New Global.System.Data.DataColumn("PL_TOT_EXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_TOT_EXP)
            Me.columnPL_NET_PROFIT_LOSS = New Global.System.Data.DataColumn("PL_NET_PROFIT_LOSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_NET_PROFIT_LOSS)
            Me.columnPL_DISALLOWED_EXP = New Global.System.Data.DataColumn("PL_DISALLOWED_EXP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_DISALLOWED_EXP)
            Me.columnPL_TOTALX = New Global.System.Data.DataColumn("PL_TOTALX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_TOTALX)
            Me.columnPL_TOTALY = New Global.System.Data.DataColumn("PL_TOTALY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_TOTALY)
            Me.columnPL_1 = New Global.System.Data.DataColumn("PL_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_1)
            Me.columnPL_2 = New Global.System.Data.DataColumn("PL_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_2)
            Me.columnPL_3 = New Global.System.Data.DataColumn("PL_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_3)
            Me.columnPL_4 = New Global.System.Data.DataColumn("PL_4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_4)
            Me.columnPL_5 = New Global.System.Data.DataColumn("PL_5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_5)
            Me.columnPL_COMPANY = New Global.System.Data.DataColumn("PL_COMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_COMPANY)
            Me.columnPL_MAINCOMPANY = New Global.System.Data.DataColumn("PL_MAINCOMPANY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_MAINCOMPANY)
            Me.columnPL_REP_MAINT = New Global.System.Data.DataColumn("PL_REP_MAINT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_REP_MAINT)
            Me.columnPL_PRO_ADV = New Global.System.Data.DataColumn("PL_PRO_ADV", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_PRO_ADV)
            Me.columnPL_JKDM = New Global.System.Data.DataColumn("PL_JKDM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPL_JKDM)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPL_KEY}, true))
            Me.columnPL_KEY.AllowDBNull = false
            Me.columnPL_KEY.Unique = true
            Me.columnPL_REF_PREFIX.MaxLength = 3
            Me.columnPL_REF_NO.MaxLength = 20
            Me.columnPL_FILENO.MaxLength = 20
            Me.columnPL_NAME.MaxLength = 255
            Me.columnPL_YA.MaxLength = 5
            Me.columnPL_MAIN_BUSINESS.MaxLength = 12
            Me.columnPL_SALES.MaxLength = 25
            Me.columnPL_OP_STK.MaxLength = 25
            Me.columnPL_PURCHASES.MaxLength = 25
            Me.columnPL_PRO_COST.MaxLength = 25
            Me.columnPL_PRO_COST_DPC.MaxLength = 25
            Me.columnPL_PRO_COST_OAE.MaxLength = 25
            Me.columnPL_PRO_COST_ONAE.MaxLength = 25
            Me.columnPL_PURCHASES_PRO_COST.MaxLength = 25
            Me.columnPL_CLS_STK.MaxLength = 25
            Me.columnPL_COGS.MaxLength = 25
            Me.columnPL_GROSS_PROFIT.MaxLength = 25
            Me.columnPL_OTH_BSIN.MaxLength = 25
            Me.columnPL_OTH_IN.MaxLength = 25
            Me.columnPL_OTH_IN_DIVIDEND.MaxLength = 25
            Me.columnPL_OTH_IN_INTEREST.MaxLength = 25
            Me.columnPL_OTH_IN_RENTAL_ROYALTY.MaxLength = 25
            Me.columnPL_OTH_IN_OTHER.MaxLength = 25
            Me.columnPL_NT_INCOME.MaxLength = 25
            Me.columnPL_NT_GAIN_DISPOSAL.MaxLength = 25
            Me.columnPL_NT_GAIN_FOREXCHANGE.MaxLength = 25
            Me.columnPL_NT_GAIN_INVEST.MaxLength = 25
            Me.columnPL_NT_OTHERS.MaxLength = 25
            Me.columnPL_EXP_LOANINTEREST.MaxLength = 25
            Me.columnPL_EXP_SALARY.MaxLength = 25
            Me.columnPL_EXP_RENTAL.MaxLength = 25
            Me.columnPL_EXP_CONTRACT.MaxLength = 25
            Me.columnPL_EXP_COMMISSION.MaxLength = 25
            Me.columnPL_BAD_DEBTS.MaxLength = 25
            Me.columnPL_TRAVEL.MaxLength = 25
            Me.columnPL_NAE_EPF_PER.MaxLength = 25
            Me.columnPL_NAE_EPF_STAFF.MaxLength = 25
            Me.columnPL_NAE_LEGALFEE.MaxLength = 25
            Me.columnPL_NON_ALLOW_LOSS.MaxLength = 25
            Me.columnPL_NAL_LOSS_DISPOSAL.MaxLength = 25
            Me.columnPL_NAL_LOSS_FOREXCHANGE.MaxLength = 25
            Me.columnPL_NAL_LOSS_INVEST.MaxLength = 25
            Me.columnPL_NAL_OTHERS.MaxLength = 25
            Me.columnPL_NAE_DEPERECIATION.MaxLength = 25
            Me.columnPL_NAE_ENTERTAINMENT.MaxLength = 25
            Me.columnPL_NAE_GIFT.MaxLength = 25
            Me.columnPL_NAE_DONATION.MaxLength = 25
            Me.columnPL_NAE_PENALTY.MaxLength = 25
            Me.columnPL_NAE_STOCKDRAWING.MaxLength = 25
            Me.columnPL_NAE_CASHDRAWING.MaxLength = 25
            Me.columnPL_NAE_PROVISION.MaxLength = 25
            Me.columnPL_NAE_PRELIMINARY.MaxLength = 25
            Me.columnPL_NAE_CAPITALEXP.MaxLength = 25
            Me.columnPL_NAE_INTERESTEXP.MaxLength = 25
            Me.columnPL_NAE_ASSETWOFF.MaxLength = 25
            Me.columnPL_NAEP_MOTORVEH.MaxLength = 25
            Me.columnPL_NAEP_RESIDENTIAL.MaxLength = 25
            Me.columnPL_NAEP_TEL.MaxLength = 25
            Me.columnPL_NAEP_SUBSCRIPTION.MaxLength = 25
            Me.columnPL_NAEP_SEMILAR.MaxLength = 25
            Me.columnPL_NAEP_MEDICALEXP.MaxLength = 25
            Me.columnPL_NAE_OTHEREXP.MaxLength = 25
            Me.columnPL_NAE_TOTALEXP.MaxLength = 25
            Me.columnPL_TOT_EXP.MaxLength = 25
            Me.columnPL_NET_PROFIT_LOSS.MaxLength = 25
            Me.columnPL_DISALLOWED_EXP.MaxLength = 25
            Me.columnPL_TOTALX.MaxLength = 25
            Me.columnPL_TOTALY.MaxLength = 25
            Me.columnPL_1.MaxLength = 50
            Me.columnPL_2.MaxLength = 50
            Me.columnPL_3.MaxLength = 50
            Me.columnPL_4.MaxLength = 50
            Me.columnPL_5.MaxLength = 50
            Me.columnPL_COMPANY.MaxLength = 8
            Me.columnPL_MAINCOMPANY.MaxLength = 1
            Me.columnPL_REP_MAINT.MaxLength = 25
            Me.columnPL_PRO_ADV.MaxLength = 25
            Me.columnPL_JKDM.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPROFIT_LOSS_ACCOUNTRow() As PROFIT_LOSS_ACCOUNTRow
            Return CType(Me.NewRow,PROFIT_LOSS_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROFIT_LOSS_ACCOUNTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROFIT_LOSS_ACCOUNTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROFIT_LOSS_ACCOUNTRowChangedEvent) Is Nothing) Then
                RaiseEvent PROFIT_LOSS_ACCOUNTRowChanged(Me, New PROFIT_LOSS_ACCOUNTRowChangeEvent(CType(e.Row,PROFIT_LOSS_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROFIT_LOSS_ACCOUNTRowChangingEvent) Is Nothing) Then
                RaiseEvent PROFIT_LOSS_ACCOUNTRowChanging(Me, New PROFIT_LOSS_ACCOUNTRowChangeEvent(CType(e.Row,PROFIT_LOSS_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROFIT_LOSS_ACCOUNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROFIT_LOSS_ACCOUNTRowDeleted(Me, New PROFIT_LOSS_ACCOUNTRowChangeEvent(CType(e.Row,PROFIT_LOSS_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROFIT_LOSS_ACCOUNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROFIT_LOSS_ACCOUNTRowDeleting(Me, New PROFIT_LOSS_ACCOUNTRowChangeEvent(CType(e.Row,PROFIT_LOSS_ACCOUNTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePROFIT_LOSS_ACCOUNTRow(ByVal row As PROFIT_LOSS_ACCOUNTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROFIT_LOSS_ACCOUNTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AiDataTable
        Inherits Global.System.Data.TypedTableBase(Of AiRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFrom As Global.System.Data.DataColumn
        
        Private columnCommunication As Global.System.Data.DataColumn
        
        Private columnJobType As Global.System.Data.DataColumn
        
        Private columnKeyName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ai"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommunicationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommunication
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JobTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KeyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AiRow
            Get
                Return CType(Me.Rows(index),AiRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AiRowChanging As AiRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AiRowChanged As AiRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AiRowDeleting As AiRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AiRowDeleted As AiRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAiRow(ByVal row As AiRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAiRow(ByVal From As String, ByVal Communication As String, ByVal JobType As String, ByVal KeyName As String) As AiRow
            Dim rowAiRow As AiRow = CType(Me.NewRow,AiRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, From, Communication, JobType, KeyName}
            rowAiRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAiRow)
            Return rowAiRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Long) As AiRow
            Return CType(Me.Rows.Find(New Object() {ID}),AiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AiDataTable = CType(MyBase.Clone,AiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AiDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFrom = MyBase.Columns("From")
            Me.columnCommunication = MyBase.Columns("Communication")
            Me.columnJobType = MyBase.Columns("JobType")
            Me.columnKeyName = MyBase.Columns("KeyName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFrom = New Global.System.Data.DataColumn("From", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrom)
            Me.columnCommunication = New Global.System.Data.DataColumn("Communication", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommunication)
            Me.columnJobType = New Global.System.Data.DataColumn("JobType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobType)
            Me.columnKeyName = New Global.System.Data.DataColumn("KeyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAiRow() As AiRow
            Return CType(Me.NewRow,AiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AiRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AiRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AiRowChangedEvent) Is Nothing) Then
                RaiseEvent AiRowChanged(Me, New AiRowChangeEvent(CType(e.Row,AiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AiRowChangingEvent) Is Nothing) Then
                RaiseEvent AiRowChanging(Me, New AiRowChangeEvent(CType(e.Row,AiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AiRowDeletedEvent) Is Nothing) Then
                RaiseEvent AiRowDeleted(Me, New AiRowChangeEvent(CType(e.Row,AiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AiRowDeletingEvent) Is Nothing) Then
                RaiseEvent AiRowDeleting(Me, New AiRowChangeEvent(CType(e.Row,AiRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAiRow(ByVal row As AiRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AiDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Ai_ResultDataTable
        Inherits Global.System.Data.TypedTableBase(Of Ai_ResultRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnQ1 As Global.System.Data.DataColumn
        
        Private columnQ2 As Global.System.Data.DataColumn
        
        Private columnQ3 As Global.System.Data.DataColumn
        
        Private columnParentID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ai_Result"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Q1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQ1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Q2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQ2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Q3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQ3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ParentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Ai_ResultRow
            Get
                Return CType(Me.Rows(index),Ai_ResultRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Ai_ResultRowChanging As Ai_ResultRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Ai_ResultRowChanged As Ai_ResultRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Ai_ResultRowDeleting As Ai_ResultRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Ai_ResultRowDeleted As Ai_ResultRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAi_ResultRow(ByVal row As Ai_ResultRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAi_ResultRow(ByVal Description As String, ByVal Q1 As String, ByVal Q2 As String, ByVal Q3 As String, ByVal parentAiRowByFK_Ai_Ai_Result As AiRow) As Ai_ResultRow
            Dim rowAi_ResultRow As Ai_ResultRow = CType(Me.NewRow,Ai_ResultRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Description, Q1, Q2, Q3, Nothing}
            If (Not (parentAiRowByFK_Ai_Ai_Result) Is Nothing) Then
                columnValuesArray(5) = parentAiRowByFK_Ai_Ai_Result(0)
            End If
            rowAi_ResultRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAi_ResultRow)
            Return rowAi_ResultRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Ai_ResultDataTable = CType(MyBase.Clone,Ai_ResultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Ai_ResultDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnQ1 = MyBase.Columns("Q1")
            Me.columnQ2 = MyBase.Columns("Q2")
            Me.columnQ3 = MyBase.Columns("Q3")
            Me.columnParentID = MyBase.Columns("ParentID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnQ1 = New Global.System.Data.DataColumn("Q1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQ1)
            Me.columnQ2 = New Global.System.Data.DataColumn("Q2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQ2)
            Me.columnQ3 = New Global.System.Data.DataColumn("Q3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQ3)
            Me.columnParentID = New Global.System.Data.DataColumn("ParentID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentID)
            Me.columnID.AutoIncrement = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAi_ResultRow() As Ai_ResultRow
            Return CType(Me.NewRow,Ai_ResultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Ai_ResultRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Ai_ResultRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Ai_ResultRowChangedEvent) Is Nothing) Then
                RaiseEvent Ai_ResultRowChanged(Me, New Ai_ResultRowChangeEvent(CType(e.Row,Ai_ResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Ai_ResultRowChangingEvent) Is Nothing) Then
                RaiseEvent Ai_ResultRowChanging(Me, New Ai_ResultRowChangeEvent(CType(e.Row,Ai_ResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Ai_ResultRowDeletedEvent) Is Nothing) Then
                RaiseEvent Ai_ResultRowDeleted(Me, New Ai_ResultRowChangeEvent(CType(e.Row,Ai_ResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Ai_ResultRowDeletingEvent) Is Nothing) Then
                RaiseEvent Ai_ResultRowDeleting(Me, New Ai_ResultRowChangeEvent(CType(e.Row,Ai_ResultRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAi_ResultRow(ByVal row As Ai_ResultRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Ai_ResultDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INCOME_ADJ_NON_TAXABLE_INCOMEDataTable
        Inherits Global.System.Data.TypedTableBase(Of INCOME_ADJ_NON_TAXABLE_INCOMERow)
        
        Private columnNT_KEY As Global.System.Data.DataColumn
        
        Private columnNT_PREFIT As Global.System.Data.DataColumn
        
        Private columnNT_REF_NO As Global.System.Data.DataColumn
        
        Private columnNT_YA As Global.System.Data.DataColumn
        
        Private columnNT_DESC As Global.System.Data.DataColumn
        
        Private columnNT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnNT_CATEGORIZED As Global.System.Data.DataColumn
        
        Private columnNT_SOURCE As Global.System.Data.DataColumn
        
        Private columnNT_1 As Global.System.Data.DataColumn
        
        Private columnNT_2 As Global.System.Data.DataColumn
        
        Private columnNT_3 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INCOME_ADJ_NON_TAXABLE_INCOME"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_KEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_KEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_PREFITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_PREFIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_REF_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_REF_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_YAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_YA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_CATEGORIZEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_CATEGORIZED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_SOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_SOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NT_3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNT_3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INCOME_ADJ_NON_TAXABLE_INCOMERow
            Get
                Return CType(Me.Rows(index),INCOME_ADJ_NON_TAXABLE_INCOMERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_ADJ_NON_TAXABLE_INCOMERowChanging As INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_ADJ_NON_TAXABLE_INCOMERowChanged As INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_ADJ_NON_TAXABLE_INCOMERowDeleting As INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event INCOME_ADJ_NON_TAXABLE_INCOMERowDeleted As INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddINCOME_ADJ_NON_TAXABLE_INCOMERow(ByVal row As INCOME_ADJ_NON_TAXABLE_INCOMERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddINCOME_ADJ_NON_TAXABLE_INCOMERow(ByVal NT_KEY As Integer, ByVal NT_PREFIT As String, ByVal NT_REF_NO As String, ByVal NT_YA As String, ByVal NT_DESC As String, ByVal NT_AMOUNT As Decimal, ByVal NT_CATEGORIZED As String, ByVal NT_SOURCE As String, ByVal NT_1 As String, ByVal NT_2 As String, ByVal NT_3 As String) As INCOME_ADJ_NON_TAXABLE_INCOMERow
            Dim rowINCOME_ADJ_NON_TAXABLE_INCOMERow As INCOME_ADJ_NON_TAXABLE_INCOMERow = CType(Me.NewRow, INCOME_ADJ_NON_TAXABLE_INCOMERow)
            Dim columnValuesArray() As Object = New Object() {NT_KEY, NT_PREFIT, NT_REF_NO, NT_YA, NT_DESC, NT_AMOUNT, NT_CATEGORIZED, NT_SOURCE, NT_1, NT_2, NT_3}
            rowINCOME_ADJ_NON_TAXABLE_INCOMERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINCOME_ADJ_NON_TAXABLE_INCOMERow)
            Return rowINCOME_ADJ_NON_TAXABLE_INCOMERow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByNT_KEY(ByVal NT_KEY As Integer) As INCOME_ADJ_NON_TAXABLE_INCOMERow
            Return CType(Me.Rows.Find(New Object() {NT_KEY}), INCOME_ADJ_NON_TAXABLE_INCOMERow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INCOME_ADJ_NON_TAXABLE_INCOMEDataTable = CType(MyBase.Clone, INCOME_ADJ_NON_TAXABLE_INCOMEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INCOME_ADJ_NON_TAXABLE_INCOMEDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnNT_KEY = MyBase.Columns("NT_KEY")
            Me.columnNT_PREFIT = MyBase.Columns("NT_PREFIT")
            Me.columnNT_REF_NO = MyBase.Columns("NT_REF_NO")
            Me.columnNT_YA = MyBase.Columns("NT_YA")
            Me.columnNT_DESC = MyBase.Columns("NT_DESC")
            Me.columnNT_AMOUNT = MyBase.Columns("NT_AMOUNT")
            Me.columnNT_CATEGORIZED = MyBase.Columns("NT_CATEGORIZED")
            Me.columnNT_SOURCE = MyBase.Columns("NT_SOURCE")
            Me.columnNT_1 = MyBase.Columns("NT_1")
            Me.columnNT_2 = MyBase.Columns("NT_2")
            Me.columnNT_3 = MyBase.Columns("NT_3")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnNT_KEY = New Global.System.Data.DataColumn("NT_KEY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_KEY)
            Me.columnNT_PREFIT = New Global.System.Data.DataColumn("NT_PREFIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_PREFIT)
            Me.columnNT_REF_NO = New Global.System.Data.DataColumn("NT_REF_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_REF_NO)
            Me.columnNT_YA = New Global.System.Data.DataColumn("NT_YA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_YA)
            Me.columnNT_DESC = New Global.System.Data.DataColumn("NT_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_DESC)
            Me.columnNT_AMOUNT = New Global.System.Data.DataColumn("NT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_AMOUNT)
            Me.columnNT_CATEGORIZED = New Global.System.Data.DataColumn("NT_CATEGORIZED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_CATEGORIZED)
            Me.columnNT_SOURCE = New Global.System.Data.DataColumn("NT_SOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_SOURCE)
            Me.columnNT_1 = New Global.System.Data.DataColumn("NT_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_1)
            Me.columnNT_2 = New Global.System.Data.DataColumn("NT_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_2)
            Me.columnNT_3 = New Global.System.Data.DataColumn("NT_3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNT_3)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNT_KEY}, True))
            Me.columnNT_KEY.AllowDBNull = False
            Me.columnNT_KEY.Unique = True
            Me.columnNT_PREFIT.MaxLength = 3
            Me.columnNT_REF_NO.MaxLength = 20
            Me.columnNT_YA.MaxLength = 5
            Me.columnNT_DESC.MaxLength = 255
            Me.columnNT_CATEGORIZED.MaxLength = 10
            Me.columnNT_SOURCE.MaxLength = 12
            Me.columnNT_1.MaxLength = 50
            Me.columnNT_2.MaxLength = 50
            Me.columnNT_3.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewINCOME_ADJ_NON_TAXABLE_INCOMERow() As INCOME_ADJ_NON_TAXABLE_INCOMERow
            Return CType(Me.NewRow,INCOME_ADJ_NON_TAXABLE_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INCOME_ADJ_NON_TAXABLE_INCOMERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INCOME_ADJ_NON_TAXABLE_INCOMERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INCOME_ADJ_NON_TAXABLE_INCOMERowChangedEvent) Is Nothing) Then
                RaiseEvent INCOME_ADJ_NON_TAXABLE_INCOMERowChanged(Me, New INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEvent(CType(e.Row,INCOME_ADJ_NON_TAXABLE_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INCOME_ADJ_NON_TAXABLE_INCOMERowChangingEvent) Is Nothing) Then
                RaiseEvent INCOME_ADJ_NON_TAXABLE_INCOMERowChanging(Me, New INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEvent(CType(e.Row,INCOME_ADJ_NON_TAXABLE_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INCOME_ADJ_NON_TAXABLE_INCOMERowDeletedEvent) Is Nothing) Then
                RaiseEvent INCOME_ADJ_NON_TAXABLE_INCOMERowDeleted(Me, New INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEvent(CType(e.Row,INCOME_ADJ_NON_TAXABLE_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INCOME_ADJ_NON_TAXABLE_INCOMERowDeletingEvent) Is Nothing) Then
                RaiseEvent INCOME_ADJ_NON_TAXABLE_INCOMERowDeleting(Me, New INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEvent(CType(e.Row,INCOME_ADJ_NON_TAXABLE_INCOMERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveINCOME_ADJ_NON_TAXABLE_INCOMERow(ByVal row As INCOME_ADJ_NON_TAXABLE_INCOMERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dsPNL = New dsPNL()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INCOME_ADJ_NON_TAXABLE_INCOMEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_SALESRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_SALES As PL_SALESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_SALES = CType(Me.Table,PL_SALESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PLTYPE' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_KEY' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLFCSKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_SALES.PL_PLFCSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_SALES.PL_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_SOURCENO' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DESC' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_AMOUNT' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NOTE' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DETAIL' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_1' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES.PL_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_2' in table 'PL_SALES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES.PL_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PLTYPENull()
            Me(Me.tablePL_SALES.PL_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_KEYNull()
            Me(Me.tablePL_SALES.PL_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_SOURCENONull()
            Me(Me.tablePL_SALES.PL_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DESCNull()
            Me(Me.tablePL_SALES.PL_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_AMOUNTNull()
            Me(Me.tablePL_SALES.PL_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NOTENull()
            Me(Me.tablePL_SALES.PL_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DETAILNull()
            Me(Me.tablePL_SALES.PL_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_1Null()
            Me(Me.tablePL_SALES.PL_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_SALES.PL_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_2Null()
            Me(Me.tablePL_SALES.PL_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_SALES_DETAILRows() As PL_SALES_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_SALES_PL_SALES_DETAIL") Is Nothing) Then
                Return New PL_SALES_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_SALES_PL_SALES_DETAIL")),PL_SALES_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_SALES_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_SALES_DETAIL As PL_SALES_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_SALES_DETAIL = CType(Me.Table,PL_SALES_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLTYPE' in table 'PL_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_KEY' in table 'PL_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_PLFCSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_SOURCENO' in table 'PL_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSDKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_PLFCSDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_PLFCSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_DESC' in table 'PL_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_AMOUNT' in table 'PL_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_SALES_DETAIL.PLD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_NOTE' in table 'PL_SALES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_SALES_DETAIL.PLD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_SALESRow() As PL_SALESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_SALES_PL_SALES_DETAIL")),PL_SALESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_SALES_PL_SALES_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES_DETAIL.PLD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLTYPENull()
            Me(Me.tablePL_SALES_DETAIL.PLD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES_DETAIL.PLD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_KEYNull()
            Me(Me.tablePL_SALES_DETAIL.PLD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES_DETAIL.PLD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_SOURCENONull()
            Me(Me.tablePL_SALES_DETAIL.PLD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES_DETAIL.PLD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_DESCNull()
            Me(Me.tablePL_SALES_DETAIL.PLD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES_DETAIL.PLD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_AMOUNTNull()
            Me(Me.tablePL_SALES_DETAIL.PLD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_SALES_DETAIL.PLD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_NOTENull()
            Me(Me.tablePL_SALES_DETAIL.PLD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PNL_INFORow
        Inherits Global.System.Data.DataRow
        
        Private tablePNL_INFO As PNL_INFODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePNL_INFO = CType(Me.Table,PNL_INFODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tablePNL_INFO.IDColumn),Integer)
            End Get
            Set
                Me(Me.tablePNL_INFO.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KeyName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.KeyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyName' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.KeyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LabelID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.LabelIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabelID' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.LabelIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TableName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.TableNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableName' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.TableNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TableName_Details() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.TableName_DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TableName_Details' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.TableName_DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnName' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnKey() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnKeyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnKey' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnKey_Details() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnKey_DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnKey_Details' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnKey_DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnAmount() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnAmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnAmount' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnAmount_Details() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnAmount_DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnAmount_Details' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnAmount_DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OldKey() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.OldKeyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldKey' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.OldKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnOldKey() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnOldKeyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnOldKey' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnOldKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnOldKey_Details() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnOldKey_DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnOldKey_Details' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnOldKey_DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sequence() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.SequenceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sequence' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.SequenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnSource() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnSourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnSource' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnSourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ColumnSource_Details() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.ColumnSource_DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColumnSource_Details' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.ColumnSource_DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PrefixName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.PrefixNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrefixName' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.PrefixNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PrefixName_Details() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.PrefixName_DetailsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrefixName_Details' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.PrefixName_DetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePNL_INFO.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'PNL_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_INFO.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKeyNameNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.KeyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKeyNameNull()
            Me(Me.tablePNL_INFO.KeyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLabelIDNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.LabelIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLabelIDNull()
            Me(Me.tablePNL_INFO.LabelIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTableNameNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.TableNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTableNameNull()
            Me(Me.tablePNL_INFO.TableNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTableName_DetailsNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.TableName_DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTableName_DetailsNull()
            Me(Me.tablePNL_INFO.TableName_DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnNameNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnNameNull()
            Me(Me.tablePNL_INFO.ColumnNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnKeyNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnKeyNull()
            Me(Me.tablePNL_INFO.ColumnKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnKey_DetailsNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnKey_DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnKey_DetailsNull()
            Me(Me.tablePNL_INFO.ColumnKey_DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnAmountNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnAmountNull()
            Me(Me.tablePNL_INFO.ColumnAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnAmount_DetailsNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnAmount_DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnAmount_DetailsNull()
            Me(Me.tablePNL_INFO.ColumnAmount_DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOldKeyNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.OldKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOldKeyNull()
            Me(Me.tablePNL_INFO.OldKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnOldKeyNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnOldKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnOldKeyNull()
            Me(Me.tablePNL_INFO.ColumnOldKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnOldKey_DetailsNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnOldKey_DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnOldKey_DetailsNull()
            Me(Me.tablePNL_INFO.ColumnOldKey_DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tablePNL_INFO.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSequenceNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.SequenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSequenceNull()
            Me(Me.tablePNL_INFO.SequenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnSourceNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnSourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnSourceNull()
            Me(Me.tablePNL_INFO.ColumnSourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsColumnSource_DetailsNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.ColumnSource_DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetColumnSource_DetailsNull()
            Me(Me.tablePNL_INFO.ColumnSource_DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPrefixNameNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.PrefixNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPrefixNameNull()
            Me(Me.tablePNL_INFO.PrefixNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPrefixName_DetailsNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.PrefixName_DetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPrefixName_DetailsNull()
            Me(Me.tablePNL_INFO.PrefixName_DetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePNL_INFO.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAmountNull()
            Me(Me.tablePNL_INFO.AmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_OPENSTOCKRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_OPENSTOCK As PL_OPENSTOCKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_OPENSTOCK = CType(Me.Table,PL_OPENSTOCKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PLTYPE' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_KEY' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLFCSKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_OPENSTOCK.PL_PLFCSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_SOURCENO' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DESC' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_AMOUNT' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NOTE' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DETAIL' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_1' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK.PL_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_2' in table 'PL_OPENSTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK.PL_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PLTYPENull()
            Me(Me.tablePL_OPENSTOCK.PL_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_KEYNull()
            Me(Me.tablePL_OPENSTOCK.PL_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_SOURCENONull()
            Me(Me.tablePL_OPENSTOCK.PL_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DESCNull()
            Me(Me.tablePL_OPENSTOCK.PL_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_AMOUNTNull()
            Me(Me.tablePL_OPENSTOCK.PL_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NOTENull()
            Me(Me.tablePL_OPENSTOCK.PL_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DETAILNull()
            Me(Me.tablePL_OPENSTOCK.PL_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_1Null()
            Me(Me.tablePL_OPENSTOCK.PL_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK.PL_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_2Null()
            Me(Me.tablePL_OPENSTOCK.PL_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_OPENSTOCK_DETAILRows() As PL_OPENSTOCK_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL") Is Nothing) Then
                Return New PL_OPENSTOCK_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL")),PL_OPENSTOCK_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_OPENSTOCK_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_OPENSTOCK_DETAIL As PL_OPENSTOCK_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_OPENSTOCK_DETAIL = CType(Me.Table,PL_OPENSTOCK_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLTYPE' in table 'PL_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_KEY' in table 'PL_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLFCSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_SOURCENO' in table 'PL_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSDKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLFCSDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLFCSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_DESC' in table 'PL_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_AMOUNT' in table 'PL_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_NOTE' in table 'PL_OPENSTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OPENSTOCKRow() As PL_OPENSTOCKRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL")),PL_OPENSTOCKRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_OPENSTOCK_PL_OPENSTOCK_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLTYPENull()
            Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK_DETAIL.PLD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_KEYNull()
            Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK_DETAIL.PLD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_SOURCENONull()
            Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK_DETAIL.PLD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_DESCNull()
            Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK_DETAIL.PLD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_AMOUNTNull()
            Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_OPENSTOCK_DETAIL.PLD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_NOTENull()
            Me(Me.tablePL_OPENSTOCK_DETAIL.PLD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_PRODUCTION_COST_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_PRODUCTION_COST_DETAIL As PL_PRODUCTION_COST_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_PRODUCTION_COST_DETAIL = CType(Me.Table,PL_PRODUCTION_COST_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_PRODUCTION_COST_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_PRODUCTION_COST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_PRODUCTION_COST_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_PRODUCTION_COST_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_PRODUCTION_COST_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_PRODUCTION_COST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DEDUCTIBLE' in table 'PL_PRODUCTION_COST_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_PRODUCTION_COST_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_PRODUCTION_COST_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PRODUCTION_COSTRow() As PL_PRODUCTION_COSTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL")),PL_PRODUCTION_COSTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DEDUCTIBLENull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_PRODUCTION_COST_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_PRODUCTION_COSTRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_PRODUCTION_COST As PL_PRODUCTION_COSTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_PRODUCTION_COST = CType(Me.Table,PL_PRODUCTION_COSTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DEDUCTIBLE' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PRODUCTION_COST.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_PRODUCTION_COST' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PRODUCTION_COST.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DEDUCTIBLENull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_PRODUCTION_COST.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_PRODUCTION_COST.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_PRODUCTION_COST.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_PRODUCTION_COST.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_PRODUCTION_COST_DETAILRows() As PL_PRODUCTION_COST_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL") Is Nothing) Then
                Return New PL_PRODUCTION_COST_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_PRODUCTION_COST_PL_PRODUCTION_COST_DETAIL")),PL_PRODUCTION_COST_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PNL_SEARCHRow
        Inherits Global.System.Data.DataRow
        
        Private tablePNL_SEARCH As PNL_SEARCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePNL_SEARCH = CType(Me.Table,PNL_SEARCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePNL_SEARCH.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'PNL_SEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_SEARCH.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_SEARCH.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'PNL_SEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_SEARCH.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePNL_SEARCH.AmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Amount' in table 'PNL_SEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_SEARCH.AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OldKey() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePNL_SEARCH.OldKeyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldKey' in table 'PNL_SEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_SEARCH.OldKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tablePNL_SEARCH.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'PNL_SEARCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePNL_SEARCH.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tablePNL_SEARCH.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tablePNL_SEARCH.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePNL_SEARCH.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tablePNL_SEARCH.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tablePNL_SEARCH.AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAmountNull()
            Me(Me.tablePNL_SEARCH.AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOldKeyNull() As Boolean
            Return Me.IsNull(Me.tablePNL_SEARCH.OldKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOldKeyNull()
            Me(Me.tablePNL_SEARCH.OldKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tablePNL_SEARCH.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTitleNull()
            Me(Me.tablePNL_SEARCH.TitleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_CLOSESTOCKRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_CLOSESTOCK As PL_CLOSESTOCKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_CLOSESTOCK = CType(Me.Table,PL_CLOSESTOCKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PLTYPE' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_KEY' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLFCSKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_CLOSESTOCK.PL_PLFCSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_SOURCENO' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DESC' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_AMOUNT' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NOTE' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DETAIL' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_1' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK.PL_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_2' in table 'PL_CLOSESTOCK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK.PL_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PLTYPENull()
            Me(Me.tablePL_CLOSESTOCK.PL_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_KEYNull()
            Me(Me.tablePL_CLOSESTOCK.PL_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_SOURCENONull()
            Me(Me.tablePL_CLOSESTOCK.PL_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DESCNull()
            Me(Me.tablePL_CLOSESTOCK.PL_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_AMOUNTNull()
            Me(Me.tablePL_CLOSESTOCK.PL_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NOTENull()
            Me(Me.tablePL_CLOSESTOCK.PL_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DETAILNull()
            Me(Me.tablePL_CLOSESTOCK.PL_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_1Null()
            Me(Me.tablePL_CLOSESTOCK.PL_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK.PL_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_2Null()
            Me(Me.tablePL_CLOSESTOCK.PL_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_CLOSESTOCK_DETAILRows() As PL_CLOSESTOCK_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL") Is Nothing) Then
                Return New PL_CLOSESTOCK_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL")),PL_CLOSESTOCK_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_CLOSESTOCK_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_CLOSESTOCK_DETAIL As PL_CLOSESTOCK_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_CLOSESTOCK_DETAIL = CType(Me.Table,PL_CLOSESTOCK_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLTYPE' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_KEY' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLFCSKEY' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_SOURCENO' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSDKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSDKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_DESC' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_AMOUNT' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_NOTE' in table 'PL_CLOSESTOCK_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_CLOSESTOCKRow() As PL_CLOSESTOCKRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL")),PL_CLOSESTOCKRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_CLOSESTOCK_PL_CLOSESTOCK_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLTYPENull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_KEYNull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLFCSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLFCSKEYNull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_PLFCSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_SOURCENONull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_DESCNull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_AMOUNTNull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_CLOSESTOCK_DETAIL.PLD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_NOTENull()
            Me(Me.tablePL_CLOSESTOCK_DETAIL.PLD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_INCOME_OTHERBUSINESSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_INCOME_OTHERBUSINESS As PL_INCOME_OTHERBUSINESSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_INCOME_OTHERBUSINESS = CType(Me.Table,PL_INCOME_OTHERBUSINESSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_INCOME_OTHERBUSINESS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_TAXABLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_TAXABLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_TAXABLE' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_TAXABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_INCOME_OTHERBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_TAXABLENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_TAXABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_TAXABLENull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_TAXABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_INCOME_OTHERBUSINESS.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_INCOME_OTHERBUSINESS_DETAILRows() As PL_INCOME_OTHERBUSINESS_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL") Is Nothing) Then
                Return New PL_INCOME_OTHERBUSINESS_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL")),PL_INCOME_OTHERBUSINESS_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_INCOME_OTHERBUSINESS_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_INCOME_OTHERBUSINESS_DETAIL As PL_INCOME_OTHERBUSINESS_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_INCOME_OTHERBUSINESS_DETAIL = CType(Me.Table,PL_INCOME_OTHERBUSINESS_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_TAXABLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_TAXABLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_TAXABLE' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_TAXABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_INCOME_OTHERBUSINESS_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_INCOME_OTHERBUSINESSRow() As PL_INCOME_OTHERBUSINESSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL")),PL_INCOME_OTHERBUSINESSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_INCOME_OTHERBUSINESS_PL_INCOME_OTHERBUSINESS_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_TAXABLENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_TAXABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_TAXABLENull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_TAXABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_INCOME_OTHERBUSINESS_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_INCOME_NONBUSINESSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_INCOME_NONBUSINESS As PL_INCOME_NONBUSINESSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_INCOME_NONBUSINESS = CType(Me.Table,PL_INCOME_NONBUSINESSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_TAXABLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_TAXABLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_TAXABLE' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_TAXABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_INCOME_NONBUSINESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_TAXABLENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_TAXABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_TAXABLENull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_TAXABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_INCOME_NONBUSINESS.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_INCOME_NONBUSINESS_DETAILRows() As PL_INCOME_NONBUSINESS_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL") Is Nothing) Then
                Return New PL_INCOME_NONBUSINESS_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL")),PL_INCOME_NONBUSINESS_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_INCOME_NONBUSINESS_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_INCOME_NONBUSINESS_DETAIL As PL_INCOME_NONBUSINESS_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_INCOME_NONBUSINESS_DETAIL = CType(Me.Table,PL_INCOME_NONBUSINESS_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_INCOME_NONBUSINESS_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_TAXABLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_TAXABLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_TAXABLE' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_TAXABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_INCOME_NONBUSINESS_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_INCOME_NONBUSINESSRow() As PL_INCOME_NONBUSINESSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL")),PL_INCOME_NONBUSINESSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_INCOME_NONBUSINESS_PL_INCOME_NONBUSINESS_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_TAXABLENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_TAXABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_TAXABLENull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_TAXABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_INCOME_NONBUSINESS_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_INCOME_NONTAXABLERow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_INCOME_NONTAXABLE As PL_INCOME_NONTAXABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_INCOME_NONTAXABLE = CType(Me.Table,PL_INCOME_NONTAXABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_TAXABLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_TAXABLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_TAXABLE' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_TAXABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_INCOME_NONTAXABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_TAXABLENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_TAXABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_TAXABLENull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_TAXABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_INCOME_NONTAXABLE.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_INCOME_NONTAXABLE_DETAILRows() As PL_INCOME_NONTAXABLE_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL") Is Nothing) Then
                Return New PL_INCOME_NONTAXABLE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL")),PL_INCOME_NONTAXABLE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_INCOME_NONTAXABLE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_INCOME_NONTAXABLE_DETAIL As PL_INCOME_NONTAXABLE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_INCOME_NONTAXABLE_DETAIL = CType(Me.Table,PL_INCOME_NONTAXABLE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_TAXABLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_TAXABLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_TAXABLE' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_TAXABLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_INCOME_NONTAXABLE_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_INCOME_NONTAXABLERow() As PL_INCOME_NONTAXABLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL")),PL_INCOME_NONTAXABLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_INCOME_NONTAXABLE_PL_INCOME_NONTAXABLE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_TAXABLENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_TAXABLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_TAXABLENull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_TAXABLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_INCOME_NONTAXABLE_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXPENSESRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXPENSES As PL_EXPENSESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXPENSES = CType(Me.Table,PL_EXPENSESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_EXPENSES.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DEDUCTIBLE' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_EXPENSES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_EXPENSES.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_EXPENSES.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_EXPENSES.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_EXPENSES.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_EXPENSES.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DEDUCTIBLENull()
            Me(Me.tablePL_EXPENSES.EXA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_EXPENSES.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_EXPENSES.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_EXPENSES.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_EXPENSES.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_EXPENSES_DETAILRows() As PL_EXPENSES_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_EXPENSES_PL_EXPENSES_DETAIL") Is Nothing) Then
                Return New PL_EXPENSES_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_EXPENSES_PL_EXPENSES_DETAIL")),PL_EXPENSES_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXPENSES_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXPENSES_DETAIL As PL_EXPENSES_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXPENSES_DETAIL = CType(Me.Table,PL_EXPENSES_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DEDUCTIBLE' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXPENSES_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_EXPENSES_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXPENSES_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXPENSESRow() As PL_EXPENSESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_EXPENSES_PL_EXPENSES_DETAIL")),PL_EXPENSESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_EXPENSES_PL_EXPENSES_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DEDUCTIBLENull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXPENSES_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_EXPENSES_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXP_NONALLOWLOSSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXP_NONALLOWLOSS As PL_EXP_NONALLOWLOSSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXP_NONALLOWLOSS = CType(Me.Table,PL_EXP_NONALLOWLOSSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DEDUCTIBLE' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_EXP_NONALLOWLOSS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DEDUCTIBLENull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_EXP_NONALLOWLOSS.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_EXP_NONALLOWLOSS_DETAILRows() As PL_EXP_NONALLOWLOSS_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL") Is Nothing) Then
                Return New PL_EXP_NONALLOWLOSS_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL")),PL_EXP_NONALLOWLOSS_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXP_NONALLOWLOSS_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXP_NONALLOWLOSS_DETAIL As PL_EXP_NONALLOWLOSS_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXP_NONALLOWLOSS_DETAIL = CType(Me.Table,PL_EXP_NONALLOWLOSS_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DEDUCTIBLE' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_EXP_NONALLOWLOSS_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_NONALLOWLOSSRow() As PL_EXP_NONALLOWLOSSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL")),PL_EXP_NONALLOWLOSSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_EXP_NONALLOWLOSS_PL_EXP_NONALLOWLOSS_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DEDUCTIBLENull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_EXP_NONALLOWLOSS_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXP_NONALLOWEXPENDRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXP_NONALLOWEXPEND As PL_EXP_NONALLOWEXPENDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXP_NONALLOWEXPEND = CType(Me.Table,PL_EXP_NONALLOWEXPENDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DEDUCTIBLE' in table 'PL_EXP_NONALLOWEXPEND' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_EXP_NONALLOWEXPEND' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DEDUCTIBLENull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_EXP_NONALLOWEXPEND.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_EXP_NONALLOWEXPEND_DETAILRows() As PL_EXP_NONALLOWEXPEND_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL") Is Nothing) Then
                Return New PL_EXP_NONALLOWEXPEND_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL")),PL_EXP_NONALLOWEXPEND_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXP_NONALLOWEXPEND_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXP_NONALLOWEXPEND_DETAIL As PL_EXP_NONALLOWEXPEND_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXP_NONALLOWEXPEND_DETAIL = CType(Me.Table,PL_EXP_NONALLOWEXPEND_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DEDUCTIBLE' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_EXP_NONALLOWEXPEND_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_NONALLOWEXPENDRow() As PL_EXP_NONALLOWEXPENDRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL")),PL_EXP_NONALLOWEXPENDRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_EXP_NONALLOWEXPEND_PL_EXP_NONALLOWEXPEND_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DEDUCTIBLENull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_EXP_NONALLOWEXPEND_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXP_PERSONALRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXP_PERSONAL As PL_EXP_PERSONALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXP_PERSONAL = CType(Me.Table,PL_EXP_PERSONALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_PLTYPE' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_KEY' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_EXAKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_EXAKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_SOURCENO' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DESC' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_AMOUNT' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DEDUCTIBLE' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_NOTE' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_DETAIL' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_1' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXA_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL.EXA_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXA_2' in table 'PL_EXP_PERSONAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL.EXA_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_PLTYPENull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_KEYNull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_SOURCENONull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DESCNull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_AMOUNTNull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DEDUCTIBLENull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_NOTENull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_DETAILNull()
            Me(Me.tablePL_EXP_PERSONAL.EXA_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_1Null()
            Me(Me.tablePL_EXP_PERSONAL.EXA_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXA_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL.EXA_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXA_2Null()
            Me(Me.tablePL_EXP_PERSONAL.EXA_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_EXP_PERSONAL_DETAILRows() As PL_EXP_PERSONAL_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL") Is Nothing) Then
                Return New PL_EXP_PERSONAL_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL")),PL_EXP_PERSONAL_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_EXP_PERSONAL_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_EXP_PERSONAL_DETAIL As PL_EXP_PERSONAL_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_EXP_PERSONAL_DETAIL = CType(Me.Table,PL_EXP_PERSONAL_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_PLTYPE' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_KEY' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXAKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXAKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXAKEY' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXAKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_SOURCENO' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_EXADKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXADKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_EXADKEY' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXADKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DESC' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_DEDUCTIBLE' in table 'PL_EXP_PERSONAL_DETAIL' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_AMOUNT' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXAD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXAD_NOTE' in table 'PL_EXP_PERSONAL_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_PERSONALRow() As PL_EXP_PERSONALRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL")),PL_EXP_PERSONALRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_EXP_PERSONAL_PL_EXP_PERSONAL_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_PLTYPENull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_KEYNull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXAKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXAKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXAKEYNull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXAKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_SOURCENONull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_EXADKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXADKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_EXADKEYNull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_EXADKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DESCNull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_DEDUCTIBLENull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_AMOUNTNull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXAD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXAD_NOTENull()
            Me(Me.tablePL_EXP_PERSONAL_DETAIL.EXAD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_PURCHASERow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_PURCHASE As PL_PURCHASEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_PURCHASE = CType(Me.Table,PL_PURCHASEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PLTYPE' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_KEY' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PLFCSKEY() As Integer
            Get
                Return CType(Me(Me.tablePL_PURCHASE.PL_PLFCSKEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_SOURCENO' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DESC' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_AMOUNT' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NOTE' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DETAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_DETAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DETAIL' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_DETAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_1' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_2' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE.PL_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DEDUCTIBLE' in table 'PL_PURCHASE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE.PL_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PLTYPENull()
            Me(Me.tablePL_PURCHASE.PL_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_KEYNull()
            Me(Me.tablePL_PURCHASE.PL_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_SOURCENONull()
            Me(Me.tablePL_PURCHASE.PL_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DESCNull()
            Me(Me.tablePL_PURCHASE.PL_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_AMOUNTNull()
            Me(Me.tablePL_PURCHASE.PL_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NOTENull()
            Me(Me.tablePL_PURCHASE.PL_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DETAILNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_DETAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DETAILNull()
            Me(Me.tablePL_PURCHASE.PL_DETAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_1Null() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_1Null()
            Me(Me.tablePL_PURCHASE.PL_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_2Null() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_2Null()
            Me(Me.tablePL_PURCHASE.PL_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE.PL_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DEDUCTIBLENull()
            Me(Me.tablePL_PURCHASE.PL_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPL_PURCHASE_DETAILRows() As PL_PURCHASE_DETAILRow()
            If (Me.Table.ChildRelations("FK_PL_PURCHASE_PL_PURCHASE_DETAIL") Is Nothing) Then
                Return New PL_PURCHASE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PL_PURCHASE_PL_PURCHASE_DETAIL")),PL_PURCHASE_DETAILRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PL_PURCHASE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tablePL_PURCHASE_DETAIL As PL_PURCHASE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePL_PURCHASE_DETAIL = CType(Me.Table,PL_PURCHASE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLTYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLTYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLTYPE' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_KEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_KEY' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLFCSKEY' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_SOURCENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_SOURCENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_SOURCENO' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_SOURCENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_PLFCSDKEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSDKEYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_PLFCSDKEY' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSDKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_DESC' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_AMOUNT' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_NOTE' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLD_DEDUCTIBLE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePL_PURCHASE_DETAIL.PLD_DEDUCTIBLEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLD_DEDUCTIBLE' in table 'PL_PURCHASE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePL_PURCHASE_DETAIL.PLD_DEDUCTIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PURCHASERow() As PL_PURCHASERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PL_PURCHASE_PL_PURCHASE_DETAIL")),PL_PURCHASERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PL_PURCHASE_PL_PURCHASE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_PLTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLTYPENull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_KEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_KEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_KEYNull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_KEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLFCSKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLFCSKEYNull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_SOURCENONull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_SOURCENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_SOURCENONull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_SOURCENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_PLFCSDKEYNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSDKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_PLFCSDKEYNull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_PLFCSDKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_DESCNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_DESCNull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_AMOUNTNull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_NOTENull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLD_DEDUCTIBLENull() As Boolean
            Return Me.IsNull(Me.tablePL_PURCHASE_DETAIL.PLD_DEDUCTIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLD_DEDUCTIBLENull()
            Me(Me.tablePL_PURCHASE_DETAIL.PLD_DEDUCTIBLEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PROFIT_LOSS_ACCOUNTRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROFIT_LOSS_ACCOUNT As PROFIT_LOSS_ACCOUNTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROFIT_LOSS_ACCOUNT = CType(Me.Table,PROFIT_LOSS_ACCOUNTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_KEY() As Integer
            Get
                Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_REF_PREFIX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_PREFIXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_REF_PREFIX' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_PREFIXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_REF_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_REF_NO' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_FILENO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_FILENOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_FILENO' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_FILENOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAME' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_YA() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_YAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_YA' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_YAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_MAIN_BUSINESS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAIN_BUSINESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_MAIN_BUSINESS' in table 'PROFIT_LOSS_ACCOUNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAIN_BUSINESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_SALES() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_SALESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_SALES' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_SALESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OP_STK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OP_STKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OP_STK' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OP_STKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PURCHASES() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PURCHASES' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PRO_COST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PRO_COST' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PRO_COST_DPC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_DPCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PRO_COST_DPC' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_DPCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PRO_COST_OAE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_OAEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PRO_COST_OAE' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_OAEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PRO_COST_ONAE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_ONAEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PRO_COST_ONAE' in table 'PROFIT_LOSS_ACCOUNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_ONAEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PURCHASES_PRO_COST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASES_PRO_COSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PURCHASES_PRO_COST' in table 'PROFIT_LOSS_ACCOUNT' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASES_PRO_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_CLS_STK() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_CLS_STKColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_CLS_STK' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_CLS_STKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_COGS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_COGSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_COGS' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_COGSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_GROSS_PROFIT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_GROSS_PROFITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_GROSS_PROFIT' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_GROSS_PROFITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OTH_BSIN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_BSINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OTH_BSIN' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_BSINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OTH_IN() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_INColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OTH_IN' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_INColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OTH_IN_DIVIDEND() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_DIVIDENDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OTH_IN_DIVIDEND' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_DIVIDENDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OTH_IN_INTEREST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_INTERESTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OTH_IN_INTEREST' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_INTERESTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OTH_IN_RENTAL_ROYALTY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_RENTAL_ROYALTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OTH_IN_RENTAL_ROYALTY' in table 'PROFIT_LOSS_ACCOUNT' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_RENTAL_ROYALTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_OTH_IN_OTHER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_OTHERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_OTH_IN_OTHER' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_OTHERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NT_INCOME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_INCOMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NT_INCOME' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_INCOMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NT_GAIN_DISPOSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_DISPOSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NT_GAIN_DISPOSAL' in table 'PROFIT_LOSS_ACCOUNT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_DISPOSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NT_GAIN_FOREXCHANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_FOREXCHANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NT_GAIN_FOREXCHANGE' in table 'PROFIT_LOSS_ACCOUNT' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_FOREXCHANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NT_GAIN_INVEST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_INVESTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NT_GAIN_INVEST' in table 'PROFIT_LOSS_ACCOUNT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_INVESTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NT_OTHERS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_OTHERSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NT_OTHERS' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_OTHERSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_LOANINTEREST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_LOANINTERESTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_EXP_LOANINTEREST' in table 'PROFIT_LOSS_ACCOUNT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_LOANINTERESTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_SALARY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_SALARYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_EXP_SALARY' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_SALARYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_RENTAL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_RENTALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_EXP_RENTAL' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_RENTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_CONTRACT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_CONTRACTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_EXP_CONTRACT' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_CONTRACTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_EXP_COMMISSION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_COMMISSIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_EXP_COMMISSION' in table 'PROFIT_LOSS_ACCOUNT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_COMMISSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_BAD_DEBTS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_BAD_DEBTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_BAD_DEBTS' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_BAD_DEBTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_TRAVEL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TRAVELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_TRAVEL' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TRAVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_EPF_PER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_PERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_EPF_PER' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_PERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_EPF_STAFF() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_STAFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_EPF_STAFF' in table 'PROFIT_LOSS_ACCOUNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_STAFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_LEGALFEE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_LEGALFEEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_LEGALFEE' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_LEGALFEEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NON_ALLOW_LOSS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NON_ALLOW_LOSSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NON_ALLOW_LOSS' in table 'PROFIT_LOSS_ACCOUNT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NON_ALLOW_LOSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAL_LOSS_DISPOSAL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_DISPOSALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAL_LOSS_DISPOSAL' in table 'PROFIT_LOSS_ACCOUNT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_DISPOSALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAL_LOSS_FOREXCHANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_FOREXCHANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAL_LOSS_FOREXCHANGE' in table 'PROFIT_LOSS_ACCOUNT' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_FOREXCHANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAL_LOSS_INVEST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_INVESTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAL_LOSS_INVEST' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_INVESTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAL_OTHERS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_OTHERSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAL_OTHERS' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_OTHERSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_DEPERECIATION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DEPERECIATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_DEPERECIATION' in table 'PROFIT_LOSS_ACCOUNT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DEPERECIATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_ENTERTAINMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ENTERTAINMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_ENTERTAINMENT' in table 'PROFIT_LOSS_ACCOUNT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ENTERTAINMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_GIFT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_GIFTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_GIFT' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_GIFTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_DONATION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DONATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_DONATION' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DONATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_PENALTY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PENALTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_PENALTY' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PENALTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_STOCKDRAWING() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_STOCKDRAWINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_STOCKDRAWING' in table 'PROFIT_LOSS_ACCOUNT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_STOCKDRAWINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_CASHDRAWING() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CASHDRAWINGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_CASHDRAWING' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CASHDRAWINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_PROVISION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PROVISIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_PROVISION' in table 'PROFIT_LOSS_ACCOUNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PROVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_PRELIMINARY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PRELIMINARYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_PRELIMINARY' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PRELIMINARYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_CAPITALEXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CAPITALEXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_CAPITALEXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CAPITALEXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_INTERESTEXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_INTERESTEXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_INTERESTEXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_INTERESTEXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_ASSETWOFF() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ASSETWOFFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_ASSETWOFF' in table 'PROFIT_LOSS_ACCOUNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ASSETWOFFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAEP_MOTORVEH() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MOTORVEHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAEP_MOTORVEH' in table 'PROFIT_LOSS_ACCOUNT' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MOTORVEHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAEP_RESIDENTIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_RESIDENTIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAEP_RESIDENTIAL' in table 'PROFIT_LOSS_ACCOUNT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_RESIDENTIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAEP_TEL() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_TELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAEP_TEL' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAEP_SUBSCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SUBSCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAEP_SUBSCRIPTION' in table 'PROFIT_LOSS_ACCOUNT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SUBSCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAEP_SEMILAR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SEMILARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAEP_SEMILAR' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SEMILARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAEP_MEDICALEXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MEDICALEXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAEP_MEDICALEXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MEDICALEXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_OTHEREXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_OTHEREXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_OTHEREXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_OTHEREXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NAE_TOTALEXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_TOTALEXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NAE_TOTALEXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_TOTALEXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_TOT_EXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOT_EXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_TOT_EXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOT_EXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_NET_PROFIT_LOSS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NET_PROFIT_LOSSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_NET_PROFIT_LOSS' in table 'PROFIT_LOSS_ACCOUNT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NET_PROFIT_LOSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_DISALLOWED_EXP() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_DISALLOWED_EXPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_DISALLOWED_EXP' in table 'PROFIT_LOSS_ACCOUNT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_DISALLOWED_EXPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_TOTALX() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_TOTALX' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_TOTALY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_TOTALY' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_1' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_2' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_3() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_3' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_4() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_4' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_5() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_5' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_COMPANY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_COMPANYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_COMPANY' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_COMPANYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_MAINCOMPANY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAINCOMPANYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_MAINCOMPANY' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAINCOMPANYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_REP_MAINT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REP_MAINTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_REP_MAINT' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REP_MAINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_PRO_ADV() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_ADVColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_PRO_ADV' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_ADVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PL_JKDM() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_JKDMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PL_JKDM' in table 'PROFIT_LOSS_ACCOUNT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_JKDMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_REF_PREFIXNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_PREFIXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_REF_PREFIXNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_PREFIXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_REF_NONull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_REF_NONull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REF_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_FILENONull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_FILENOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_FILENONull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_FILENOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAMENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_YANull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_YAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_YANull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_YAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_MAIN_BUSINESSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAIN_BUSINESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_MAIN_BUSINESSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAIN_BUSINESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_SALESNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_SALESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_SALESNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_SALESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OP_STKNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OP_STKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OP_STKNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OP_STKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PURCHASESNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PURCHASESNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PRO_COSTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PRO_COSTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PRO_COST_DPCNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_DPCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PRO_COST_DPCNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_DPCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PRO_COST_OAENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_OAEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PRO_COST_OAENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_OAEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PRO_COST_ONAENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_ONAEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PRO_COST_ONAENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_COST_ONAEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PURCHASES_PRO_COSTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASES_PRO_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PURCHASES_PRO_COSTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PURCHASES_PRO_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_CLS_STKNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_CLS_STKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_CLS_STKNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_CLS_STKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_COGSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_COGSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_COGSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_COGSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_GROSS_PROFITNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_GROSS_PROFITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_GROSS_PROFITNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_GROSS_PROFITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OTH_BSINNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_BSINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OTH_BSINNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_BSINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OTH_INNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_INColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OTH_INNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_INColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OTH_IN_DIVIDENDNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_DIVIDENDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OTH_IN_DIVIDENDNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_DIVIDENDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OTH_IN_INTERESTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_INTERESTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OTH_IN_INTERESTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_INTERESTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OTH_IN_RENTAL_ROYALTYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_RENTAL_ROYALTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OTH_IN_RENTAL_ROYALTYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_RENTAL_ROYALTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_OTH_IN_OTHERNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_OTHERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_OTH_IN_OTHERNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_OTH_IN_OTHERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NT_INCOMENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_INCOMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NT_INCOMENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_INCOMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NT_GAIN_DISPOSALNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_DISPOSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NT_GAIN_DISPOSALNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_DISPOSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NT_GAIN_FOREXCHANGENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_FOREXCHANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NT_GAIN_FOREXCHANGENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_FOREXCHANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NT_GAIN_INVESTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_INVESTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NT_GAIN_INVESTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_GAIN_INVESTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NT_OTHERSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_OTHERSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NT_OTHERSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NT_OTHERSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_EXP_LOANINTERESTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_LOANINTERESTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_EXP_LOANINTERESTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_LOANINTERESTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_EXP_SALARYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_SALARYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_EXP_SALARYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_SALARYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_EXP_RENTALNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_RENTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_EXP_RENTALNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_RENTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_EXP_CONTRACTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_CONTRACTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_EXP_CONTRACTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_CONTRACTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_EXP_COMMISSIONNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_COMMISSIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_EXP_COMMISSIONNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_EXP_COMMISSIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_BAD_DEBTSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_BAD_DEBTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_BAD_DEBTSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_BAD_DEBTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_TRAVELNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_TRAVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_TRAVELNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TRAVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_EPF_PERNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_PERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_EPF_PERNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_PERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_EPF_STAFFNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_STAFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_EPF_STAFFNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_EPF_STAFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_LEGALFEENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_LEGALFEEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_LEGALFEENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_LEGALFEEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NON_ALLOW_LOSSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NON_ALLOW_LOSSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NON_ALLOW_LOSSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NON_ALLOW_LOSSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAL_LOSS_DISPOSALNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_DISPOSALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAL_LOSS_DISPOSALNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_DISPOSALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAL_LOSS_FOREXCHANGENull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_FOREXCHANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAL_LOSS_FOREXCHANGENull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_FOREXCHANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAL_LOSS_INVESTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_INVESTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAL_LOSS_INVESTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_LOSS_INVESTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAL_OTHERSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_OTHERSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAL_OTHERSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAL_OTHERSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_DEPERECIATIONNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DEPERECIATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_DEPERECIATIONNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DEPERECIATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_ENTERTAINMENTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ENTERTAINMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_ENTERTAINMENTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ENTERTAINMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_GIFTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_GIFTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_GIFTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_GIFTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_DONATIONNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DONATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_DONATIONNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_DONATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_PENALTYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PENALTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_PENALTYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PENALTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_STOCKDRAWINGNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_STOCKDRAWINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_STOCKDRAWINGNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_STOCKDRAWINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_CASHDRAWINGNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CASHDRAWINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_CASHDRAWINGNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CASHDRAWINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_PROVISIONNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PROVISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_PROVISIONNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PROVISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_PRELIMINARYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PRELIMINARYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_PRELIMINARYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_PRELIMINARYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_CAPITALEXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CAPITALEXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_CAPITALEXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_CAPITALEXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_INTERESTEXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_INTERESTEXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_INTERESTEXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_INTERESTEXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_ASSETWOFFNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ASSETWOFFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_ASSETWOFFNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_ASSETWOFFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAEP_MOTORVEHNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MOTORVEHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAEP_MOTORVEHNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MOTORVEHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAEP_RESIDENTIALNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_RESIDENTIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAEP_RESIDENTIALNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_RESIDENTIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAEP_TELNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_TELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAEP_TELNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_TELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAEP_SUBSCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SUBSCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAEP_SUBSCRIPTIONNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SUBSCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAEP_SEMILARNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SEMILARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAEP_SEMILARNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_SEMILARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAEP_MEDICALEXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MEDICALEXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAEP_MEDICALEXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAEP_MEDICALEXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_OTHEREXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_OTHEREXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_OTHEREXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_OTHEREXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NAE_TOTALEXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_TOTALEXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NAE_TOTALEXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NAE_TOTALEXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_TOT_EXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOT_EXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_TOT_EXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOT_EXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_NET_PROFIT_LOSSNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_NET_PROFIT_LOSSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_NET_PROFIT_LOSSNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_NET_PROFIT_LOSSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_DISALLOWED_EXPNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_DISALLOWED_EXPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_DISALLOWED_EXPNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_DISALLOWED_EXPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_TOTALXNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_TOTALXNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_TOTALYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_TOTALYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_TOTALYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_1Null() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_1Null()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_2Null() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_2Null()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_3Null() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_3Null()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_4Null() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_4Null()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_5Null() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_5Null()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_COMPANYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_COMPANYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_COMPANYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_COMPANYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_MAINCOMPANYNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAINCOMPANYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_MAINCOMPANYNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_MAINCOMPANYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_REP_MAINTNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_REP_MAINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_REP_MAINTNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_REP_MAINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_PRO_ADVNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_ADVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_PRO_ADVNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_PRO_ADVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPL_JKDMNull() As Boolean
            Return Me.IsNull(Me.tablePROFIT_LOSS_ACCOUNT.PL_JKDMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPL_JKDMNull()
            Me(Me.tablePROFIT_LOSS_ACCOUNT.PL_JKDMColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AiRow
        Inherits Global.System.Data.DataRow
        
        Private tableAi As AiDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAi = CType(Me.Table,AiDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Long
            Get
                Return CType(Me(Me.tableAi.IDColumn),Long)
            End Get
            Set
                Me(Me.tableAi.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property From() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi.FromColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'From' in table 'Ai' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi.FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Communication() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi.CommunicationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Communication' in table 'Ai' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi.CommunicationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property JobType() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi.JobTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobType' in table 'Ai' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi.JobTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KeyName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi.KeyNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KeyName' in table 'Ai' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi.KeyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFromNull() As Boolean
            Return Me.IsNull(Me.tableAi.FromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFromNull()
            Me(Me.tableAi.FromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommunicationNull() As Boolean
            Return Me.IsNull(Me.tableAi.CommunicationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommunicationNull()
            Me(Me.tableAi.CommunicationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsJobTypeNull() As Boolean
            Return Me.IsNull(Me.tableAi.JobTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetJobTypeNull()
            Me(Me.tableAi.JobTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKeyNameNull() As Boolean
            Return Me.IsNull(Me.tableAi.KeyNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKeyNameNull()
            Me(Me.tableAi.KeyNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetAi_ResultRows() As Ai_ResultRow()
            If (Me.Table.ChildRelations("FK_Ai_Ai_Result") Is Nothing) Then
                Return New Ai_ResultRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Ai_Ai_Result")),Ai_ResultRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Ai_ResultRow
        Inherits Global.System.Data.DataRow
        
        Private tableAi_Result As Ai_ResultDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAi_Result = CType(Me.Table,Ai_ResultDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAi_Result.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'Ai_Result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi_Result.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi_Result.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Ai_Result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi_Result.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Q1() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi_Result.Q1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Q1' in table 'Ai_Result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi_Result.Q1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Q2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi_Result.Q2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Q2' in table 'Ai_Result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi_Result.Q2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Q3() As String
            Get
                Try 
                    Return CType(Me(Me.tableAi_Result.Q3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Q3' in table 'Ai_Result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi_Result.Q3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ParentID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAi_Result.ParentIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParentID' in table 'Ai_Result' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAi_Result.ParentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AiRow() As AiRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Ai_Ai_Result")),AiRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Ai_Ai_Result"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableAi_Result.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableAi_Result.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAi_Result.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableAi_Result.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsQ1Null() As Boolean
            Return Me.IsNull(Me.tableAi_Result.Q1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetQ1Null()
            Me(Me.tableAi_Result.Q1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsQ2Null() As Boolean
            Return Me.IsNull(Me.tableAi_Result.Q2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetQ2Null()
            Me(Me.tableAi_Result.Q2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsQ3Null() As Boolean
            Return Me.IsNull(Me.tableAi_Result.Q3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetQ3Null()
            Me(Me.tableAi_Result.Q3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsParentIDNull() As Boolean
            Return Me.IsNull(Me.tableAi_Result.ParentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetParentIDNull()
            Me(Me.tableAi_Result.ParentIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class INCOME_ADJ_NON_TAXABLE_INCOMERow
        Inherits Global.System.Data.DataRow
        
        Private tableINCOME_ADJ_NON_TAXABLE_INCOME As INCOME_ADJ_NON_TAXABLE_INCOMEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINCOME_ADJ_NON_TAXABLE_INCOME = CType(Me.Table,INCOME_ADJ_NON_TAXABLE_INCOMEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_KEY() As Integer
            Get
                Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_KEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_PREFIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_PREFITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_PREFIT' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_PREFITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_REF_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_REF_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_REF_NO' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_REF_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_YA() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_YAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_YA' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_YAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_DESC' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_AMOUNT' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_CATEGORIZED() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_CATEGORIZEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_CATEGORIZED' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_CATEGORIZEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_SOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_SOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_SOURCE' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_SOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_1() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_1' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_2' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NT_3() As String
            Get
                Try 
                    Return CType(Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NT_3' in table 'INCOME_ADJ_NON_TAXABLE_INCOME' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_PREFITNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_PREFITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_PREFITNull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_PREFITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_REF_NONull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_REF_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_REF_NONull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_REF_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_YANull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_YAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_YANull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_YAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_DESCNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_DESCNull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_AMOUNTNull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_CATEGORIZEDNull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_CATEGORIZEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_CATEGORIZEDNull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_CATEGORIZEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_SOURCENull() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_SOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_SOURCENull()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_SOURCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_1Null() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_1Null()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_2Null() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_2Null()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNT_3Null() As Boolean
            Return Me.IsNull(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNT_3Null()
            Me(Me.tableINCOME_ADJ_NON_TAXABLE_INCOME.NT_3Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_SALESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_SALESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_SALESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_SALESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_SALES_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_SALES_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_SALES_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_SALES_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PNL_INFORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PNL_INFORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PNL_INFORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PNL_INFORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_OPENSTOCKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_OPENSTOCKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_OPENSTOCKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_OPENSTOCKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_OPENSTOCK_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_OPENSTOCK_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_OPENSTOCK_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_OPENSTOCK_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_PRODUCTION_COST_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_PRODUCTION_COST_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_PRODUCTION_COST_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_PRODUCTION_COST_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_PRODUCTION_COSTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_PRODUCTION_COSTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_PRODUCTION_COSTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_PRODUCTION_COSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PNL_SEARCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PNL_SEARCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PNL_SEARCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PNL_SEARCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_CLOSESTOCKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_CLOSESTOCKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_CLOSESTOCKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_CLOSESTOCKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_CLOSESTOCK_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_CLOSESTOCK_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_CLOSESTOCK_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_CLOSESTOCK_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_INCOME_OTHERBUSINESSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_INCOME_OTHERBUSINESSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_INCOME_OTHERBUSINESSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_INCOME_OTHERBUSINESSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_INCOME_OTHERBUSINESS_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_INCOME_OTHERBUSINESS_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_INCOME_OTHERBUSINESS_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_INCOME_OTHERBUSINESS_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_INCOME_NONBUSINESSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_INCOME_NONBUSINESSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_INCOME_NONBUSINESSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_INCOME_NONBUSINESSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_INCOME_NONBUSINESS_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_INCOME_NONBUSINESS_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_INCOME_NONBUSINESS_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_INCOME_NONBUSINESS_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_INCOME_NONTAXABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_INCOME_NONTAXABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_INCOME_NONTAXABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_INCOME_NONTAXABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_INCOME_NONTAXABLE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_INCOME_NONTAXABLE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_INCOME_NONTAXABLE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_INCOME_NONTAXABLE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXPENSESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXPENSESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXPENSESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXPENSESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXPENSES_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXPENSES_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXPENSES_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXPENSES_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXP_NONALLOWLOSSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXP_NONALLOWLOSSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXP_NONALLOWLOSSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXP_NONALLOWLOSSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXP_NONALLOWLOSS_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXP_NONALLOWLOSS_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXP_NONALLOWLOSS_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXP_NONALLOWLOSS_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXP_NONALLOWEXPENDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXP_NONALLOWEXPENDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXP_NONALLOWEXPENDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXP_NONALLOWEXPENDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXP_NONALLOWEXPEND_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXP_NONALLOWEXPEND_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXP_NONALLOWEXPEND_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXP_NONALLOWEXPEND_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXP_PERSONALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXP_PERSONALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXP_PERSONALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXP_PERSONALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_EXP_PERSONAL_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_EXP_PERSONAL_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_EXP_PERSONAL_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_EXP_PERSONAL_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_PURCHASERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_PURCHASERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_PURCHASERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_PURCHASERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PL_PURCHASE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PL_PURCHASE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PL_PURCHASE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PL_PURCHASE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PROFIT_LOSS_ACCOUNTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROFIT_LOSS_ACCOUNTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PROFIT_LOSS_ACCOUNTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PROFIT_LOSS_ACCOUNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AiRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AiRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AiRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Ai_ResultRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Ai_ResultRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Ai_ResultRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Ai_ResultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class INCOME_ADJ_NON_TAXABLE_INCOMERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INCOME_ADJ_NON_TAXABLE_INCOMERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As INCOME_ADJ_NON_TAXABLE_INCOMERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As INCOME_ADJ_NON_TAXABLE_INCOMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
